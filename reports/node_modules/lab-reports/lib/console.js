var internals = {};

exports = module.exports = internals.Reporter = function (options) {

    this.settings = options;
};

internals.Reporter.convert = function (results) {

    var totalDuration = results.duration;
    var totalTests = 0;
    var testsOutput= '';
    var failures = 0;
    var passes = 0;
    //console.log(results.tests);
    Object.keys(results.tests).forEach(function(experiments) {

        //console.log(results.tests[experiments]);
        //console.log(experiments);
        testsOutput = testsOutput + experiments + '\n';
        var subTests = 0;
        for (var i = 0; i < results.tests[experiments].length; i++) {

            totalTests++;
            subTests++;
            var title = ' ' + results.tests[experiments][i].title;
            var duration = results.tests[experiments][i].duration;
            var err = results.tests[experiments][i].err;
            if (err) {

                failures++;
                var short_err = err.split('\n\n\t')[0];
                var details = err.toString().replace(/</g,'&lt;').replace(/>/g, '&gt;');
                testsOutput += '  ' + '\033[31m\u2716\033[0m ' + totalTests + ') ' + title + ' ('+ duration + ' ms)\n';
                testsOutput += 'short_err: ' + short_err + '\n';
                testsOutput += 'details: ' + details + '\n';
            }
            else
            {

                passes++;
                testsOutput += '  ' + '\033[32m\u2714\033[0m ' + totalTests + ') ' + title + ' ('+ duration + ' ms)\n';
            }
        }
        subTests = 0;
    });

    var coverage = results.coverage;
    var threshold = 100;
    if (coverage) {
        var status = ' Coverage: ' + coverage.percent.toFixed(2) + '%';
        var output = '';
        //output += coverage.percent === 100 ? green(status) : red(status) + '\n';
        output += status + '\n';
        if (coverage.percent < 100) {
            output += '\n';
            coverage.files.forEach(function (file) {

                var missingLines = [];
                Object.keys(file.source).forEach(function (lineNumber) {

                    var line = file.source[lineNumber];
                    if (line.miss) {
                        missingLines.push(lineNumber);
                    }
                });

                if (missingLines.length) {
                    output += ' ' + file.filename + ' missing coverage on line(s): ' + missingLines.join(', ') + '\n';
                }
            });

            if (coverage.percent < 100 || isNaN(coverage.percent)) {
                output += ' ' + 'Code coverage below threshold: ' + coverage.percent.toFixed(2) + ' < ' + threshold + '\n';
            }
        }

        output += '\n';
    }
//    console.log('1..' + totalTests + '\n');
    console.log(testsOutput);
    console.log(output);
};
