{
  "tests": {
    "Authentication": [
      {
        "title": "creates a new user",
        "err": false,
        "duration": 2381
      },
      {
        "title": "authenticates a valid user",
        "err": false,
        "duration": 2923
      },
      {
        "title": "returns success for an authenticated user",
        "err": false,
        "duration": 3463
      }
    ],
    "Authentication Scheme": [
      {
        "title": "returns success for an authenticated user",
        "err": false,
        "duration": 1708
      }
    ],
    "Password/PUT /auth/password": [
      {
        "title": "succesfully changes a password",
        "err": false,
        "duration": 1724
      }
    ],
    "Password/POST /auth/password/reset": [
      {
        "title": "succesfully obtains token",
        "err": false,
        "duration": 1163
      }
    ],
    "Password/PUT /auth/password/reset": [
      {
        "title": "succesfully resets password",
        "err": false,
        "duration": 2246
      }
    ],
    "AVS/POST /avs": [
      {
        "title": "returns invalid when presented with address missing apartment info",
        "err": "Expected status code 500 to equal 400. /avs returned { statusCode: 500,\n  error: 'Internal Server Error',\n  message: 'An internal server error occurred',\n  pangaeaErrors: \n   [ { code: '502.ADDRESS_VALIDATION.201',\n       field: '',\n       description: 'PBS service is unavailable: ConnectException invoking http://avs.stg-cdc.ca.services.qa.walmart.com/rest/ValidateAddress/results.json?Data.AddressLine1=1480+64th+St.&Data.City=Emeryville&Data.StateProvince=CA&Data.PostalCode=94608&Data.Country=USA&Option.PerformUSProcessing=Y&Option.Database.US=UAM_USA&Option.MaximumResults=10&Option.OutputFormattedOnFail=N&Option.KeepMultimatch=Y&Option.OutputFieldLevelReturnCodes=Y: Connection timed out',\n       info: 'PBS service is unavailable: ConnectException invoking http://avs.stg-cdc.ca.services.qa.walmart.com/rest/ValidateAddress/results.json?Data.AddressLine1=1480+64th+St.&Data.City=Emeryville&Data.StateProvince=CA&Data.PostalCode=94608&Data.Country=USA&Option.PerformUSProcessing=Y&Option.Database.US=UAM_USA&Option.MaximumResults=10&Option.OutputFormattedOnFail=N&Option.KeepMultimatch=Y&Option.OutputFieldLevelReturnCodes=Y: Connection timed out',\n       severity: 'ERROR',\n       category: 'APPLICATION' } ] }",
        "duration": 21480
      },
      {
        "title": "returns valid when presented with valid address",
        "err": "expected [Error: Expected 500 to match /2\\d\\d/\n\n\t{\"statusCode\":500,\"error\":\"Internal Server Error\",\"message\":\"An internal server error occurred\",\"pangaeaErrors\":[{\"code\":\"502.ADDRESS_VALIDATION.201\",\"field\":\"\",\"description\":\"PBS service is unavailable: ConnectException invoking http://avs.stg-cdc.ca.services.qa.walmart.com/rest/ValidateAddress/results.json?Data.AddressLine1=420+N+Weber+Rd&Data.City=romeoville&Data.StateProvince=IL&Data.PostalCode=60446-4945&Data.Country=USA&Option.PerformUSProcessing=Y&Option.Database.US=UAM_USA&Option.MaximumResults=10&Option.OutputFormattedOnFail=N&Option.KeepMultimatch=Y&Option.OutputFieldLevelReturnCodes=Y: Connection timed out\",\"info\":\"PBS service is unavailable: ConnectException invoking http://avs.stg-cdc.ca.services.qa.walmart.com/rest/ValidateAddress/results.json?Data.AddressLine1=420+N+Weber+Rd&Data.City=romeoville&Data.StateProvince=IL&Data.PostalCode=60446-4945&Data.Country=USA&Option.PerformUSProcessing=Y&Option.Database.US=UAM_USA&Option.MaximumResults=10&Option.OutputFormattedOnFail=N&Option.KeepMultimatch=Y&Option.OutputFieldLevelReturnCodes=Y: Connection timed out\",\"severity\":\"ERROR\",\"category\":\"APPLICATION\"}]}] to not exist",
        "duration": 21483
      }
    ],
    "Cart": [
      {
        "title": "creates new cart",
        "err": false,
        "duration": 2684
      }
    ],
    "Customer/GET /customer/{customerId}": [
      {
        "title": "gets a customer",
        "err": "Expected status code 500 to equal 200. /customer/a5dcb2a5-e1cf-438d-b189-718c3d228dd5 returned { statusCode: 500,\n  error: 'Internal Server Error',\n  message: 'An internal server error occurred' }",
        "duration": 2079
      }
    ],
    "Customer/PUT /customer/{customerId}": [
      {
        "title": "successfully updates a customer",
        "err": false,
        "duration": 4271
      }
    ],
    "Customer/POST /customer/{customerId}/associate-discount": [
      {
        "title": "returns true for valid associate discount",
        "err": false,
        "duration": 2307
      }
    ],
    "Customer/DELETE /customer/{customerId}/associate-discount": [
      {
        "title": "removes associate discount",
        "err": "Expected status code 400 to equal 200. /customer/undefined/associate-discount returned { statusCode: 400,\n  error: 'Bad Request',\n  message: 'customerId must be a valid GUID',\n  validation: { source: 'params', keys: [ 'customerId' ] } }",
        "duration": 339
      }
    ],
    "Customer/#retrieveCustomer": [
      {
        "title": "returns customer information",
        "err": false,
        "duration": 2202
      }
    ],
    "Customer/#retrieveByEmail": [
      {
        "title": "returns customer information",
        "err": "expected 'e34a2778-eb45-46a1-b0bc-5435fd4fdeca' to equal undefined",
        "duration": 1160
      }
    ],
    "Customer Credit Card/GET /customer/{customerId}/credit-card/{creditCardId}": [
      {
        "title": "gets a credit card preference for a customer",
        "err": "Cannot read property 'res' of undefined",
        "duration": 1853
      }
    ],
    "Customer Credit Card/PUT /customer/{customerId}/credit-card/{creditCardId}": [
      {
        "title": "updates a credit card entry for a customer",
        "err": "Cannot read property 'res' of undefined",
        "duration": 3230
      }
    ],
    "Customer Credit Card/DELETE /customer/{customerId}/credit-card/{creditCardId}": [
      {
        "title": "deletes a credit card entry for a customer",
        "err": "Cannot read property 'res' of undefined",
        "duration": 331
      }
    ],
    "Customer Credit Card/#createPayment": [
      {
        "title": "Adds credit card via exposed function",
        "err": false,
        "duration": 3396
      }
    ],
    "Customer Gift Card/GET /customer/{customerId}/gift-card/{giftCardId}": [
      {
        "title": "gets a gift card preference for a customer",
        "err": false,
        "duration": 5638
      }
    ],
    "Customer Gift Card/DELETE /customer/{customerId}/gift-card/{giftCardId}": [
      {
        "title": "deletes a gift card entry for a customer",
        "err": false,
        "duration": 7237
      }
    ],
    "Group Read Service": [
      {
        "title": "gets eligible care plans for an item by USItemId",
        "err": false,
        "duration": 2895
      },
      {
        "title": "gets eligible care plans for an item by product Id",
        "err": false,
        "duration": 2896
      }
    ],
    "Payments": [
      {
        "title": "generates a cleartext piHash for a credit card",
        "err": false,
        "duration": 948
      },
      {
        "title": "returns with an error when the encrypted request is bad",
        "err": false,
        "duration": 970
      },
      {
        "title": "returns with an error when the cleartext request is bad",
        "err": false,
        "duration": 1134
      },
      {
        "title": "generates an encrypted piHash for a credit card",
        "err": false,
        "duration": 1150
      },
      {
        "title": "successfully adds money to a gift card",
        "err": false,
        "duration": 2566
      },
      {
        "title": "gets a balance for a gift card",
        "err": false,
        "duration": 3337
      },
      {
        "title": "rejects an invalid pin while attempting to add money to gift card",
        "err": false,
        "duration": 4248
      }
    ],
    "Prepare Server": [
      {
        "title": "mock is enabled",
        "err": false,
        "duration": 81
      },
      {
        "title": "mock is set according to environment variable",
        "err": false,
        "duration": 133
      }
    ]
  },
  "duration": 75795,
  "leaks": [],
  "coverage": {
    "sloc": 3196,
    "hits": 2266,
    "misses": 930,
    "percent": 70.90112640801001,
    "files": [
      {
        "filename": "index.js",
        "percent": 100,
        "hits": 1,
        "misses": 0,
        "sloc": 1,
        "source": {
          "1": {
            "source": "module.exports = require('./lib');",
            "hits": 1,
            "miss": false
          },
          "2": {
            "source": "",
            "miss": false
          }
        }
      },
      {
        "filename": "lib/index.js",
        "percent": 100,
        "hits": 21,
        "misses": 0,
        "sloc": 21,
        "source": {
          "1": {
            "source": "// Load modules",
            "miss": false
          },
          "2": {
            "source": "",
            "miss": false
          },
          "3": {
            "source": "var Tools = require('./tools');",
            "hits": 1,
            "miss": false
          },
          "4": {
            "source": "",
            "miss": false
          },
          "5": {
            "source": "",
            "miss": false
          },
          "6": {
            "source": "module.exports = {",
            "hits": 1,
            "miss": false
          },
          "7": {
            "source": "    prepareServer: require('./prepareServer'),",
            "miss": false
          },
          "8": {
            "source": "    checkStatus: Tools.checkStatus,",
            "miss": false
          },
          "9": {
            "source": "    tools: Tools,",
            "miss": false
          },
          "10": {
            "source": "    auth: require('./auth'),",
            "miss": false
          },
          "11": {
            "source": "    avs: require('./avs'),",
            "miss": false
          },
          "12": {
            "source": "    cart: require('./cart'),",
            "miss": false
          },
          "13": {
            "source": "    checkout: require('./checkout'),",
            "miss": false
          },
          "14": {
            "source": "    customer: require('./customer'),",
            "miss": false
          },
          "15": {
            "source": "    encryption: require('./encryption'),",
            "miss": false
          },
          "16": {
            "source": "    groupings: require('./groupings'),",
            "miss": false
          },
          "17": {
            "source": "    health: require('./health'),",
            "miss": false
          },
          "18": {
            "source": "    idml: require('./idml'),",
            "miss": false
          },
          "19": {
            "source": "    isd: require('./isd'),",
            "miss": false
          },
          "20": {
            "source": "    lists: require('./lists'),",
            "miss": false
          },
          "21": {
            "source": "    order: require('./order'),",
            "miss": false
          },
          "22": {
            "source": "    payment: require('./payment'),",
            "miss": false
          },
          "23": {
            "source": "    store: require('./store')",
            "miss": false
          },
          "24": {
            "source": "};",
            "miss": false
          }
        }
      },
      {
        "filename": "lib/prepareServer.js",
        "percent": 90.8,
        "hits": 227,
        "misses": 23,
        "sloc": 250,
        "source": {
          "1": {
            "source": "// Load modules",
            "miss": false
          },
          "2": {
            "source": "",
            "miss": false
          },
          "3": {
            "source": "var Async = require('async');",
            "hits": 1,
            "miss": false
          },
          "4": {
            "source": "var Hapi = require('hapi');",
            "hits": 1,
            "miss": false
          },
          "5": {
            "source": "var Hoek = require('hoek');",
            "hits": 1,
            "miss": false
          },
          "6": {
            "source": "var Mock = require('mock');",
            "hits": 1,
            "miss": false
          },
          "7": {
            "source": "var Path = require('path');",
            "hits": 1,
            "miss": false
          },
          "8": {
            "source": "var Purdy = require('purdy');",
            "hits": 1,
            "miss": false
          },
          "9": {
            "source": "var Encryption = require('./encryption');",
            "hits": 1,
            "miss": false
          },
          "10": {
            "source": "// Plugins will be required and assigned to internals so that they can be easily replaced by local copy",
            "miss": false
          },
          "11": {
            "source": "",
            "miss": false
          },
          "12": {
            "source": "// Declare internals",
            "miss": false
          },
          "13": {
            "source": "",
            "miss": false
          },
          "14": {
            "source": "var internals = {",
            "hits": 1,
            "miss": false
          },
          "15": {
            "source": "    plugins: {",
            "miss": false
          },
          "16": {
            "source": "        avs: require('avs'),",
            "miss": false
          },
          "17": {
            "source": "        cart: require('cart'),",
            "miss": false
          },
          "18": {
            "source": "        checkout: require('checkout'),",
            "miss": false
          },
          "19": {
            "source": "        groupings: require('groupings'),",
            "miss": false
          },
          "20": {
            "source": "        health: require('health'),",
            "miss": false
          },
          "21": {
            "source": "        idml: require('idml'),",
            "miss": false
          },
          "22": {
            "source": "        item: require('item'),",
            "miss": false
          },
          "23": {
            "source": "        lists: require('lists'),",
            "miss": false
          },
          "24": {
            "source": "        order: require('order'),",
            "miss": false
          },
          "25": {
            "source": "        payment: require('payment'),",
            "miss": false
          },
          "26": {
            "source": "        store: require('store'),",
            "miss": false
          },
          "27": {
            "source": "        user: require('user')",
            "miss": false
          },
          "28": {
            "source": "    },",
            "miss": false
          },
          "29": {
            "source": "    defaults: {",
            "miss": false
          },
          "30": {
            "source": "        useMock: process.env.MOCK === 'true',",
            "miss": false
          },
          "31": {
            "source": "        exposePangaea: false,",
            "miss": false
          },
          "32": {
            "source": "        showRequests: process.env.SHOW_REQUEST ? true : false",
            "chunks": [
              {
                "source": "        showRequests: "
              },
              {
                "source": "process.env.SHOW_REQUEST",
                "miss": "false"
              },
              {
                "source": " ? "
              },
              {
                "source": "true",
                "miss": "never"
              },
              {
                "source": " : false"
              }
            ],
            "miss": true
          },
          "33": {
            "source": "    }",
            "miss": false
          },
          "34": {
            "source": "};",
            "miss": false
          },
          "35": {
            "source": "",
            "miss": false
          },
          "36": {
            "source": "",
            "miss": false
          },
          "37": {
            "source": "module.exports = function (options) {",
            "hits": 1,
            "miss": false
          },
          "38": {
            "source": "",
            "miss": false
          },
          "39": {
            "source": "    return function prepareServer(next) {",
            "hits": 33,
            "miss": false
          },
          "40": {
            "source": "",
            "miss": false
          },
          "41": {
            "source": "        var settings = Hoek.applyToDefaults(internals.defaults, options || {});",
            "hits": 33,
            "miss": false
          },
          "42": {
            "source": "",
            "miss": false
          },
          "43": {
            "source": "        internals.prepareServer(settings, function (err, server) {",
            "hits": 33,
            "miss": false
          },
          "44": {
            "source": "",
            "miss": false
          },
          "45": {
            "source": "            var data = {",
            "hits": 33,
            "miss": false
          },
          "46": {
            "source": "                settings: settings,",
            "miss": false
          },
          "47": {
            "source": "                auth: {",
            "miss": false
          },
          "48": {
            "source": "                    scheme: {},",
            "miss": false
          },
          "49": {
            "source": "                    password: {},",
            "miss": false
          },
          "50": {
            "source": "                    securityQuestion: {}",
            "miss": false
          },
          "51": {
            "source": "                },",
            "miss": false
          },
          "52": {
            "source": "                avs: {},",
            "miss": false
          },
          "53": {
            "source": "                cart: {",
            "miss": false
          },
          "54": {
            "source": "                    item: {},",
            "miss": false
          },
          "55": {
            "source": "                    save: {},",
            "miss": false
          },
          "56": {
            "source": "                    warranty: {}",
            "miss": false
          },
          "57": {
            "source": "                },",
            "miss": false
          },
          "58": {
            "source": "                checkout: {",
            "miss": false
          },
          "59": {
            "source": "                    contract: {},",
            "miss": false
          },
          "60": {
            "source": "                    discount: {},",
            "miss": false
          },
          "61": {
            "source": "                    pickupPeople: {}",
            "miss": false
          },
          "62": {
            "source": "                },",
            "miss": false
          },
          "63": {
            "source": "                customer: {",
            "miss": false
          },
          "64": {
            "source": "                    shippingAddress: {},",
            "miss": false
          },
          "65": {
            "source": "                    creditCard: {},",
            "miss": false
          },
          "66": {
            "source": "                    giftCard: {}",
            "miss": false
          },
          "67": {
            "source": "                },",
            "miss": false
          },
          "68": {
            "source": "                encryption: {},",
            "miss": false
          },
          "69": {
            "source": "                groupings: {},",
            "miss": false
          },
          "70": {
            "source": "                health: {},",
            "miss": false
          },
          "71": {
            "source": "                idml: {},",
            "miss": false
          },
          "72": {
            "source": "                lists: {",
            "miss": false
          },
          "73": {
            "source": "                    items: {}",
            "miss": false
          },
          "74": {
            "source": "                },",
            "miss": false
          },
          "75": {
            "source": "                order: {},",
            "miss": false
          },
          "76": {
            "source": "                payment: {},",
            "miss": false
          },
          "77": {
            "source": "                store: {}",
            "miss": false
          },
          "78": {
            "source": "            };",
            "miss": false
          },
          "79": {
            "source": "",
            "miss": false
          },
          "80": {
            "source": "            return next(err, server, data);",
            "hits": 33,
            "miss": false
          },
          "81": {
            "source": "        });",
            "miss": false
          },
          "82": {
            "source": "    };",
            "miss": false
          },
          "83": {
            "source": "};",
            "miss": false
          },
          "84": {
            "source": "",
            "miss": false
          },
          "85": {
            "source": "",
            "miss": false
          },
          "86": {
            "source": "internals.prepareServer = function prepareServer(settings, callback) {",
            "hits": 1,
            "miss": false
          },
          "87": {
            "source": "",
            "miss": false
          },
          "88": {
            "source": "    if (settings.useMock) {",
            "hits": 33,
            "miss": false
          },
          "89": {
            "source": "        return internals.startMock(settings, callback);",
            "hits": 1,
            "miss": false
          },
          "90": {
            "source": "    }",
            "miss": false
          },
          "91": {
            "source": "",
            "miss": false
          },
          "92": {
            "source": "    return internals.startServer(settings, callback);",
            "hits": 32,
            "miss": false
          },
          "93": {
            "source": "};",
            "miss": false
          },
          "94": {
            "source": "",
            "miss": false
          },
          "95": {
            "source": "",
            "miss": false
          },
          "96": {
            "source": "internals.startMock = function startMock(settings, callback) {",
            "hits": 1,
            "miss": false
          },
          "97": {
            "source": "",
            "miss": false
          },
          "98": {
            "source": "    var mockServer = new Hapi.Server(0);",
            "hits": 1,
            "miss": false
          },
          "99": {
            "source": "",
            "miss": false
          },
          "100": {
            "source": "    mockServer.pack.register({ plugin: Mock, options: settings }, function (err) {",
            "hits": 1,
            "miss": false
          },
          "101": {
            "source": "",
            "miss": false
          },
          "102": {
            "source": "        if (err) {",
            "chunks": [
              {
                "source": "        if ("
              },
              {
                "source": "err",
                "miss": "false"
              },
              {
                "source": ") {"
              }
            ],
            "hits": 1,
            "miss": true
          },
          "103": {
            "source": "            return callback(err);",
            "hits": 0,
            "miss": true
          },
          "104": {
            "source": "        }",
            "miss": false
          },
          "105": {
            "source": "",
            "miss": false
          },
          "106": {
            "source": "        mockServer.start(function () {",
            "hits": 1,
            "miss": false
          },
          "107": {
            "source": "",
            "miss": false
          },
          "108": {
            "source": "            settings.url = 'http://127.0.0.1:' + mockServer.info.port;",
            "hits": 1,
            "miss": false
          },
          "109": {
            "source": "",
            "miss": false
          },
          "110": {
            "source": "            internals.startServer(settings, callback);",
            "hits": 1,
            "miss": false
          },
          "111": {
            "source": "        });",
            "miss": false
          },
          "112": {
            "source": "    });",
            "miss": false
          },
          "113": {
            "source": "};",
            "miss": false
          },
          "114": {
            "source": "",
            "miss": false
          },
          "115": {
            "source": "",
            "miss": false
          },
          "116": {
            "source": "internals.startServer = function startServer(settings, callback) {",
            "hits": 1,
            "miss": false
          },
          "117": {
            "source": "",
            "miss": false
          },
          "118": {
            "source": "    var server = new Hapi.Server(0, { labels: ['secure'] });",
            "hits": 33,
            "miss": false
          },
          "119": {
            "source": "    var url = settings.url;",
            "hits": 33,
            "miss": false
          },
          "120": {
            "source": "    var exposePangaea = settings.exposePangaea;",
            "hits": 33,
            "miss": false
          },
          "121": {
            "source": "",
            "miss": false
          },
          "122": {
            "source": "    var defaults = {",
            "hits": 33,
            "miss": false
          },
          "123": {
            "source": "        avs: {",
            "miss": false
          },
          "124": {
            "source": "            exposePangaea: exposePangaea,",
            "miss": false
          },
          "125": {
            "source": "            url: url,",
            "miss": false
          },
          "126": {
            "source": "            context: settings.useMock ? '/avs' : null",
            "miss": false
          },
          "127": {
            "source": "        },",
            "miss": false
          },
          "128": {
            "source": "        cart: {",
            "miss": false
          },
          "129": {
            "source": "            exposePangaea: exposePangaea,",
            "miss": false
          },
          "130": {
            "source": "            url: url,",
            "miss": false
          },
          "131": {
            "source": "            context: settings.useMock ? '/cartservice' : null",
            "miss": false
          },
          "132": {
            "source": "        },",
            "miss": false
          },
          "133": {
            "source": "        checkout: {",
            "miss": false
          },
          "134": {
            "source": "            exposePangaea: exposePangaea,",
            "miss": false
          },
          "135": {
            "source": "            url: url,",
            "miss": false
          },
          "136": {
            "source": "            context: settings.useMock ? '/checkoutservice' : null",
            "miss": false
          },
          "137": {
            "source": "        },",
            "miss": false
          },
          "138": {
            "source": "        groupings: {",
            "miss": false
          },
          "139": {
            "source": "            url: url",
            "miss": false
          },
          "140": {
            "source": "        },",
            "miss": false
          },
          "141": {
            "source": "        health: {",
            "miss": false
          },
          "142": {
            "source": "            exposePangaea: exposePangaea,",
            "miss": false
          },
          "143": {
            "source": "            // Not mocked yet",
            "miss": false
          },
          "144": {
            "source": "            // url: url",
            "miss": false
          },
          "145": {
            "source": "        },",
            "miss": false
          },
          "146": {
            "source": "        idml: {",
            "miss": false
          },
          "147": {
            "source": "            exposePangaea: exposePangaea,",
            "miss": false
          },
          "148": {
            "source": "            // Not mocked yet",
            "miss": false
          },
          "149": {
            "source": "            // url: url",
            "miss": false
          },
          "150": {
            "source": "        },",
            "miss": false
          },
          "151": {
            "source": "        item: {",
            "miss": false
          },
          "152": {
            "source": "            exposePangaea: exposePangaea,",
            "miss": false
          },
          "153": {
            "source": "            // Not mocked yet",
            "miss": false
          },
          "154": {
            "source": "            // url: url",
            "miss": false
          },
          "155": {
            "source": "        },",
            "miss": false
          },
          "156": {
            "source": "        lists: {",
            "miss": false
          },
          "157": {
            "source": "            exposePangaea: exposePangaea,",
            "miss": false
          },
          "158": {
            "source": "            url: url    // Only partially mocked",
            "miss": false
          },
          "159": {
            "source": "        },",
            "miss": false
          },
          "160": {
            "source": "        order: {",
            "miss": false
          },
          "161": {
            "source": "            exposePangaea: exposePangaea,",
            "miss": false
          },
          "162": {
            "source": "            // Not mocked yet",
            "miss": false
          },
          "163": {
            "source": "            // url: url",
            "miss": false
          },
          "164": {
            "source": "        },",
            "miss": false
          },
          "165": {
            "source": "        payment: {",
            "miss": false
          },
          "166": {
            "source": "            exposePangaea: exposePangaea,",
            "miss": false
          },
          "167": {
            "source": "            url: url",
            "miss": false
          },
          "168": {
            "source": "        },",
            "miss": false
          },
          "169": {
            "source": "        store: {",
            "miss": false
          },
          "170": {
            "source": "            exposePangaea: exposePangaea,",
            "miss": false
          },
          "171": {
            "source": "            // Not mocked yet",
            "miss": false
          },
          "172": {
            "source": "            // url: url",
            "miss": false
          },
          "173": {
            "source": "        },",
            "miss": false
          },
          "174": {
            "source": "        user: {",
            "miss": false
          },
          "175": {
            "source": "            exposePangaea: exposePangaea,",
            "miss": false
          },
          "176": {
            "source": "            ca: {",
            "miss": false
          },
          "177": {
            "source": "                url: url,",
            "miss": false
          },
          "178": {
            "source": "                context: settings.useMock ? '/ca-app/services' : null",
            "miss": false
          },
          "179": {
            "source": "            },",
            "miss": false
          },
          "180": {
            "source": "            auth: {",
            "miss": false
          },
          "181": {
            "source": "                // Not mocked yet",
            "miss": false
          },
          "182": {
            "source": "                // url: url",
            "miss": false
          },
          "183": {
            "source": "            }",
            "miss": false
          },
          "184": {
            "source": "        }",
            "miss": false
          },
          "185": {
            "source": "    };",
            "miss": false
          },
          "186": {
            "source": "",
            "miss": false
          },
          "187": {
            "source": "    var config = Hoek.applyToDefaults(defaults, settings);",
            "hits": 33,
            "miss": false
          },
          "188": {
            "source": "",
            "miss": false
          },
          "189": {
            "source": "    Async.series([",
            "hits": 33,
            "miss": false
          },
          "190": {
            "source": "        function (next) {",
            "miss": false
          },
          "191": {
            "source": "",
            "miss": false
          },
          "192": {
            "source": "            // Setup the credit card encryption environment",
            "miss": false
          },
          "193": {
            "source": "            var initEncryption = Encryption.init();",
            "hits": 33,
            "miss": false
          },
          "194": {
            "source": "",
            "miss": false
          },
          "195": {
            "source": "            initEncryption(next);",
            "hits": 33,
            "miss": false
          },
          "196": {
            "source": "        },",
            "miss": false
          },
          "197": {
            "source": "        function (next) {",
            "miss": false
          },
          "198": {
            "source": "",
            "miss": false
          },
          "199": {
            "source": "            server.pack.register({ plugin: internals.plugins.avs, options: config.avs }, next);",
            "hits": 33,
            "miss": false
          },
          "200": {
            "source": "        },",
            "miss": false
          },
          "201": {
            "source": "        function (next) {",
            "miss": false
          },
          "202": {
            "source": "",
            "miss": false
          },
          "203": {
            "source": "            server.pack.register({ plugin: internals.plugins.payment, options: config.payment }, next);",
            "hits": 33,
            "miss": false
          },
          "204": {
            "source": "        },",
            "miss": false
          },
          "205": {
            "source": "        function (next) {",
            "miss": false
          },
          "206": {
            "source": "",
            "miss": false
          },
          "207": {
            "source": "            server.pack.register({ plugin: internals.plugins.user, options: config.user }, next);",
            "hits": 33,
            "miss": false
          },
          "208": {
            "source": "        },",
            "miss": false
          },
          "209": {
            "source": "        function (next) {",
            "miss": false
          },
          "210": {
            "source": "",
            "miss": false
          },
          "211": {
            "source": "            server.pack.register({ plugin: internals.plugins.cart, options: config.cart }, next);",
            "hits": 33,
            "miss": false
          },
          "212": {
            "source": "        },",
            "miss": false
          },
          "213": {
            "source": "        function (next) {",
            "miss": false
          },
          "214": {
            "source": "",
            "miss": false
          },
          "215": {
            "source": "            server.pack.register({ plugin: internals.plugins.checkout, options: config.checkout }, next);",
            "hits": 33,
            "miss": false
          },
          "216": {
            "source": "        },",
            "miss": false
          },
          "217": {
            "source": "        function (next) {",
            "miss": false
          },
          "218": {
            "source": "",
            "miss": false
          },
          "219": {
            "source": "            server.pack.register({ plugin: internals.plugins.groupings, options: config.groupings }, next);",
            "hits": 33,
            "miss": false
          },
          "220": {
            "source": "        },",
            "miss": false
          },
          "221": {
            "source": "        function (next) {",
            "miss": false
          },
          "222": {
            "source": "",
            "miss": false
          },
          "223": {
            "source": "            server.pack.register({ plugin: internals.plugins.idml, options: config.idml }, next);",
            "hits": 33,
            "miss": false
          },
          "224": {
            "source": "        },",
            "miss": false
          },
          "225": {
            "source": "        function (next) {",
            "miss": false
          },
          "226": {
            "source": "",
            "miss": false
          },
          "227": {
            "source": "            server.pack.register({ plugin: internals.plugins.item, options: config.item }, next);",
            "hits": 33,
            "miss": false
          },
          "228": {
            "source": "        },",
            "miss": false
          },
          "229": {
            "source": "        function (next) {",
            "miss": false
          },
          "230": {
            "source": "",
            "miss": false
          },
          "231": {
            "source": "            server.pack.register({ plugin: internals.plugins.lists, options: config.lists }, next);",
            "hits": 33,
            "miss": false
          },
          "232": {
            "source": "        },",
            "miss": false
          },
          "233": {
            "source": "        function (next) {",
            "miss": false
          },
          "234": {
            "source": "",
            "miss": false
          },
          "235": {
            "source": "            server.pack.register({ plugin: internals.plugins.order, options: config.order }, next);",
            "hits": 33,
            "miss": false
          },
          "236": {
            "source": "        },",
            "miss": false
          },
          "237": {
            "source": "        function (next) {",
            "miss": false
          },
          "238": {
            "source": "",
            "miss": false
          },
          "239": {
            "source": "            server.pack.register({ plugin: internals.plugins.store, options: config.store }, next);",
            "hits": 33,
            "miss": false
          },
          "240": {
            "source": "        },",
            "miss": false
          },
          "241": {
            "source": "        function (next) {",
            "miss": false
          },
          "242": {
            "source": "",
            "miss": false
          },
          "243": {
            "source": "            server.pack.register({ plugin: internals.plugins.health, options: config.health }, next);",
            "hits": 33,
            "miss": false
          },
          "244": {
            "source": "        }",
            "miss": false
          },
          "245": {
            "source": "    ], function (err) {",
            "miss": false
          },
          "246": {
            "source": "",
            "miss": false
          },
          "247": {
            "source": "        if (settings.showRequests) {",
            "chunks": [
              {
                "source": "        if ("
              },
              {
                "source": "settings.showRequests",
                "miss": "false"
              },
              {
                "source": ") {"
              }
            ],
            "hits": 33,
            "miss": true
          },
          "248": {
            "source": "            internals.showRequests(server);",
            "hits": 0,
            "miss": true
          },
          "249": {
            "source": "        }",
            "miss": false
          },
          "250": {
            "source": "",
            "miss": false
          },
          "251": {
            "source": "        return callback(err, server);",
            "hits": 33,
            "miss": false
          },
          "252": {
            "source": "    });",
            "miss": false
          },
          "253": {
            "source": "};",
            "miss": false
          },
          "254": {
            "source": "",
            "miss": false
          },
          "255": {
            "source": "",
            "miss": false
          },
          "256": {
            "source": "internals.showRequests = function (server) {",
            "hits": 1,
            "miss": false
          },
          "257": {
            "source": "",
            "miss": false
          },
          "258": {
            "source": "    server.on('request', function (request, event, tags) {",
            "hits": 0,
            "miss": true
          },
          "259": {
            "source": "",
            "miss": false
          },
          "260": {
            "source": "        if (!tags.response) {",
            "hits": 0,
            "miss": true
          },
          "261": {
            "source": "            return;",
            "hits": 0,
            "miss": true
          },
          "262": {
            "source": "        }",
            "miss": false
          },
          "263": {
            "source": "",
            "miss": false
          },
          "264": {
            "source": "        var reqToRender = {",
            "hits": 0,
            "miss": true
          },
          "265": {
            "source": "            time: new Date(),",
            "miss": false
          },
          "266": {
            "source": "            requestId: request.id,",
            "miss": false
          },
          "267": {
            "source": "            headers: request.headers,",
            "miss": false
          },
          "268": {
            "source": "            method: request.method,",
            "miss": false
          },
          "269": {
            "source": "            path: request.path,",
            "miss": false
          },
          "270": {
            "source": "            query: request.query,",
            "miss": false
          },
          "271": {
            "source": "            payload: request.payload,",
            "miss": false
          },
          "272": {
            "source": "            tags: tags ? Object.keys(tags) : ''",
            "chunks": [
              {
                "source": "            tags: "
              },
              {
                "source": "tags",
                "miss": "never"
              },
              {
                "source": " ? "
              },
              {
                "source": "Object.keys(tags)",
                "miss": "never"
              },
              {
                "source": " : "
              },
              {
                "source": "''",
                "miss": "never"
              }
            ],
            "miss": true
          },
          "273": {
            "source": "        };",
            "miss": false
          },
          "274": {
            "source": "",
            "miss": false
          },
          "275": {
            "source": "        console.log('------ REQUEST RECEIVED -------');",
            "hits": 0,
            "miss": true
          },
          "276": {
            "source": "        Purdy(reqToRender);",
            "hits": 0,
            "miss": true
          },
          "277": {
            "source": "        console.log('-------------------------------');",
            "hits": 0,
            "miss": true
          },
          "278": {
            "source": "    });",
            "miss": false
          },
          "279": {
            "source": "};",
            "miss": false
          },
          "280": {
            "source": "",
            "miss": false
          },
          "281": {
            "source": "",
            "miss": false
          },
          "282": {
            "source": "internals.loadLocalPlugin = function () {",
            "hits": 1,
            "miss": false
          },
          "283": {
            "source": "",
            "miss": false
          },
          "284": {
            "source": "    var path = process.cwd();",
            "hits": 1,
            "miss": false
          },
          "285": {
            "source": "    var pkg = require(Path.join(path, Path.sep, 'package.json'));",
            "hits": 1,
            "miss": false
          },
          "286": {
            "source": "",
            "miss": false
          },
          "287": {
            "source": "    while (!pkg && path) {",
            "chunks": [
              {
                "source": "    while ("
              },
              {
                "source": "!pkg",
                "miss": "false"
              },
              {
                "source": " && "
              },
              {
                "source": "path",
                "miss": "never"
              },
              {
                "source": ") {"
              }
            ],
            "hits": 1,
            "miss": true
          },
          "288": {
            "source": "        // Go up a directory",
            "miss": false
          },
          "289": {
            "source": "        var pathParts = path.split(Path.sep);",
            "hits": 0,
            "miss": true
          },
          "290": {
            "source": "        pathParts.pop();",
            "hits": 0,
            "miss": true
          },
          "291": {
            "source": "        path = pathParts.join(Path.sep);",
            "hits": 0,
            "miss": true
          },
          "292": {
            "source": "        pkg = require(Path.join(path, Path.sep, 'package.json'));",
            "hits": 0,
            "miss": true
          },
          "293": {
            "source": "    }",
            "miss": false
          },
          "294": {
            "source": "",
            "miss": false
          },
          "295": {
            "source": "    if (!pkg || !pkg.name) {",
            "chunks": [
              {
                "source": "    if ("
              },
              {
                "source": "!pkg",
                "miss": "false"
              },
              {
                "source": " || !pkg.name) {"
              }
            ],
            "hits": 1,
            "miss": true
          },
          "296": {
            "source": "        console.warn('Could not determine the module being tested');",
            "hits": 0,
            "miss": true
          },
          "297": {
            "source": "        return;",
            "hits": 0,
            "miss": true
          },
          "298": {
            "source": "    }",
            "miss": false
          },
          "299": {
            "source": "",
            "miss": false
          },
          "300": {
            "source": "    var localPlugin = require(path);",
            "hits": 1,
            "miss": false
          },
          "301": {
            "source": "",
            "miss": false
          },
          "302": {
            "source": "    if (typeof localPlugin.register === 'function') {",
            "chunks": [
              {
                "source": "    if ("
              },
              {
                "source": "typeof localPlugin.register === 'function'",
                "miss": "false"
              },
              {
                "source": ") {"
              }
            ],
            "hits": 1,
            "miss": true
          },
          "303": {
            "source": "        internals.plugins[pkg.name] = localPlugin;",
            "hits": 0,
            "miss": true
          },
          "304": {
            "source": "    }",
            "miss": false
          },
          "305": {
            "source": "};",
            "miss": false
          },
          "306": {
            "source": "",
            "miss": false
          },
          "307": {
            "source": "",
            "miss": false
          },
          "308": {
            "source": "// Load the local Hapi plugin",
            "miss": false
          },
          "309": {
            "source": "internals.loadLocalPlugin();",
            "hits": 1,
            "miss": false
          },
          "310": {
            "source": "",
            "miss": false
          }
        }
      },
      {
        "filename": "lib/tools.js",
        "percent": 77.6978417266187,
        "hits": 108,
        "misses": 31,
        "sloc": 139,
        "source": {
          "1": {
            "source": "// Load modules",
            "miss": false
          },
          "2": {
            "source": "",
            "miss": false
          },
          "3": {
            "source": "var Boom = require('boom');",
            "hits": 1,
            "miss": false
          },
          "4": {
            "source": "var Hoek = require('hoek');",
            "hits": 1,
            "miss": false
          },
          "5": {
            "source": "var Stringify = require('json-stable-stringify');",
            "hits": 1,
            "miss": false
          },
          "6": {
            "source": "var Traverse = require('traverse');",
            "hits": 1,
            "miss": false
          },
          "7": {
            "source": "var Util = require('util');",
            "hits": 1,
            "miss": false
          },
          "8": {
            "source": "",
            "miss": false
          },
          "9": {
            "source": "",
            "miss": false
          },
          "10": {
            "source": "// Declare internals",
            "miss": false
          },
          "11": {
            "source": "",
            "miss": false
          },
          "12": {
            "source": "var internals = {};",
            "hits": 1,
            "miss": false
          },
          "13": {
            "source": "",
            "miss": false
          },
          "14": {
            "source": "",
            "miss": false
          },
          "15": {
            "source": "internals.storeList = [",
            "hits": 1,
            "miss": false
          },
          "16": {
            "source": "    {",
            "miss": false
          },
          "17": {
            "source": "        id: 2280,",
            "miss": false
          },
          "18": {
            "source": "        storeType: {",
            "miss": false
          },
          "19": {
            "source": "            id: 2,",
            "miss": false
          },
          "20": {
            "source": "            name: 'Walmart Supercenter',",
            "miss": false
          },
          "21": {
            "source": "            displayName: 'Walmart Supercenter'",
            "miss": false
          },
          "22": {
            "source": "        },",
            "miss": false
          },
          "23": {
            "source": "        address: {",
            "miss": false
          },
          "24": {
            "source": "            postalCode: '94040',",
            "miss": false
          },
          "25": {
            "source": "            address1: '600 Showers Dr',",
            "miss": false
          },
          "26": {
            "source": "            city: 'Mountain View',",
            "miss": false
          },
          "27": {
            "source": "            state: 'CA',",
            "miss": false
          },
          "28": {
            "source": "            country: 'USA'",
            "miss": false
          },
          "29": {
            "source": "        }",
            "miss": false
          },
          "30": {
            "source": "    },",
            "miss": false
          },
          "31": {
            "source": "    {",
            "miss": false
          },
          "32": {
            "source": "        id: 100,",
            "miss": false
          },
          "33": {
            "source": "        storeType: {",
            "miss": false
          },
          "34": {
            "source": "            id: 1,",
            "miss": false
          },
          "35": {
            "source": "            name: 'Walmart',",
            "miss": false
          },
          "36": {
            "source": "            displayName: 'Walmart'",
            "miss": false
          },
          "37": {
            "source": "        },",
            "miss": false
          },
          "38": {
            "source": "        address: {",
            "miss": false
          },
          "39": {
            "source": "            postalCode: '72601',",
            "miss": false
          },
          "40": {
            "source": "            address1: '161 N. Walmart Drive',",
            "miss": false
          },
          "41": {
            "source": "            city: 'Harrison',",
            "miss": false
          },
          "42": {
            "source": "            state: 'AR',",
            "miss": false
          },
          "43": {
            "source": "            country: 'USA'",
            "miss": false
          },
          "44": {
            "source": "        }",
            "miss": false
          },
          "45": {
            "source": "    },",
            "miss": false
          },
          "46": {
            "source": "    {",
            "miss": false
          },
          "47": {
            "source": "        id: 5610,",
            "miss": false
          },
          "48": {
            "source": "        storeType: {",
            "miss": false
          },
          "49": {
            "source": "            id: 1,",
            "miss": false
          },
          "50": {
            "source": "            name: 'Walmart',",
            "miss": false
          },
          "51": {
            "source": "            displayName: 'Walmart'",
            "miss": false
          },
          "52": {
            "source": "        },",
            "miss": false
          },
          "53": {
            "source": "        address: {",
            "miss": false
          },
          "54": {
            "source": "            postalCode: '94583',",
            "miss": false
          },
          "55": {
            "source": "            address1: '9100 Alcosta Blvd',",
            "miss": false
          },
          "56": {
            "source": "            city: 'San Ramon',",
            "miss": false
          },
          "57": {
            "source": "            state: 'CA',",
            "miss": false
          },
          "58": {
            "source": "            country: 'USA'",
            "miss": false
          },
          "59": {
            "source": "        }",
            "miss": false
          },
          "60": {
            "source": "    }",
            "miss": false
          },
          "61": {
            "source": "];",
            "miss": false
          },
          "62": {
            "source": "",
            "miss": false
          },
          "63": {
            "source": "",
            "miss": false
          },
          "64": {
            "source": "module.exports.checkStatus = function(res, expectedStatus) {",
            "hits": 1,
            "miss": false
          },
          "65": {
            "source": "",
            "miss": false
          },
          "66": {
            "source": "    if (res.statusCode !== expectedStatus) {",
            "hits": 15,
            "miss": false
          },
          "67": {
            "source": "        throw new Error('Expected status code ' + res.statusCode + ' to equal ' + expectedStatus +",
            "hits": 3,
            "miss": false
          },
          "68": {
            "source": "          '. ' + res.raw.req.url + ' returned ' + Util.inspect(res.result, { depth: 5 }));",
            "miss": false
          },
          "69": {
            "source": "    }",
            "miss": false
          },
          "70": {
            "source": "};",
            "miss": false
          },
          "71": {
            "source": "",
            "miss": false
          },
          "72": {
            "source": "",
            "miss": false
          },
          "73": {
            "source": "module.exports.checkForError = function (param, check) {",
            "hits": 1,
            "miss": false
          },
          "74": {
            "source": "",
            "miss": false
          },
          "75": {
            "source": "    if (!check) {",
            "chunks": [
              {
                "source": "    if ("
              },
              {
                "source": "!check",
                "miss": "true"
              },
              {
                "source": ") {"
              }
            ],
            "hits": 7,
            "miss": true
          },
          "76": {
            "source": "        check = /2\\d\\d/;",
            "hits": 7,
            "miss": false
          },
          "77": {
            "source": "    }",
            "miss": false
          },
          "78": {
            "source": "",
            "miss": false
          },
          "79": {
            "source": "    var res;",
            "hits": 7,
            "miss": false
          },
          "80": {
            "source": "    if (param.statusCode) {",
            "chunks": [
              {
                "source": "    if ("
              },
              {
                "source": "param.statusCode",
                "miss": "true"
              },
              {
                "source": ") {"
              }
            ],
            "hits": 7,
            "miss": true
          },
          "81": {
            "source": "        res = param;",
            "hits": 7,
            "miss": false
          },
          "82": {
            "source": "        param = res.statusCode;",
            "hits": 7,
            "miss": false
          },
          "83": {
            "source": "    }",
            "miss": false
          },
          "84": {
            "source": "",
            "miss": false
          },
          "85": {
            "source": "    var err;",
            "hits": 7,
            "miss": false
          },
          "86": {
            "source": "    var isStatusCode = /\\d{3}/;",
            "hits": 7,
            "miss": false
          },
          "87": {
            "source": "",
            "miss": false
          },
          "88": {
            "source": "    // Compare two objects",
            "miss": false
          },
          "89": {
            "source": "    if (typeof param === 'object' && param.constructor !== String) {",
            "chunks": [
              {
                "source": "    if ("
              },
              {
                "source": "typeof param === 'object'",
                "miss": "false"
              },
              {
                "source": " && "
              },
              {
                "source": "param.constructor !== String",
                "miss": "never"
              },
              {
                "source": ") {"
              }
            ],
            "hits": 7,
            "miss": true
          },
          "90": {
            "source": "        if (!internals.fuzzyEqual(param, check)) {",
            "hits": 0,
            "miss": true
          },
          "91": {
            "source": "            return Boom.wrap(new Error('Expected\\n\\n' + Util.inspect(param) + '\\n\\nto equal\\n\\n' + Util.inspect(check)));",
            "hits": 0,
            "miss": true
          },
          "92": {
            "source": "        }",
            "miss": false
          },
          "93": {
            "source": "",
            "miss": false
          },
          "94": {
            "source": "        return null;",
            "hits": 0,
            "miss": true
          },
          "95": {
            "source": "    }",
            "miss": false
          },
          "96": {
            "source": "",
            "miss": false
          },
          "97": {
            "source": "    // Compare param against regex",
            "miss": false
          },
          "98": {
            "source": "    if (typeof check === 'object') {",
            "chunks": [
              {
                "source": "    if ("
              },
              {
                "source": "typeof check === 'object'",
                "miss": "true"
              },
              {
                "source": ") {"
              }
            ],
            "hits": 7,
            "miss": true
          },
          "99": {
            "source": "        if (check.constructor === RegExp) {",
            "chunks": [
              {
                "source": "        if ("
              },
              {
                "source": "check.constructor === RegExp",
                "miss": "true"
              },
              {
                "source": ") {"
              }
            ],
            "hits": 7,
            "miss": true
          },
          "100": {
            "source": "            if (!check.test(param)) {",
            "hits": 7,
            "miss": false
          },
          "101": {
            "source": "                err = Boom.wrap(new Error('Expected ' + param + ' to match ' + check.toString()));",
            "hits": 5,
            "miss": false
          },
          "102": {
            "source": "",
            "miss": false
          },
          "103": {
            "source": "                if (isStatusCode.test(param)) {",
            "chunks": [
              {
                "source": "                if ("
              },
              {
                "source": "isStatusCode.test(param)",
                "miss": "true"
              },
              {
                "source": ") {"
              }
            ],
            "hits": 5,
            "miss": true
          },
          "104": {
            "source": "                    if (res && res.result) {",
            "chunks": [
              {
                "source": "                    if ("
              },
              {
                "source": "res",
                "miss": "true"
              },
              {
                "source": " && res.result) {"
              }
            ],
            "hits": 5,
            "miss": true
          },
          "105": {
            "source": "                        err = Boom.wrap(new Error('Expected ' + param + ' to match ' + check.toString() + '\\n\\n\\t' + JSON.stringify(res.result)));",
            "hits": 5,
            "miss": false
          },
          "106": {
            "source": "                    }",
            "miss": false
          },
          "107": {
            "source": "                    err.output.statusCode = param;",
            "hits": 5,
            "miss": false
          },
          "108": {
            "source": "                    err.reformat();",
            "hits": 5,
            "miss": false
          },
          "109": {
            "source": "                }",
            "miss": false
          },
          "110": {
            "source": "",
            "miss": false
          },
          "111": {
            "source": "                return err;",
            "hits": 5,
            "miss": false
          },
          "112": {
            "source": "            }",
            "miss": false
          },
          "113": {
            "source": "",
            "miss": false
          },
          "114": {
            "source": "            return null;",
            "hits": 2,
            "miss": false
          },
          "115": {
            "source": "        }",
            "miss": false
          },
          "116": {
            "source": "    }",
            "miss": false
          },
          "117": {
            "source": "",
            "miss": false
          },
          "118": {
            "source": "    //direct compare of values",
            "miss": false
          },
          "119": {
            "source": "    if (param !== check) {",
            "hits": 0,
            "miss": true
          },
          "120": {
            "source": "        err = Boom.wrap(new Error('Expected ' + param + ' to equal ' + check));",
            "hits": 0,
            "miss": true
          },
          "121": {
            "source": "",
            "miss": false
          },
          "122": {
            "source": "        if (isStatusCode.test(param)) {",
            "hits": 0,
            "miss": true
          },
          "123": {
            "source": "            if (res && res.result) {",
            "hits": 0,
            "miss": true
          },
          "124": {
            "source": "                err = Boom.wrap(new Error('Expected ' + param + ' to match ' + check + '\\n\\n\\t' + JSON.stringify(res.result)));",
            "hits": 0,
            "miss": true
          },
          "125": {
            "source": "            }",
            "miss": false
          },
          "126": {
            "source": "            err.output.statusCode = param;",
            "hits": 0,
            "miss": true
          },
          "127": {
            "source": "            err.reformat();",
            "hits": 0,
            "miss": true
          },
          "128": {
            "source": "        }",
            "miss": false
          },
          "129": {
            "source": "",
            "miss": false
          },
          "130": {
            "source": "        return err;",
            "hits": 0,
            "miss": true
          },
          "131": {
            "source": "    }",
            "miss": false
          },
          "132": {
            "source": "",
            "miss": false
          },
          "133": {
            "source": "    return null;",
            "hits": 0,
            "miss": true
          },
          "134": {
            "source": "};",
            "miss": false
          },
          "135": {
            "source": "",
            "miss": false
          },
          "136": {
            "source": "",
            "miss": false
          },
          "137": {
            "source": "module.exports.fuzzyEqual = function (obj1, obj2) {",
            "hits": 1,
            "miss": false
          },
          "138": {
            "source": "",
            "miss": false
          },
          "139": {
            "source": "    // Throw with the details of each object when not fuzzy equal",
            "miss": false
          },
          "140": {
            "source": "    if (!internals.fuzzyEqual(obj1, obj2)) {",
            "hits": 0,
            "miss": true
          },
          "141": {
            "source": "        Hoek.assert(obj1 === obj2, 'objects expected to be equal');",
            "hits": 0,
            "miss": true
          },
          "142": {
            "source": "    }",
            "miss": false
          },
          "143": {
            "source": "};",
            "miss": false
          },
          "144": {
            "source": "",
            "miss": false
          },
          "145": {
            "source": "",
            "miss": false
          },
          "146": {
            "source": "module.exports.getStoreList = function () {",
            "hits": 1,
            "miss": false
          },
          "147": {
            "source": "",
            "miss": false
          },
          "148": {
            "source": "    return Hoek.clone(internals.storeList);",
            "hits": 0,
            "miss": true
          },
          "149": {
            "source": "};",
            "miss": false
          },
          "150": {
            "source": "",
            "miss": false
          },
          "151": {
            "source": "",
            "miss": false
          },
          "152": {
            "source": "module.exports.deleteCorrelationIds = function (groups) {",
            "hits": 1,
            "miss": false
          },
          "153": {
            "source": "",
            "miss": false
          },
          "154": {
            "source": "    for (var i = 0, il = groups.length; i < il; ++i) {",
            "hits": 0,
            "miss": true
          },
          "155": {
            "source": "        delete groups[i].correlationId;",
            "hits": 0,
            "miss": true
          },
          "156": {
            "source": "    }",
            "miss": false
          },
          "157": {
            "source": "};",
            "miss": false
          },
          "158": {
            "source": "",
            "miss": false
          },
          "159": {
            "source": "",
            "miss": false
          },
          "160": {
            "source": "module.exports.deleteShippingCorrelationIds = function (payloads) {",
            "hits": 1,
            "miss": false
          },
          "161": {
            "source": "",
            "miss": false
          },
          "162": {
            "source": "    for (var i = 0, il = payloads.length; i < il; ++i) {",
            "hits": 0,
            "miss": true
          },
          "163": {
            "source": "        module.exports.deleteCorrelationIds(payloads[i].listShippingOptionsRequest);",
            "hits": 0,
            "miss": true
          },
          "164": {
            "source": "    }",
            "miss": false
          },
          "165": {
            "source": "};",
            "miss": false
          },
          "166": {
            "source": "",
            "miss": false
          },
          "167": {
            "source": "",
            "miss": false
          },
          "168": {
            "source": "internals.removeUndefined = function (x) {",
            "hits": 1,
            "miss": false
          },
          "169": {
            "source": "",
            "miss": false
          },
          "170": {
            "source": "    if (x === undefined) {",
            "hits": 0,
            "miss": true
          },
          "171": {
            "source": "        this.remove();",
            "hits": 0,
            "miss": true
          },
          "172": {
            "source": "    }",
            "miss": false
          },
          "173": {
            "source": "};",
            "miss": false
          },
          "174": {
            "source": "",
            "miss": false
          },
          "175": {
            "source": "",
            "miss": false
          },
          "176": {
            "source": "internals.fuzzyEqual = function (obj1, obj2) {",
            "hits": 1,
            "miss": false
          },
          "177": {
            "source": "",
            "miss": false
          },
          "178": {
            "source": "    var obj1Str = Stringify(Traverse(obj1).map(internals.removeUndefined));",
            "hits": 0,
            "miss": true
          },
          "179": {
            "source": "    var obj2Str = Stringify(Traverse(obj2).map(internals.removeUndefined));",
            "hits": 0,
            "miss": true
          },
          "180": {
            "source": "",
            "miss": false
          },
          "181": {
            "source": "    return obj1Str === obj2Str;",
            "hits": 0,
            "miss": true
          },
          "182": {
            "source": "};",
            "miss": false
          },
          "183": {
            "source": "",
            "miss": false
          }
        }
      },
      {
        "filename": "lib/auth/authScheme.js",
        "percent": 92.5,
        "hits": 37,
        "misses": 3,
        "sloc": 40,
        "source": {
          "1": {
            "source": "// Load modules",
            "miss": false
          },
          "2": {
            "source": "",
            "miss": false
          },
          "3": {
            "source": "var Hoek = require('hoek');",
            "hits": 1,
            "miss": false
          },
          "4": {
            "source": "",
            "miss": false
          },
          "5": {
            "source": "",
            "miss": false
          },
          "6": {
            "source": "// Declare internals",
            "miss": false
          },
          "7": {
            "source": "",
            "miss": false
          },
          "8": {
            "source": "var internals = {",
            "hits": 1,
            "miss": false
          },
          "9": {
            "source": "    schemeName: 'WALMART.COM'",
            "miss": false
          },
          "10": {
            "source": "};",
            "miss": false
          },
          "11": {
            "source": "",
            "miss": false
          },
          "12": {
            "source": "",
            "miss": false
          },
          "13": {
            "source": "module.exports.configureTestRoute = function (options) {",
            "hits": 1,
            "miss": false
          },
          "14": {
            "source": "",
            "miss": false
          },
          "15": {
            "source": "    return function (server, data, next) {",
            "hits": 1,
            "miss": false
          },
          "16": {
            "source": "",
            "miss": false
          },
          "17": {
            "source": "        var defaults = {",
            "hits": 1,
            "miss": false
          },
          "18": {
            "source": "            method: 'GET',",
            "miss": false
          },
          "19": {
            "source": "            path: '/test',",
            "miss": false
          },
          "20": {
            "source": "            config: {",
            "miss": false
          },
          "21": {
            "source": "                auth: 'WALMART.COM'",
            "miss": false
          },
          "22": {
            "source": "            },",
            "miss": false
          },
          "23": {
            "source": "            handler: function (request, reply) {",
            "miss": false
          },
          "24": {
            "source": "",
            "miss": false
          },
          "25": {
            "source": "                reply('success');",
            "hits": 1,
            "miss": false
          },
          "26": {
            "source": "            }",
            "miss": false
          },
          "27": {
            "source": "        };",
            "miss": false
          },
          "28": {
            "source": "",
            "miss": false
          },
          "29": {
            "source": "        options = Hoek.merge(defaults, options || {}, true, false);",
            "chunks": [
              {
                "source": "        options = Hoek.merge(defaults, "
              },
              {
                "source": "options",
                "miss": "false"
              },
              {
                "source": " || {}, true, false);"
              }
            ],
            "hits": 1,
            "miss": true
          },
          "30": {
            "source": "        server.auth.strategy(internals.schemeName, internals.schemeName);",
            "hits": 1,
            "miss": false
          },
          "31": {
            "source": "        server.route(options);",
            "hits": 1,
            "miss": false
          },
          "32": {
            "source": "        return next(null, server, data);",
            "hits": 1,
            "miss": false
          },
          "33": {
            "source": "    };",
            "miss": false
          },
          "34": {
            "source": "};",
            "miss": false
          },
          "35": {
            "source": "",
            "miss": false
          },
          "36": {
            "source": "",
            "miss": false
          },
          "37": {
            "source": "module.exports.hitTestRoute = function (options) {",
            "hits": 1,
            "miss": false
          },
          "38": {
            "source": "",
            "miss": false
          },
          "39": {
            "source": "    return function (server, data, next) {",
            "hits": 1,
            "miss": false
          },
          "40": {
            "source": "",
            "miss": false
          },
          "41": {
            "source": "        var defaults = {",
            "hits": 1,
            "miss": false
          },
          "42": {
            "source": "            method: 'GET',",
            "miss": false
          },
          "43": {
            "source": "            url: '/test',",
            "miss": false
          },
          "44": {
            "source": "            headers: {",
            "miss": false
          },
          "45": {
            "source": "                Authorization: 'Token ' + (Hoek.reach(data, 'auth.authenticate.res.result.token') || '')",
            "chunks": [
              {
                "source": "                Authorization: 'Token ' + ("
              },
              {
                "source": "Hoek.reach(data, 'auth.authenticate.res.result.token')",
                "miss": "true"
              },
              {
                "source": " || "
              },
              {
                "source": "''",
                "miss": "never"
              },
              {
                "source": ")"
              }
            ],
            "miss": true
          },
          "46": {
            "source": "            }",
            "miss": false
          },
          "47": {
            "source": "        };",
            "miss": false
          },
          "48": {
            "source": "",
            "miss": false
          },
          "49": {
            "source": "        options = Hoek.merge(defaults, options || {}, true, false);",
            "chunks": [
              {
                "source": "        options = Hoek.merge(defaults, "
              },
              {
                "source": "options",
                "miss": "false"
              },
              {
                "source": " || {}, true, false);"
              }
            ],
            "hits": 1,
            "miss": true
          },
          "50": {
            "source": "        server.inject(options, function (res) {",
            "hits": 1,
            "miss": false
          },
          "51": {
            "source": "",
            "miss": false
          },
          "52": {
            "source": "            data.auth.scheme.hitTestRoute = { req: options, res: res };",
            "hits": 1,
            "miss": false
          },
          "53": {
            "source": "            return next(null, server, data);",
            "hits": 1,
            "miss": false
          },
          "54": {
            "source": "        });",
            "miss": false
          },
          "55": {
            "source": "    };",
            "miss": false
          },
          "56": {
            "source": "};",
            "miss": false
          },
          "57": {
            "source": "",
            "miss": false
          }
        }
      },
      {
        "filename": "lib/auth/index.js",
        "percent": 94.28571428571428,
        "hits": 99,
        "misses": 6,
        "sloc": 105,
        "source": {
          "1": {
            "source": "// Load modules",
            "miss": false
          },
          "2": {
            "source": "",
            "miss": false
          },
          "3": {
            "source": "var Hoek = require('hoek');",
            "hits": 1,
            "miss": false
          },
          "4": {
            "source": "var Uuid = require('node-uuid');",
            "hits": 1,
            "miss": false
          },
          "5": {
            "source": "",
            "miss": false
          },
          "6": {
            "source": "",
            "miss": false
          },
          "7": {
            "source": "// Declare internals",
            "miss": false
          },
          "8": {
            "source": "",
            "miss": false
          },
          "9": {
            "source": "var internals = {",
            "hits": 1,
            "miss": false
          },
          "10": {
            "source": "    realmId: 'WALMART.COM'",
            "miss": false
          },
          "11": {
            "source": "};",
            "miss": false
          },
          "12": {
            "source": "",
            "miss": false
          },
          "13": {
            "source": "",
            "miss": false
          },
          "14": {
            "source": "module.exports.scheme = require('./authScheme');",
            "hits": 1,
            "miss": false
          },
          "15": {
            "source": "module.exports.password = require('./password');",
            "hits": 1,
            "miss": false
          },
          "16": {
            "source": "module.exports.securityQuestion = require('./securityQuestion');",
            "hits": 1,
            "miss": false
          },
          "17": {
            "source": "",
            "miss": false
          },
          "18": {
            "source": "",
            "miss": false
          },
          "19": {
            "source": "module.exports.createNewUser = function (options) {",
            "hits": 1,
            "miss": false
          },
          "20": {
            "source": "",
            "miss": false
          },
          "21": {
            "source": "    return function (server, data, next) {",
            "hits": 6,
            "miss": false
          },
          "22": {
            "source": "",
            "miss": false
          },
          "23": {
            "source": "        var defaults = {",
            "hits": 6,
            "miss": false
          },
          "24": {
            "source": "            method: 'POST',",
            "miss": false
          },
          "25": {
            "source": "            url: '/auth/user',",
            "miss": false
          },
          "26": {
            "source": "            payload: {",
            "miss": false
          },
          "27": {
            "source": "                login: exports.generateLogin(),",
            "miss": false
          },
          "28": {
            "source": "                password: exports.generatePassword()",
            "miss": false
          },
          "29": {
            "source": "            }",
            "miss": false
          },
          "30": {
            "source": "        };",
            "miss": false
          },
          "31": {
            "source": "",
            "miss": false
          },
          "32": {
            "source": "        options = Hoek.merge(defaults, options || {}, true);",
            "chunks": [
              {
                "source": "        options = Hoek.merge(defaults, "
              },
              {
                "source": "options",
                "miss": "true"
              },
              {
                "source": " || "
              },
              {
                "source": "{}",
                "miss": "never"
              },
              {
                "source": ", true);"
              }
            ],
            "hits": 6,
            "miss": true
          },
          "33": {
            "source": "        server.inject(options, function (res) {",
            "hits": 6,
            "miss": false
          },
          "34": {
            "source": "",
            "miss": false
          },
          "35": {
            "source": "            data.auth.createNewUser = { req: options, res: res };",
            "hits": 6,
            "miss": false
          },
          "36": {
            "source": "            return next(null, server, data);",
            "hits": 6,
            "miss": false
          },
          "37": {
            "source": "        });",
            "miss": false
          },
          "38": {
            "source": "    };",
            "miss": false
          },
          "39": {
            "source": "};",
            "miss": false
          },
          "40": {
            "source": "",
            "miss": false
          },
          "41": {
            "source": "",
            "miss": false
          },
          "42": {
            "source": "module.exports.authenticate = function (options) {",
            "hits": 1,
            "miss": false
          },
          "43": {
            "source": "",
            "miss": false
          },
          "44": {
            "source": "    return function (server, data, next) {",
            "hits": 4,
            "miss": false
          },
          "45": {
            "source": "",
            "miss": false
          },
          "46": {
            "source": "        var defaults = {",
            "hits": 4,
            "miss": false
          },
          "47": {
            "source": "            method: 'POST',",
            "miss": false
          },
          "48": {
            "source": "            url: '/auth',",
            "miss": false
          },
          "49": {
            "source": "            payload: {",
            "miss": false
          },
          "50": {
            "source": "                login: exports.generateLogin(),",
            "miss": false
          },
          "51": {
            "source": "                password: exports.generatePassword()",
            "miss": false
          },
          "52": {
            "source": "            }",
            "miss": false
          },
          "53": {
            "source": "        };",
            "miss": false
          },
          "54": {
            "source": "",
            "miss": false
          },
          "55": {
            "source": "        options = Hoek.merge(defaults, options || {}, true);",
            "chunks": [
              {
                "source": "        options = Hoek.merge(defaults, "
              },
              {
                "source": "options",
                "miss": "true"
              },
              {
                "source": " || "
              },
              {
                "source": "{}",
                "miss": "never"
              },
              {
                "source": ", true);"
              }
            ],
            "hits": 4,
            "miss": true
          },
          "56": {
            "source": "        server.inject(options, function (res) {",
            "hits": 4,
            "miss": false
          },
          "57": {
            "source": "",
            "miss": false
          },
          "58": {
            "source": "            data.auth.authenticate = { req: options, res: res };",
            "hits": 4,
            "miss": false
          },
          "59": {
            "source": "            return next(null, server, data);",
            "hits": 4,
            "miss": false
          },
          "60": {
            "source": "        });",
            "miss": false
          },
          "61": {
            "source": "    };",
            "miss": false
          },
          "62": {
            "source": "};",
            "miss": false
          },
          "63": {
            "source": "",
            "miss": false
          },
          "64": {
            "source": "",
            "miss": false
          },
          "65": {
            "source": "module.exports.validate = function (options) {",
            "hits": 1,
            "miss": false
          },
          "66": {
            "source": "",
            "miss": false
          },
          "67": {
            "source": "    return function (server, data, next) {",
            "hits": 1,
            "miss": false
          },
          "68": {
            "source": "",
            "miss": false
          },
          "69": {
            "source": "        var defaults = {",
            "hits": 1,
            "miss": false
          },
          "70": {
            "source": "            method: 'POST',",
            "miss": false
          },
          "71": {
            "source": "            url: '/auth/token',",
            "miss": false
          },
          "72": {
            "source": "            payload: {",
            "miss": false
          },
          "73": {
            "source": "                token: Hoek.reach(data, 'auth.authenticate.res.result.token') || ''",
            "chunks": [
              {
                "source": "                token: "
              },
              {
                "source": "Hoek.reach(data, 'auth.authenticate.res.result.token')",
                "miss": "true"
              },
              {
                "source": " || "
              },
              {
                "source": "''",
                "miss": "never"
              }
            ],
            "miss": true
          },
          "74": {
            "source": "            }",
            "miss": false
          },
          "75": {
            "source": "        };",
            "miss": false
          },
          "76": {
            "source": "",
            "miss": false
          },
          "77": {
            "source": "        options = Hoek.merge(defaults, options || {}, true);",
            "chunks": [
              {
                "source": "        options = Hoek.merge(defaults, "
              },
              {
                "source": "options",
                "miss": "false"
              },
              {
                "source": " || {}, true);"
              }
            ],
            "hits": 1,
            "miss": true
          },
          "78": {
            "source": "        server.inject(options, function (res) {",
            "hits": 1,
            "miss": false
          },
          "79": {
            "source": "",
            "miss": false
          },
          "80": {
            "source": "            data.auth.validate = { req: options, res: res };",
            "hits": 1,
            "miss": false
          },
          "81": {
            "source": "            return next(null, server, data);",
            "hits": 1,
            "miss": false
          },
          "82": {
            "source": "        });",
            "miss": false
          },
          "83": {
            "source": "    };",
            "miss": false
          },
          "84": {
            "source": "};",
            "miss": false
          },
          "85": {
            "source": "",
            "miss": false
          },
          "86": {
            "source": "",
            "miss": false
          },
          "87": {
            "source": "module.exports.createUser = function (options) {",
            "hits": 1,
            "miss": false
          },
          "88": {
            "source": "",
            "miss": false
          },
          "89": {
            "source": "    return function (server, data, next) {",
            "hits": 1,
            "miss": false
          },
          "90": {
            "source": "",
            "miss": false
          },
          "91": {
            "source": "        var login = exports.generateLogin();",
            "hits": 1,
            "miss": false
          },
          "92": {
            "source": "",
            "miss": false
          },
          "93": {
            "source": "        var defaults = {",
            "hits": 1,
            "miss": false
          },
          "94": {
            "source": "            payload: {",
            "miss": false
          },
          "95": {
            "source": "                email: login,",
            "miss": false
          },
          "96": {
            "source": "                enabled: true,",
            "miss": false
          },
          "97": {
            "source": "                id: null,",
            "miss": false
          },
          "98": {
            "source": "                locked: false,",
            "miss": false
          },
          "99": {
            "source": "                loginUID: login,",
            "miss": false
          },
          "100": {
            "source": "                password: exports.generatePassword(),",
            "miss": false
          },
          "101": {
            "source": "                principalAuthnToken: null,",
            "miss": false
          },
          "102": {
            "source": "                realmId: internals.realmId",
            "miss": false
          },
          "103": {
            "source": "            }",
            "miss": false
          },
          "104": {
            "source": "        };",
            "miss": false
          },
          "105": {
            "source": "",
            "miss": false
          },
          "106": {
            "source": "        options = Hoek.merge(defaults, options || {}, true);",
            "chunks": [
              {
                "source": "        options = Hoek.merge(defaults, "
              },
              {
                "source": "options",
                "miss": "true"
              },
              {
                "source": " || "
              },
              {
                "source": "{}",
                "miss": "never"
              },
              {
                "source": ", true);"
              }
            ],
            "hits": 1,
            "miss": true
          },
          "107": {
            "source": "        server.plugins.user.createUser(options, function (err, res) {",
            "hits": 1,
            "miss": false
          },
          "108": {
            "source": "",
            "miss": false
          },
          "109": {
            "source": "            data.auth.createUser = { req: options, res: res };",
            "hits": 1,
            "miss": false
          },
          "110": {
            "source": "            return next(err, server, data);",
            "hits": 1,
            "miss": false
          },
          "111": {
            "source": "        });",
            "miss": false
          },
          "112": {
            "source": "    };",
            "miss": false
          },
          "113": {
            "source": "};",
            "miss": false
          },
          "114": {
            "source": "",
            "miss": false
          },
          "115": {
            "source": "",
            "miss": false
          },
          "116": {
            "source": "module.exports.performAuthentication = function (options) {",
            "hits": 1,
            "miss": false
          },
          "117": {
            "source": "",
            "miss": false
          },
          "118": {
            "source": "    return function (server, data, next) {",
            "hits": 1,
            "miss": false
          },
          "119": {
            "source": "",
            "miss": false
          },
          "120": {
            "source": "        var defaults = {",
            "hits": 1,
            "miss": false
          },
          "121": {
            "source": "            payload: {",
            "miss": false
          },
          "122": {
            "source": "                userId: exports.generateLogin(),",
            "miss": false
          },
          "123": {
            "source": "                password: exports.generatePassword(),",
            "miss": false
          },
          "124": {
            "source": "                realmId: internals.realmId,",
            "miss": false
          },
          "125": {
            "source": "                tenantId: internals.realmId",
            "miss": false
          },
          "126": {
            "source": "            }",
            "miss": false
          },
          "127": {
            "source": "        };",
            "miss": false
          },
          "128": {
            "source": "",
            "miss": false
          },
          "129": {
            "source": "        options = Hoek.merge(defaults, options || {}, true);",
            "chunks": [
              {
                "source": "        options = Hoek.merge(defaults, "
              },
              {
                "source": "options",
                "miss": "true"
              },
              {
                "source": " || "
              },
              {
                "source": "{}",
                "miss": "never"
              },
              {
                "source": ", true);"
              }
            ],
            "hits": 1,
            "miss": true
          },
          "130": {
            "source": "        server.plugins.user.authenticate(options, function (err, res) {",
            "hits": 1,
            "miss": false
          },
          "131": {
            "source": "",
            "miss": false
          },
          "132": {
            "source": "            data.auth.performAuthentication = { req: options, res: res };",
            "hits": 1,
            "miss": false
          },
          "133": {
            "source": "            return next(err, server, data);",
            "hits": 1,
            "miss": false
          },
          "134": {
            "source": "        });",
            "miss": false
          },
          "135": {
            "source": "    };",
            "miss": false
          },
          "136": {
            "source": "};",
            "miss": false
          },
          "137": {
            "source": "",
            "miss": false
          },
          "138": {
            "source": "",
            "miss": false
          },
          "139": {
            "source": "module.exports.generateLogin = function () {",
            "hits": 1,
            "miss": false
          },
          "140": {
            "source": "",
            "miss": false
          },
          "141": {
            "source": "    return Uuid.v4() + '@walmart.com';",
            "hits": 34,
            "miss": false
          },
          "142": {
            "source": "};",
            "miss": false
          },
          "143": {
            "source": "",
            "miss": false
          },
          "144": {
            "source": "",
            "miss": false
          },
          "145": {
            "source": "module.exports.generatePassword = function () {",
            "hits": 1,
            "miss": false
          },
          "146": {
            "source": "",
            "miss": false
          },
          "147": {
            "source": "    return Uuid.v4();",
            "hits": 23,
            "miss": false
          },
          "148": {
            "source": "};",
            "miss": false
          },
          "149": {
            "source": "",
            "miss": false
          }
        }
      },
      {
        "filename": "lib/auth/password.js",
        "percent": 92.5925925925926,
        "hits": 50,
        "misses": 4,
        "sloc": 54,
        "source": {
          "1": {
            "source": "// Load modules",
            "miss": false
          },
          "2": {
            "source": "",
            "miss": false
          },
          "3": {
            "source": "var Hoek = require('hoek');",
            "hits": 1,
            "miss": false
          },
          "4": {
            "source": "var Auth = require('./');",
            "hits": 1,
            "miss": false
          },
          "5": {
            "source": "",
            "miss": false
          },
          "6": {
            "source": "",
            "miss": false
          },
          "7": {
            "source": "module.exports.update = function (options) {",
            "hits": 1,
            "miss": false
          },
          "8": {
            "source": "",
            "miss": false
          },
          "9": {
            "source": "    return function (server, data, next) {",
            "hits": 1,
            "miss": false
          },
          "10": {
            "source": "",
            "miss": false
          },
          "11": {
            "source": "        var defaults = {",
            "hits": 1,
            "miss": false
          },
          "12": {
            "source": "            method: 'PUT',",
            "miss": false
          },
          "13": {
            "source": "            url: '/auth/password',",
            "miss": false
          },
          "14": {
            "source": "            payload: {",
            "miss": false
          },
          "15": {
            "source": "                login: Auth.generateLogin(),",
            "miss": false
          },
          "16": {
            "source": "                oldPassword: Auth.generatePassword(),",
            "miss": false
          },
          "17": {
            "source": "                newPassword: Auth.generatePassword()",
            "miss": false
          },
          "18": {
            "source": "            }",
            "miss": false
          },
          "19": {
            "source": "        };",
            "miss": false
          },
          "20": {
            "source": "",
            "miss": false
          },
          "21": {
            "source": "        options = Hoek.merge(defaults, options || {}, true);",
            "chunks": [
              {
                "source": "        options = Hoek.merge(defaults, "
              },
              {
                "source": "options",
                "miss": "true"
              },
              {
                "source": " || "
              },
              {
                "source": "{}",
                "miss": "never"
              },
              {
                "source": ", true);"
              }
            ],
            "hits": 1,
            "miss": true
          },
          "22": {
            "source": "        server.inject(options, function (res) {",
            "hits": 1,
            "miss": false
          },
          "23": {
            "source": "",
            "miss": false
          },
          "24": {
            "source": "            data.auth.password.update = { req: options, res: res };",
            "hits": 1,
            "miss": false
          },
          "25": {
            "source": "            return next(null, server, data);",
            "hits": 1,
            "miss": false
          },
          "26": {
            "source": "        });",
            "miss": false
          },
          "27": {
            "source": "    };",
            "miss": false
          },
          "28": {
            "source": "};",
            "miss": false
          },
          "29": {
            "source": "",
            "miss": false
          },
          "30": {
            "source": "",
            "miss": false
          },
          "31": {
            "source": "module.exports.token = function (options) {",
            "hits": 1,
            "miss": false
          },
          "32": {
            "source": "",
            "miss": false
          },
          "33": {
            "source": "    return function (server, data, next) {",
            "hits": 2,
            "miss": false
          },
          "34": {
            "source": "",
            "miss": false
          },
          "35": {
            "source": "        var defaults = {",
            "hits": 2,
            "miss": false
          },
          "36": {
            "source": "            method: 'POST',",
            "miss": false
          },
          "37": {
            "source": "            url: '/auth/password/reset',",
            "miss": false
          },
          "38": {
            "source": "            payload: {",
            "miss": false
          },
          "39": {
            "source": "                login: Auth.generateLogin()",
            "miss": false
          },
          "40": {
            "source": "            }",
            "miss": false
          },
          "41": {
            "source": "        };",
            "miss": false
          },
          "42": {
            "source": "",
            "miss": false
          },
          "43": {
            "source": "        options = Hoek.merge(defaults, options || {}, true);",
            "chunks": [
              {
                "source": "        options = Hoek.merge(defaults, "
              },
              {
                "source": "options",
                "miss": "true"
              },
              {
                "source": " || "
              },
              {
                "source": "{}",
                "miss": "never"
              },
              {
                "source": ", true);"
              }
            ],
            "hits": 2,
            "miss": true
          },
          "44": {
            "source": "        server.inject(options, function (res) {",
            "hits": 2,
            "miss": false
          },
          "45": {
            "source": "",
            "miss": false
          },
          "46": {
            "source": "            data.auth.password.token = { req: options, res: res };",
            "hits": 2,
            "miss": false
          },
          "47": {
            "source": "            return next(null, server, data);",
            "hits": 2,
            "miss": false
          },
          "48": {
            "source": "        });",
            "miss": false
          },
          "49": {
            "source": "    };",
            "miss": false
          },
          "50": {
            "source": "};",
            "miss": false
          },
          "51": {
            "source": "",
            "miss": false
          },
          "52": {
            "source": "",
            "miss": false
          },
          "53": {
            "source": "module.exports.reset = function (options) {",
            "hits": 1,
            "miss": false
          },
          "54": {
            "source": "",
            "miss": false
          },
          "55": {
            "source": "    return function (server, data, next) {",
            "hits": 1,
            "miss": false
          },
          "56": {
            "source": "",
            "miss": false
          },
          "57": {
            "source": "        var defaults = {",
            "hits": 1,
            "miss": false
          },
          "58": {
            "source": "            method: 'PUT',",
            "miss": false
          },
          "59": {
            "source": "            url: '/auth/password/reset',",
            "miss": false
          },
          "60": {
            "source": "            payload: {",
            "miss": false
          },
          "61": {
            "source": "                token: Hoek.reach(data, 'auth.password.token.res.result.token') || '',",
            "chunks": [
              {
                "source": "                token: "
              },
              {
                "source": "Hoek.reach(data, 'auth.password.token.res.result.token')",
                "miss": "true"
              },
              {
                "source": " || "
              },
              {
                "source": "''",
                "miss": "never"
              },
              {
                "source": ","
              }
            ],
            "miss": true
          },
          "62": {
            "source": "                password: Auth.generatePassword()",
            "miss": false
          },
          "63": {
            "source": "            }",
            "miss": false
          },
          "64": {
            "source": "        };",
            "miss": false
          },
          "65": {
            "source": "",
            "miss": false
          },
          "66": {
            "source": "        options = Hoek.merge(defaults, options || {}, true);",
            "chunks": [
              {
                "source": "        options = Hoek.merge(defaults, "
              },
              {
                "source": "options",
                "miss": "true"
              },
              {
                "source": " || "
              },
              {
                "source": "{}",
                "miss": "never"
              },
              {
                "source": ", true);"
              }
            ],
            "hits": 1,
            "miss": true
          },
          "67": {
            "source": "        server.inject(options, function (res) {",
            "hits": 1,
            "miss": false
          },
          "68": {
            "source": "",
            "miss": false
          },
          "69": {
            "source": "            data.auth.password.reset = { req: options, res: res };",
            "hits": 1,
            "miss": false
          },
          "70": {
            "source": "            return next(null, server, data);",
            "hits": 1,
            "miss": false
          },
          "71": {
            "source": "        });",
            "miss": false
          },
          "72": {
            "source": "    };",
            "miss": false
          },
          "73": {
            "source": "};",
            "miss": false
          },
          "74": {
            "source": "",
            "miss": false
          }
        }
      },
      {
        "filename": "lib/auth/securityQuestion.js",
        "percent": 60.86956521739131,
        "hits": 42,
        "misses": 27,
        "sloc": 69,
        "source": {
          "1": {
            "source": "// Load modules",
            "miss": false
          },
          "2": {
            "source": "",
            "miss": false
          },
          "3": {
            "source": "var Url = require('url');",
            "hits": 1,
            "miss": false
          },
          "4": {
            "source": "var Hoek = require('hoek');",
            "hits": 1,
            "miss": false
          },
          "5": {
            "source": "var Auth = require('./');",
            "hits": 1,
            "miss": false
          },
          "6": {
            "source": "",
            "miss": false
          },
          "7": {
            "source": "",
            "miss": false
          },
          "8": {
            "source": "module.exports.create = function (options) {",
            "hits": 1,
            "miss": false
          },
          "9": {
            "source": "",
            "miss": false
          },
          "10": {
            "source": "    return function (server, data, next) {",
            "hits": 0,
            "miss": true
          },
          "11": {
            "source": "",
            "miss": false
          },
          "12": {
            "source": "        var defaults = {",
            "hits": 0,
            "miss": true
          },
          "13": {
            "source": "            method: 'POST',",
            "miss": false
          },
          "14": {
            "source": "            url: '/auth/question',",
            "miss": false
          },
          "15": {
            "source": "            payload: {",
            "miss": false
          },
          "16": {
            "source": "                principal: Hoek.reach(data, 'auth.authenticate.res.result.id') || '',",
            "chunks": [
              {
                "source": "                principal: "
              },
              {
                "source": "Hoek.reach(data, 'auth.authenticate.res.result.id')",
                "miss": "never"
              },
              {
                "source": " || "
              },
              {
                "source": "''",
                "miss": "never"
              },
              {
                "source": ","
              }
            ],
            "miss": true
          },
          "17": {
            "source": "                token: Hoek.reach(data, 'auth.authenticate.res.result.token') || '',",
            "chunks": [
              {
                "source": "                token: "
              },
              {
                "source": "Hoek.reach(data, 'auth.authenticate.res.result.token')",
                "miss": "never"
              },
              {
                "source": " || "
              },
              {
                "source": "''",
                "miss": "never"
              },
              {
                "source": ","
              }
            ],
            "miss": true
          },
          "18": {
            "source": "                questions: [{",
            "miss": false
          },
          "19": {
            "source": "                    questionText: 'What is your favorite color?',",
            "miss": false
          },
          "20": {
            "source": "                    answerText: 'blue'",
            "miss": false
          },
          "21": {
            "source": "                }]",
            "miss": false
          },
          "22": {
            "source": "            }",
            "miss": false
          },
          "23": {
            "source": "        };",
            "miss": false
          },
          "24": {
            "source": "",
            "miss": false
          },
          "25": {
            "source": "        options = Hoek.merge(defaults, options || {}, true, false);",
            "hits": 0,
            "miss": true
          },
          "26": {
            "source": "        server.inject(options, function (res) {",
            "hits": 0,
            "miss": true
          },
          "27": {
            "source": "",
            "miss": false
          },
          "28": {
            "source": "            data.auth.securityQuestion.create = { req: options, res: res };",
            "hits": 0,
            "miss": true
          },
          "29": {
            "source": "            return next(null, server, data);",
            "hits": 0,
            "miss": true
          },
          "30": {
            "source": "        });",
            "miss": false
          },
          "31": {
            "source": "    };",
            "miss": false
          },
          "32": {
            "source": "};",
            "miss": false
          },
          "33": {
            "source": "",
            "miss": false
          },
          "34": {
            "source": "",
            "miss": false
          },
          "35": {
            "source": "module.exports.retrieve = function (query, options) {",
            "hits": 1,
            "miss": false
          },
          "36": {
            "source": "",
            "miss": false
          },
          "37": {
            "source": "    return function (server, data, next) {",
            "hits": 0,
            "miss": true
          },
          "38": {
            "source": "",
            "miss": false
          },
          "39": {
            "source": "        var defaultQuery = {",
            "hits": 0,
            "miss": true
          },
          "40": {
            "source": "            token: Hoek.reach(data, 'auth.authenticate.res.result.token') || '',",
            "chunks": [
              {
                "source": "            token: "
              },
              {
                "source": "Hoek.reach(data, 'auth.authenticate.res.result.token')",
                "miss": "never"
              },
              {
                "source": " || "
              },
              {
                "source": "''",
                "miss": "never"
              },
              {
                "source": ","
              }
            ],
            "miss": true
          },
          "41": {
            "source": "            login: Auth.generateLogin()",
            "miss": false
          },
          "42": {
            "source": "        };",
            "miss": false
          },
          "43": {
            "source": "",
            "miss": false
          },
          "44": {
            "source": "        var defaults = {",
            "hits": 0,
            "miss": true
          },
          "45": {
            "source": "            method: 'GET',",
            "miss": false
          },
          "46": {
            "source": "            url: Url.format({",
            "miss": false
          },
          "47": {
            "source": "                pathname: '/auth/question',",
            "miss": false
          },
          "48": {
            "source": "                query: Hoek.merge(defaultQuery, query || {}, true)",
            "chunks": [
              {
                "source": "                query: Hoek.merge(defaultQuery, "
              },
              {
                "source": "query",
                "miss": "never"
              },
              {
                "source": " || "
              },
              {
                "source": "{}",
                "miss": "never"
              },
              {
                "source": ", true)"
              }
            ],
            "miss": true
          },
          "49": {
            "source": "            })",
            "miss": false
          },
          "50": {
            "source": "        };",
            "miss": false
          },
          "51": {
            "source": "",
            "miss": false
          },
          "52": {
            "source": "        options = Hoek.merge(defaults, options || {}, true);",
            "hits": 0,
            "miss": true
          },
          "53": {
            "source": "        server.inject(options, function (res) {",
            "hits": 0,
            "miss": true
          },
          "54": {
            "source": "",
            "miss": false
          },
          "55": {
            "source": "            data.auth.securityQuestion.retrieve = { req: options, res: res };",
            "hits": 0,
            "miss": true
          },
          "56": {
            "source": "            return next(null, server, data);",
            "hits": 0,
            "miss": true
          },
          "57": {
            "source": "        });",
            "miss": false
          },
          "58": {
            "source": "    };",
            "miss": false
          },
          "59": {
            "source": "};",
            "miss": false
          },
          "60": {
            "source": "",
            "miss": false
          },
          "61": {
            "source": "",
            "miss": false
          },
          "62": {
            "source": "module.exports.validate = function (options) {",
            "hits": 1,
            "miss": false
          },
          "63": {
            "source": "",
            "miss": false
          },
          "64": {
            "source": "    return function (server, data, next) {",
            "hits": 0,
            "miss": true
          },
          "65": {
            "source": "",
            "miss": false
          },
          "66": {
            "source": "        var questions = (Hoek.reach(data, 'auth.securityQuestion.create.res.result.questions') || []).map(function (question) {",
            "hits": 0,
            "miss": true
          },
          "67": {
            "source": "",
            "miss": false
          },
          "68": {
            "source": "            return {",
            "hits": 0,
            "miss": true
          },
          "69": {
            "source": "                id: question.id,",
            "miss": false
          },
          "70": {
            "source": "                answerText: question.answerText",
            "miss": false
          },
          "71": {
            "source": "            };",
            "miss": false
          },
          "72": {
            "source": "        });",
            "miss": false
          },
          "73": {
            "source": "",
            "miss": false
          },
          "74": {
            "source": "        var defaults = {",
            "hits": 0,
            "miss": true
          },
          "75": {
            "source": "            method: 'POST',",
            "miss": false
          },
          "76": {
            "source": "            url: '/auth/question/validate',",
            "miss": false
          },
          "77": {
            "source": "            payload: {",
            "miss": false
          },
          "78": {
            "source": "                principal: Hoek.reach(data, 'auth.authenticate.res.result.id') || '',",
            "chunks": [
              {
                "source": "                principal: "
              },
              {
                "source": "Hoek.reach(data, 'auth.authenticate.res.result.id')",
                "miss": "never"
              },
              {
                "source": " || "
              },
              {
                "source": "''",
                "miss": "never"
              },
              {
                "source": ","
              }
            ],
            "miss": true
          },
          "79": {
            "source": "                token: Hoek.reach(data, 'auth.authenticate.res.result.token') || '',",
            "chunks": [
              {
                "source": "                token: "
              },
              {
                "source": "Hoek.reach(data, 'auth.authenticate.res.result.token')",
                "miss": "never"
              },
              {
                "source": " || "
              },
              {
                "source": "''",
                "miss": "never"
              },
              {
                "source": ","
              }
            ],
            "miss": true
          },
          "80": {
            "source": "                questions: questions",
            "miss": false
          },
          "81": {
            "source": "            }",
            "miss": false
          },
          "82": {
            "source": "        };",
            "miss": false
          },
          "83": {
            "source": "",
            "miss": false
          },
          "84": {
            "source": "        options = Hoek.merge(defaults, options || {}, true, false);",
            "hits": 0,
            "miss": true
          },
          "85": {
            "source": "        server.inject(options, function (res) {",
            "hits": 0,
            "miss": true
          },
          "86": {
            "source": "",
            "miss": false
          },
          "87": {
            "source": "            data.auth.securityQuestion.validate = { req: options, res: res };",
            "hits": 0,
            "miss": true
          },
          "88": {
            "source": "            return next(null, server, data);",
            "hits": 0,
            "miss": true
          },
          "89": {
            "source": "        });",
            "miss": false
          },
          "90": {
            "source": "    };",
            "miss": false
          },
          "91": {
            "source": "};",
            "miss": false
          },
          "92": {
            "source": "",
            "miss": false
          }
        }
      },
      {
        "filename": "lib/avs/index.js",
        "percent": 100,
        "hits": 31,
        "misses": 0,
        "sloc": 31,
        "source": {
          "1": {
            "source": "// Load modules",
            "miss": false
          },
          "2": {
            "source": "",
            "miss": false
          },
          "3": {
            "source": "var Hoek = require('hoek');",
            "hits": 1,
            "miss": false
          },
          "4": {
            "source": "var Tools = require('../tools');",
            "hits": 1,
            "miss": false
          },
          "5": {
            "source": "",
            "miss": false
          },
          "6": {
            "source": "module.exports.validateAddress = function (options) {",
            "hits": 1,
            "miss": false
          },
          "7": {
            "source": "",
            "miss": false
          },
          "8": {
            "source": "    return function (server, data, next) {",
            "hits": 2,
            "miss": false
          },
          "9": {
            "source": "",
            "miss": false
          },
          "10": {
            "source": "        var defaults = {",
            "hits": 2,
            "miss": false
          },
          "11": {
            "source": "            method: 'POST',",
            "miss": false
          },
          "12": {
            "source": "            url: '/avs',",
            "miss": false
          },
          "13": {
            "source": "            payload: {",
            "miss": false
          },
          "14": {
            "source": "                address: {",
            "miss": false
          },
          "15": {
            "source": "                    addressLineOne: '420 N Weber Rd',",
            "miss": false
          },
          "16": {
            "source": "                    city: 'romeoville',",
            "miss": false
          },
          "17": {
            "source": "                    stateOrProvinceCode: 'IL',",
            "miss": false
          },
          "18": {
            "source": "                    postalCode: '60446-4945',",
            "miss": false
          },
          "19": {
            "source": "                    countryCode: 'USA'",
            "miss": false
          },
          "20": {
            "source": "                },",
            "miss": false
          },
          "21": {
            "source": "                options:{",
            "miss": false
          },
          "22": {
            "source": "                    maxResultSize: '10'",
            "miss": false
          },
          "23": {
            "source": "                },",
            "miss": false
          },
          "24": {
            "source": "                geoHint: 'US'",
            "miss": false
          },
          "25": {
            "source": "            }",
            "miss": false
          },
          "26": {
            "source": "        };",
            "miss": false
          },
          "27": {
            "source": "",
            "miss": false
          },
          "28": {
            "source": "        options = Hoek.merge(defaults, options || {}, true);",
            "hits": 2,
            "miss": false
          },
          "29": {
            "source": "        ",
            "miss": false
          },
          "30": {
            "source": "        server.inject(options, function (res) {",
            "hits": 2,
            "miss": false
          },
          "31": {
            "source": "",
            "miss": false
          },
          "32": {
            "source": "            var err = Tools.checkForError(res);",
            "hits": 2,
            "miss": false
          },
          "33": {
            "source": "",
            "miss": false
          },
          "34": {
            "source": "            data.avs.validateAddress = { err: err, req: options, res: res };",
            "hits": 2,
            "miss": false
          },
          "35": {
            "source": "            return next(err, server, data);",
            "hits": 2,
            "miss": false
          },
          "36": {
            "source": "        });",
            "miss": false
          },
          "37": {
            "source": "    };",
            "miss": false
          },
          "38": {
            "source": "};",
            "miss": false
          },
          "39": {
            "source": "",
            "miss": false
          }
        }
      },
      {
        "filename": "lib/cart/index.js",
        "percent": 64.39393939393939,
        "hits": 170,
        "misses": 94,
        "sloc": 264,
        "source": {
          "1": {
            "source": "// Load Modules",
            "miss": false
          },
          "2": {
            "source": "",
            "miss": false
          },
          "3": {
            "source": "var Hoek = require('hoek');",
            "hits": 1,
            "miss": false
          },
          "4": {
            "source": "var Boom = require('boom');",
            "hits": 1,
            "miss": false
          },
          "5": {
            "source": "var Tools = require('../tools');",
            "hits": 1,
            "miss": false
          },
          "6": {
            "source": "",
            "miss": false
          },
          "7": {
            "source": "",
            "miss": false
          },
          "8": {
            "source": "// Cart Items",
            "miss": false
          },
          "9": {
            "source": "module.exports.item = require('./item');",
            "hits": 1,
            "miss": false
          },
          "10": {
            "source": "",
            "miss": false
          },
          "11": {
            "source": "// Save For Later (SFL)",
            "miss": false
          },
          "12": {
            "source": "module.exports.save = require('./sfl');",
            "hits": 1,
            "miss": false
          },
          "13": {
            "source": "",
            "miss": false
          },
          "14": {
            "source": "// Warranty",
            "miss": false
          },
          "15": {
            "source": "module.exports.warranty = require('./warranty');",
            "hits": 1,
            "miss": false
          },
          "16": {
            "source": "",
            "miss": false
          },
          "17": {
            "source": "// Cart",
            "miss": false
          },
          "18": {
            "source": "module.exports.create = function (options) {",
            "hits": 1,
            "miss": false
          },
          "19": {
            "source": "",
            "miss": false
          },
          "20": {
            "source": "    options = options || {};",
            "chunks": [
              {
                "source": "    options = "
              },
              {
                "source": "options",
                "miss": "false"
              },
              {
                "source": " || {};"
              }
            ],
            "hits": 1,
            "miss": true
          },
          "21": {
            "source": "    return function (server, data, next) {",
            "hits": 1,
            "miss": false
          },
          "22": {
            "source": "",
            "miss": false
          },
          "23": {
            "source": "        var customerId = options.customerId || Hoek.reach(data, 'customer.create.res.result.id');",
            "chunks": [
              {
                "source": "        var customerId = "
              },
              {
                "source": "options.customerId",
                "miss": "false"
              },
              {
                "source": " || Hoek.reach(data, 'customer.create.res.result.id');"
              }
            ],
            "hits": 1,
            "miss": true
          },
          "24": {
            "source": "",
            "miss": false
          },
          "25": {
            "source": "        var defaults = {",
            "hits": 1,
            "miss": false
          },
          "26": {
            "source": "            method: 'POST',",
            "miss": false
          },
          "27": {
            "source": "            url: '/cart',",
            "miss": false
          },
          "28": {
            "source": "            payload: {",
            "miss": false
          },
          "29": {
            "source": "                customerId: customerId,",
            "miss": false
          },
          "30": {
            "source": "                customerType: options.customerType || (customerId ? 'CUSTOMER' : 'GUEST'),",
            "chunks": [
              {
                "source": "                customerType: "
              },
              {
                "source": "options.customerType",
                "miss": "false"
              },
              {
                "source": " || ("
              },
              {
                "source": "customerId",
                "miss": "false"
              },
              {
                "source": " ? "
              },
              {
                "source": "'CUSTOMER'",
                "miss": "never"
              },
              {
                "source": " : 'GUEST'),"
              }
            ],
            "miss": true
          },
          "31": {
            "source": "                location: {",
            "miss": false
          },
          "32": {
            "source": "                    postalCode: '94066',",
            "miss": false
          },
          "33": {
            "source": "                    city: 'San Bruno',",
            "miss": false
          },
          "34": {
            "source": "                    state: 'CA',",
            "miss": false
          },
          "35": {
            "source": "                    country: 'USA'",
            "miss": false
          },
          "36": {
            "source": "                },",
            "miss": false
          },
          "37": {
            "source": "                storeIds: [2280]",
            "miss": false
          },
          "38": {
            "source": "            }",
            "miss": false
          },
          "39": {
            "source": "        };",
            "miss": false
          },
          "40": {
            "source": "",
            "miss": false
          },
          "41": {
            "source": "        options = Hoek.merge(defaults, options, true, false);",
            "hits": 1,
            "miss": false
          },
          "42": {
            "source": "        server.inject(options, function (res) {",
            "hits": 1,
            "miss": false
          },
          "43": {
            "source": "",
            "miss": false
          },
          "44": {
            "source": "            Tools.checkStatus(res, options.expectedStatus || 201);",
            "chunks": [
              {
                "source": "            Tools.checkStatus(res, "
              },
              {
                "source": "options.expectedStatus",
                "miss": "false"
              },
              {
                "source": " || 201);"
              }
            ],
            "hits": 1,
            "miss": true
          },
          "45": {
            "source": "            data.cart.create = { req: options, res: res };",
            "hits": 1,
            "miss": false
          },
          "46": {
            "source": "            return next(null, server, data);",
            "hits": 1,
            "miss": false
          },
          "47": {
            "source": "        });",
            "miss": false
          },
          "48": {
            "source": "    };",
            "miss": false
          },
          "49": {
            "source": "};",
            "miss": false
          },
          "50": {
            "source": "",
            "miss": false
          },
          "51": {
            "source": "",
            "miss": false
          },
          "52": {
            "source": "module.exports.getCart = function (options) {",
            "hits": 1,
            "miss": false
          },
          "53": {
            "source": "",
            "miss": false
          },
          "54": {
            "source": "    options = options || {};",
            "hits": 0,
            "miss": true
          },
          "55": {
            "source": "    return function (server, data, next) {",
            "hits": 0,
            "miss": true
          },
          "56": {
            "source": "",
            "miss": false
          },
          "57": {
            "source": "        var defaults = {",
            "hits": 0,
            "miss": true
          },
          "58": {
            "source": "            method: 'GET',",
            "miss": false
          },
          "59": {
            "source": "            url: '/cart/' + (options.cartId || Hoek.reach(data, 'cart.create.res.result.cart.id'))",
            "chunks": [
              {
                "source": "            url: '/cart/' + ("
              },
              {
                "source": "options.cartId",
                "miss": "never"
              },
              {
                "source": " || "
              },
              {
                "source": "Hoek.reach(data, 'cart.create.res.result.cart.id')",
                "miss": "never"
              },
              {
                "source": ")"
              }
            ],
            "miss": true
          },
          "60": {
            "source": "        };",
            "miss": false
          },
          "61": {
            "source": "",
            "miss": false
          },
          "62": {
            "source": "        options = Hoek.merge(defaults, options, true);",
            "hits": 0,
            "miss": true
          },
          "63": {
            "source": "        server.inject(options, function (res) {",
            "hits": 0,
            "miss": true
          },
          "64": {
            "source": "",
            "miss": false
          },
          "65": {
            "source": "            Tools.checkStatus(res, options.expectedStatus || 200);",
            "hits": 0,
            "miss": true
          },
          "66": {
            "source": "            data.cart.getCart = { req: options, res: res };",
            "hits": 0,
            "miss": true
          },
          "67": {
            "source": "            return next(null, server, data);",
            "hits": 0,
            "miss": true
          },
          "68": {
            "source": "        });",
            "miss": false
          },
          "69": {
            "source": "    };",
            "miss": false
          },
          "70": {
            "source": "};",
            "miss": false
          },
          "71": {
            "source": "",
            "miss": false
          },
          "72": {
            "source": "",
            "miss": false
          },
          "73": {
            "source": "module.exports.updateCart = function (options) {",
            "hits": 1,
            "miss": false
          },
          "74": {
            "source": "",
            "miss": false
          },
          "75": {
            "source": "    options = options || {};",
            "hits": 0,
            "miss": true
          },
          "76": {
            "source": "    return function (server, data, next) {",
            "hits": 0,
            "miss": true
          },
          "77": {
            "source": "",
            "miss": false
          },
          "78": {
            "source": "        var defaults = {",
            "hits": 0,
            "miss": true
          },
          "79": {
            "source": "            method: 'PUT',",
            "miss": false
          },
          "80": {
            "source": "            url: '/cart/' + (options.cartId || Hoek.reach(data, 'cart.create.res.result.cart.id'))",
            "chunks": [
              {
                "source": "            url: '/cart/' + ("
              },
              {
                "source": "options.cartId",
                "miss": "never"
              },
              {
                "source": " || "
              },
              {
                "source": "Hoek.reach(data, 'cart.create.res.result.cart.id')",
                "miss": "never"
              },
              {
                "source": ")"
              }
            ],
            "miss": true
          },
          "81": {
            "source": "        };",
            "miss": false
          },
          "82": {
            "source": "",
            "miss": false
          },
          "83": {
            "source": "        options = Hoek.merge(defaults, options, true);",
            "hits": 0,
            "miss": true
          },
          "84": {
            "source": "        server.inject(options, function (res) {",
            "hits": 0,
            "miss": true
          },
          "85": {
            "source": "",
            "miss": false
          },
          "86": {
            "source": "            Tools.checkStatus(res, options.expectedStatus || 200);",
            "hits": 0,
            "miss": true
          },
          "87": {
            "source": "            data.cart.updateCart = { req: options, res: res };",
            "hits": 0,
            "miss": true
          },
          "88": {
            "source": "            return next(null, server, data);",
            "hits": 0,
            "miss": true
          },
          "89": {
            "source": "        });",
            "miss": false
          },
          "90": {
            "source": "    };",
            "miss": false
          },
          "91": {
            "source": "};",
            "miss": false
          },
          "92": {
            "source": "",
            "miss": false
          },
          "93": {
            "source": "",
            "miss": false
          },
          "94": {
            "source": "module.exports.mergeCart = function (options) {",
            "hits": 1,
            "miss": false
          },
          "95": {
            "source": "",
            "miss": false
          },
          "96": {
            "source": "    options = options || {};",
            "hits": 0,
            "miss": true
          },
          "97": {
            "source": "    return function (server, data, next) {",
            "hits": 0,
            "miss": true
          },
          "98": {
            "source": "",
            "miss": false
          },
          "99": {
            "source": "        var guestCartId = options.cartId || Hoek.reach(data, 'cart.create.res.result.cart.id');",
            "hits": 0,
            "miss": true
          },
          "100": {
            "source": "        var targetCustomerId = options.targetCustomerId || Hoek.reach(data, 'customer.create.res.result.id');",
            "hits": 0,
            "miss": true
          },
          "101": {
            "source": "",
            "miss": false
          },
          "102": {
            "source": "        var defaults = {",
            "hits": 0,
            "miss": true
          },
          "103": {
            "source": "            method: 'POST',",
            "miss": false
          },
          "104": {
            "source": "            url: '/cart/' + guestCartId + '/merge/' + targetCustomerId",
            "miss": false
          },
          "105": {
            "source": "        };",
            "miss": false
          },
          "106": {
            "source": "",
            "miss": false
          },
          "107": {
            "source": "        options = Hoek.merge(defaults, options, true);",
            "hits": 0,
            "miss": true
          },
          "108": {
            "source": "        server.inject(options, function (res) {",
            "hits": 0,
            "miss": true
          },
          "109": {
            "source": "",
            "miss": false
          },
          "110": {
            "source": "            Tools.checkStatus(res, options.expectedStatus || 200);",
            "hits": 0,
            "miss": true
          },
          "111": {
            "source": "            data.cart.mergeCart = { req: options, res: res };",
            "hits": 0,
            "miss": true
          },
          "112": {
            "source": "            return next(null, server, data);",
            "hits": 0,
            "miss": true
          },
          "113": {
            "source": "        });",
            "miss": false
          },
          "114": {
            "source": "    };",
            "miss": false
          },
          "115": {
            "source": "};",
            "miss": false
          },
          "116": {
            "source": "",
            "miss": false
          },
          "117": {
            "source": "",
            "miss": false
          },
          "118": {
            "source": "module.exports.convertCart = function (options) {",
            "hits": 1,
            "miss": false
          },
          "119": {
            "source": "",
            "miss": false
          },
          "120": {
            "source": "    options = options || {};",
            "hits": 0,
            "miss": true
          },
          "121": {
            "source": "    return function (server, data, next) {",
            "hits": 0,
            "miss": true
          },
          "122": {
            "source": "",
            "miss": false
          },
          "123": {
            "source": "        var customerId = options.customerId ||",
            "hits": 0,
            "miss": true
          },
          "124": {
            "source": "            Hoek.reach(data, 'cart.create.res.result.cart.customerId') ||",
            "miss": false
          },
          "125": {
            "source": "            Hoek.reach(data, 'customer.create.res.result.id');",
            "miss": false
          },
          "126": {
            "source": "",
            "miss": false
          },
          "127": {
            "source": "        var defaults = {",
            "hits": 0,
            "miss": true
          },
          "128": {
            "source": "            method: 'POST',",
            "miss": false
          },
          "129": {
            "source": "            url: '/convert/cart',",
            "miss": false
          },
          "130": {
            "source": "            payload: {",
            "miss": false
          },
          "131": {
            "source": "                customerId: customerId",
            "miss": false
          },
          "132": {
            "source": "            }",
            "miss": false
          },
          "133": {
            "source": "        };",
            "miss": false
          },
          "134": {
            "source": "",
            "miss": false
          },
          "135": {
            "source": "        options = Hoek.merge(defaults, options, true);",
            "hits": 0,
            "miss": true
          },
          "136": {
            "source": "        server.inject(options, function (res) {",
            "hits": 0,
            "miss": true
          },
          "137": {
            "source": "",
            "miss": false
          },
          "138": {
            "source": "            Tools.checkStatus(res, options.expectedStatus || 200);",
            "hits": 0,
            "miss": true
          },
          "139": {
            "source": "            data.cart.convertCart = { req: options, res: res };",
            "hits": 0,
            "miss": true
          },
          "140": {
            "source": "            return next(null, server, data);",
            "hits": 0,
            "miss": true
          },
          "141": {
            "source": "        });",
            "miss": false
          },
          "142": {
            "source": "    };",
            "miss": false
          },
          "143": {
            "source": "};",
            "miss": false
          },
          "144": {
            "source": "",
            "miss": false
          },
          "145": {
            "source": "",
            "miss": false
          },
          "146": {
            "source": "module.exports.getByCustomer = function (options) {",
            "hits": 1,
            "miss": false
          },
          "147": {
            "source": "",
            "miss": false
          },
          "148": {
            "source": "    options = options || {};",
            "hits": 0,
            "miss": true
          },
          "149": {
            "source": "    return function (server, data, next) {",
            "hits": 0,
            "miss": true
          },
          "150": {
            "source": "",
            "miss": false
          },
          "151": {
            "source": "        var customerId = options.customerId ||",
            "hits": 0,
            "miss": true
          },
          "152": {
            "source": "            Hoek.reach(data, 'cart.create.res.result.cart.customerId') ||",
            "miss": false
          },
          "153": {
            "source": "            Hoek.reach(data, 'customer.create.res.result.id');",
            "miss": false
          },
          "154": {
            "source": "",
            "miss": false
          },
          "155": {
            "source": "        var defaults = {",
            "hits": 0,
            "miss": true
          },
          "156": {
            "source": "            method: 'GET',",
            "miss": false
          },
          "157": {
            "source": "            url: '/cart/customer/' + customerId",
            "miss": false
          },
          "158": {
            "source": "        };",
            "miss": false
          },
          "159": {
            "source": "",
            "miss": false
          },
          "160": {
            "source": "        options = Hoek.merge(defaults, options, true);",
            "hits": 0,
            "miss": true
          },
          "161": {
            "source": "        server.inject(options, function (res) {",
            "hits": 0,
            "miss": true
          },
          "162": {
            "source": "",
            "miss": false
          },
          "163": {
            "source": "            Tools.checkStatus(res, options.expectedStatus || 200);",
            "hits": 0,
            "miss": true
          },
          "164": {
            "source": "            data.cart.getByCustomer = { req: options, res: res };",
            "hits": 0,
            "miss": true
          },
          "165": {
            "source": "            return next(null, server, data);",
            "hits": 0,
            "miss": true
          },
          "166": {
            "source": "        });",
            "miss": false
          },
          "167": {
            "source": "    };",
            "miss": false
          },
          "168": {
            "source": "};",
            "miss": false
          },
          "169": {
            "source": "",
            "miss": false
          },
          "170": {
            "source": "",
            "miss": false
          },
          "171": {
            "source": "// Common function to mock PG call failure. For negative testing.",
            "miss": false
          },
          "172": {
            "source": "module.exports.failPangaeaAPI = function (pgModule, apiName) {",
            "hits": 1,
            "miss": false
          },
          "173": {
            "source": "",
            "miss": false
          },
          "174": {
            "source": "    return function (server, data, next) {",
            "hits": 0,
            "miss": true
          },
          "175": {
            "source": "",
            "miss": false
          },
          "176": {
            "source": "        data.cart.original = pgModule.prototype[apiName];",
            "hits": 0,
            "miss": true
          },
          "177": {
            "source": "",
            "miss": false
          },
          "178": {
            "source": "        pgModule.prototype[apiName] = function (options, callback) {",
            "hits": 0,
            "miss": true
          },
          "179": {
            "source": "",
            "miss": false
          },
          "180": {
            "source": "            pgModule.prototype[apiName] = data.cart.original;",
            "hits": 0,
            "miss": true
          },
          "181": {
            "source": "            callback(Boom.badRequest('Mock ' + apiName + ' failure'));",
            "hits": 0,
            "miss": true
          },
          "182": {
            "source": "        };",
            "miss": false
          },
          "183": {
            "source": "",
            "miss": false
          },
          "184": {
            "source": "        return next(null, server, data);",
            "hits": 0,
            "miss": true
          },
          "185": {
            "source": "    };",
            "miss": false
          },
          "186": {
            "source": "};",
            "miss": false
          },
          "187": {
            "source": "",
            "miss": false
          },
          "188": {
            "source": "",
            "miss": false
          },
          "189": {
            "source": "// Common function to mock Plugin call failure. For negative testing.",
            "miss": false
          },
          "190": {
            "source": "module.exports.failPluginAPI = function (pluginName, apiName) {",
            "hits": 1,
            "miss": false
          },
          "191": {
            "source": "",
            "miss": false
          },
          "192": {
            "source": "    return function (server, data, next) {",
            "hits": 0,
            "miss": true
          },
          "193": {
            "source": "",
            "miss": false
          },
          "194": {
            "source": "        data.cart.original = server.plugins[pluginName][apiName];",
            "hits": 0,
            "miss": true
          },
          "195": {
            "source": "        server.plugins[pluginName][apiName] = function (options, callback) {",
            "hits": 0,
            "miss": true
          },
          "196": {
            "source": "",
            "miss": false
          },
          "197": {
            "source": "            server.plugins[pluginName][apiName] = data.cart.original;",
            "hits": 0,
            "miss": true
          },
          "198": {
            "source": "            callback(Boom.badRequest('Mock failure for plugin ' + pluginName + ' and api ' + apiName));",
            "hits": 0,
            "miss": true
          },
          "199": {
            "source": "        };",
            "miss": false
          },
          "200": {
            "source": "",
            "miss": false
          },
          "201": {
            "source": "        return next(null, server, data);",
            "hits": 0,
            "miss": true
          },
          "202": {
            "source": "    };",
            "miss": false
          },
          "203": {
            "source": "};",
            "miss": false
          },
          "204": {
            "source": "",
            "miss": false
          },
          "205": {
            "source": "",
            "miss": false
          },
          "206": {
            "source": "// Used by checkout, not by cart",
            "miss": false
          },
          "207": {
            "source": "module.exports.addItem = function (type, options) {",
            "hits": 1,
            "miss": false
          },
          "208": {
            "source": "",
            "miss": false
          },
          "209": {
            "source": "    // List of items for Checkout testing",
            "miss": false
          },
          "210": {
            "source": "    // https://confluence.walmart.com/display/USFEFER/Checkout+Testing",
            "miss": false
          },
          "211": {
            "source": "",
            "miss": false
          },
          "212": {
            "source": "    return function (server, data, next) {",
            "hits": 0,
            "miss": true
          },
          "213": {
            "source": "",
            "miss": false
          },
          "214": {
            "source": "        var cartId = Hoek.reach(data, 'cart.create.res.result.cart.id');",
            "hits": 0,
            "miss": true
          },
          "215": {
            "source": "        var defaults = {",
            "hits": 0,
            "miss": true
          },
          "216": {
            "source": "            method: 'POST',",
            "miss": false
          },
          "217": {
            "source": "            url: '/cart/' + cartId + '/items',",
            "miss": false
          },
          "218": {
            "source": "            payload: {}",
            "miss": false
          },
          "219": {
            "source": "        };",
            "miss": false
          },
          "220": {
            "source": "",
            "miss": false
          },
          "221": {
            "source": "        if (type === 'S2H') {",
            "hits": 0,
            "miss": true
          },
          "222": {
            "source": "            defaults.payload = {",
            "hits": 0,
            "miss": true
          },
          "223": {
            "source": "                itemId: '24074298'",
            "miss": false
          },
          "224": {
            "source": "            };",
            "miss": false
          },
          "225": {
            "source": "        }",
            "miss": false
          },
          "226": {
            "source": "",
            "miss": false
          },
          "227": {
            "source": "        if (type === 'PUT') {",
            "hits": 0,
            "miss": true
          },
          "228": {
            "source": "            defaults.payload = {",
            "hits": 0,
            "miss": true
          },
          "229": {
            "source": "                itemId: '24074298'",
            "miss": false
          },
          "230": {
            "source": "            };",
            "miss": false
          },
          "231": {
            "source": "        }",
            "miss": false
          },
          "232": {
            "source": "",
            "miss": false
          },
          "233": {
            "source": "        if (type === 'ELECTRONIC') {",
            "hits": 0,
            "miss": true
          },
          "234": {
            "source": "            defaults.payload = {",
            "hits": 0,
            "miss": true
          },
          "235": {
            "source": "                itemId: '21694811'",
            "miss": false
          },
          "236": {
            "source": "            };",
            "miss": false
          },
          "237": {
            "source": "        }",
            "miss": false
          },
          "238": {
            "source": "",
            "miss": false
          },
          "239": {
            "source": "        if (type === 'FREIGHT') {",
            "hits": 0,
            "miss": true
          },
          "240": {
            "source": "            defaults.payload = {",
            "hits": 0,
            "miss": true
          },
          "241": {
            "source": "                itemId: '24430386'",
            "miss": false
          },
          "242": {
            "source": "            };",
            "miss": false
          },
          "243": {
            "source": "        }",
            "miss": false
          },
          "244": {
            "source": "",
            "miss": false
          },
          "245": {
            "source": "        if (type === 'S2S') {",
            "hits": 0,
            "miss": true
          },
          "246": {
            "source": "            defaults.payload = {",
            "hits": 0,
            "miss": true
          },
          "247": {
            "source": "                itemId: '14669236' // 14539599",
            "miss": false
          },
          "248": {
            "source": "            };",
            "miss": false
          },
          "249": {
            "source": "        }",
            "miss": false
          },
          "250": {
            "source": "",
            "miss": false
          },
          "251": {
            "source": "        if (type === 'MERCHANDISEFEE') {",
            "hits": 0,
            "miss": true
          },
          "252": {
            "source": "            defaults.payload = {",
            "hits": 0,
            "miss": true
          },
          "253": {
            "source": "                itemId: '22144351'",
            "miss": false
          },
          "254": {
            "source": "            };",
            "miss": false
          },
          "255": {
            "source": "        }",
            "miss": false
          },
          "256": {
            "source": "",
            "miss": false
          },
          "257": {
            "source": "        if (type === 'ASSOCIATE-DISCOUNT') {",
            "hits": 0,
            "miss": true
          },
          "258": {
            "source": "            defaults.payload = {",
            "hits": 0,
            "miss": true
          },
          "259": {
            "source": "                itemId: '24216171'",
            "miss": false
          },
          "260": {
            "source": "            };",
            "miss": false
          },
          "261": {
            "source": "        }",
            "miss": false
          },
          "262": {
            "source": "",
            "miss": false
          },
          "263": {
            "source": "        if (type === 'REGISTRY') {",
            "hits": 0,
            "miss": true
          },
          "264": {
            "source": "            defaults.payload = {",
            "hits": 0,
            "miss": true
          },
          "265": {
            "source": "                offerId: Hoek.reach(data, 'lists.addItem.res.result.offerId'),",
            "miss": false
          },
          "266": {
            "source": "                registry: {",
            "miss": false
          },
          "267": {
            "source": "                    id: Hoek.reach(data, 'lists.create.res.result.id'),",
            "miss": false
          },
          "268": {
            "source": "                    itemId: Hoek.reach(data, 'lists.addItem.res.result.id'),",
            "miss": false
          },
          "269": {
            "source": "                    type: Hoek.reach(data, 'lists.create.res.result.type'),",
            "miss": false
          },
          "270": {
            "source": "                    name: Hoek.reach(data, 'lists.create.res.result.name')",
            "miss": false
          },
          "271": {
            "source": "                }",
            "miss": false
          },
          "272": {
            "source": "            };",
            "miss": false
          },
          "273": {
            "source": "        }",
            "miss": false
          },
          "274": {
            "source": "",
            "miss": false
          },
          "275": {
            "source": "        if (type === 'BUNDLE') {",
            "hits": 0,
            "miss": true
          },
          "276": {
            "source": "            defaults.payload = {",
            "hits": 0,
            "miss": true
          },
          "277": {
            "source": "                groupId: 'C470B636ABE147B7B489AE64371DC711',",
            "miss": false
          },
          "278": {
            "source": "                groupComponents: [",
            "miss": false
          },
          "279": {
            "source": "                    { offerId: '889F11DB1F2E44BCBEA9CA2C88AC3715', quantity: 1 },",
            "miss": false
          },
          "280": {
            "source": "                    { offerId: 'D0E82571DA9744F988FB9BBA3348B58F', quantity: 1 },",
            "miss": false
          },
          "281": {
            "source": "                    { offerId: '299A516CA49345F8BACA574FB01A5AF9', quantity: 1 }",
            "miss": false
          },
          "282": {
            "source": "                ],",
            "miss": false
          },
          "283": {
            "source": "                quantity: 1",
            "miss": false
          },
          "284": {
            "source": "            };",
            "miss": false
          },
          "285": {
            "source": "        }",
            "miss": false
          },
          "286": {
            "source": "",
            "miss": false
          },
          "287": {
            "source": "        if (type === 'MIXED') {",
            "hits": 0,
            "miss": true
          },
          "288": {
            "source": "            defaults.payload = {",
            "hits": 0,
            "miss": true
          },
          "289": {
            "source": "                groupId: '5736DF1CEA8811E39E0882687F4FC15C',",
            "miss": false
          },
          "290": {
            "source": "                groupComponents: [",
            "miss": false
          },
          "291": {
            "source": "                    {",
            "miss": false
          },
          "292": {
            "source": "                        offerId: '56768C506CEC45F098E715B4C5B5213F',",
            "miss": false
          },
          "293": {
            "source": "                        quantity: 1",
            "miss": false
          },
          "294": {
            "source": "                    },",
            "miss": false
          },
          "295": {
            "source": "                    {",
            "miss": false
          },
          "296": {
            "source": "                        offerId: 'B79665132BE8439C992998C01E539721',",
            "miss": false
          },
          "297": {
            "source": "                        quantity: 1",
            "miss": false
          },
          "298": {
            "source": "                    },",
            "miss": false
          },
          "299": {
            "source": "                    {",
            "miss": false
          },
          "300": {
            "source": "                        offerId: '889F11DB1F2E44BCBEA9CA2C88AC3715',",
            "miss": false
          },
          "301": {
            "source": "                        quantity: 1",
            "miss": false
          },
          "302": {
            "source": "                    },",
            "miss": false
          },
          "303": {
            "source": "                    {",
            "miss": false
          },
          "304": {
            "source": "                        offerId: '21DC509EC8694DFBAEFAD0FAE38D5A38',",
            "miss": false
          },
          "305": {
            "source": "                        quantity: 1",
            "miss": false
          },
          "306": {
            "source": "                    },",
            "miss": false
          },
          "307": {
            "source": "                    {",
            "miss": false
          },
          "308": {
            "source": "                        offerId: '16FD4348A1FC447AA657866EB8C2B4CC',",
            "miss": false
          },
          "309": {
            "source": "                        quantity: 1",
            "miss": false
          },
          "310": {
            "source": "                    }",
            "miss": false
          },
          "311": {
            "source": "                ],",
            "miss": false
          },
          "312": {
            "source": "                quantity: 1",
            "miss": false
          },
          "313": {
            "source": "            };",
            "miss": false
          },
          "314": {
            "source": "        }",
            "miss": false
          },
          "315": {
            "source": "",
            "miss": false
          },
          "316": {
            "source": "        if (type === 'ITEM_WITH_CAREPLAN') {",
            "hits": 0,
            "miss": true
          },
          "317": {
            "source": "            defaults.payload = {",
            "hits": 0,
            "miss": true
          },
          "318": {
            "source": "                offerId: '21DC509EC8694DFBAEFAD0FAE38D5A38',",
            "miss": false
          },
          "319": {
            "source": "                quantity: 1,",
            "miss": false
          },
          "320": {
            "source": "                groupId: '7CAF6DEE0C9E4219A38ED783386709F0',",
            "miss": false
          },
          "321": {
            "source": "                careplanOfferId: '6E26D6B9A7AB408580B47A79483E5D71',",
            "miss": false
          },
          "322": {
            "source": "                careplanQuantity: 1",
            "miss": false
          },
          "323": {
            "source": "            };",
            "miss": false
          },
          "324": {
            "source": "        }",
            "miss": false
          },
          "325": {
            "source": "",
            "miss": false
          },
          "326": {
            "source": "        if (type === 'PREORDER') {",
            "hits": 0,
            "miss": true
          },
          "327": {
            "source": "            defaults.payload = {",
            "hits": 0,
            "miss": true
          },
          "328": {
            "source": "                itemId: '5285076'",
            "miss": false
          },
          "329": {
            "source": "            };",
            "miss": false
          },
          "330": {
            "source": "        }",
            "miss": false
          },
          "331": {
            "source": "",
            "miss": false
          },
          "332": {
            "source": "        options = Hoek.merge(defaults, options || {}, true);",
            "hits": 0,
            "miss": true
          },
          "333": {
            "source": "        server.inject(options, function (res) {",
            "hits": 0,
            "miss": true
          },
          "334": {
            "source": "",
            "miss": false
          },
          "335": {
            "source": "            var err = Tools.checkForError(res);",
            "hits": 0,
            "miss": true
          },
          "336": {
            "source": "",
            "miss": false
          },
          "337": {
            "source": "            data.cart.addItem = { err: err, req: options, res: res };",
            "hits": 0,
            "miss": true
          },
          "338": {
            "source": "            return next(err, server, data);",
            "hits": 0,
            "miss": true
          },
          "339": {
            "source": "        });",
            "miss": false
          },
          "340": {
            "source": "    };",
            "miss": false
          },
          "341": {
            "source": "};",
            "miss": false
          },
          "342": {
            "source": "",
            "miss": false
          }
        }
      },
      {
        "filename": "lib/cart/item.js",
        "percent": 45.714285714285715,
        "hits": 48,
        "misses": 57,
        "sloc": 105,
        "source": {
          "1": {
            "source": "// Load Modules",
            "miss": false
          },
          "2": {
            "source": "",
            "miss": false
          },
          "3": {
            "source": "var Hoek = require('hoek');",
            "hits": 1,
            "miss": false
          },
          "4": {
            "source": "var Tools = require('../tools');",
            "hits": 1,
            "miss": false
          },
          "5": {
            "source": "",
            "miss": false
          },
          "6": {
            "source": "module.exports.addItem = function (options) {",
            "hits": 1,
            "miss": false
          },
          "7": {
            "source": "",
            "miss": false
          },
          "8": {
            "source": "    options = options || {};",
            "hits": 0,
            "miss": true
          },
          "9": {
            "source": "    return function (server, data, next) {",
            "hits": 0,
            "miss": true
          },
          "10": {
            "source": "",
            "miss": false
          },
          "11": {
            "source": "        var cartId = options.cartId || Hoek.reach(data, 'cart.create.res.result.cart.id');",
            "hits": 0,
            "miss": true
          },
          "12": {
            "source": "        var defaults = {",
            "hits": 0,
            "miss": true
          },
          "13": {
            "source": "            method: 'POST',",
            "miss": false
          },
          "14": {
            "source": "            url: '/cart/' + cartId + '/items',",
            "miss": false
          },
          "15": {
            "source": "            payload: {}",
            "miss": false
          },
          "16": {
            "source": "        };",
            "miss": false
          },
          "17": {
            "source": "",
            "miss": false
          },
          "18": {
            "source": "        options = Hoek.merge(defaults, options, true);",
            "hits": 0,
            "miss": true
          },
          "19": {
            "source": "        server.inject(options, function (res) {",
            "hits": 0,
            "miss": true
          },
          "20": {
            "source": "",
            "miss": false
          },
          "21": {
            "source": "            Tools.checkStatus(res, options.expectedStatus || 200);",
            "hits": 0,
            "miss": true
          },
          "22": {
            "source": "            data.cart.item.addItem = { req: options, res: res };",
            "hits": 0,
            "miss": true
          },
          "23": {
            "source": "            return next(null, server, data);",
            "hits": 0,
            "miss": true
          },
          "24": {
            "source": "        });",
            "miss": false
          },
          "25": {
            "source": "    };",
            "miss": false
          },
          "26": {
            "source": "};",
            "miss": false
          },
          "27": {
            "source": "",
            "miss": false
          },
          "28": {
            "source": "",
            "miss": false
          },
          "29": {
            "source": "module.exports.getItemCount = function (options) {",
            "hits": 1,
            "miss": false
          },
          "30": {
            "source": "",
            "miss": false
          },
          "31": {
            "source": "    options = options || {};",
            "hits": 0,
            "miss": true
          },
          "32": {
            "source": "    return function (server, data, next) {",
            "hits": 0,
            "miss": true
          },
          "33": {
            "source": "",
            "miss": false
          },
          "34": {
            "source": "        var cartId = options.cartId || Hoek.reach(data, 'cart.create.res.result.cart.id');",
            "hits": 0,
            "miss": true
          },
          "35": {
            "source": "        var defaults = {",
            "hits": 0,
            "miss": true
          },
          "36": {
            "source": "            method: 'GET',",
            "miss": false
          },
          "37": {
            "source": "            url: '/cart/' + cartId + '/items/count'",
            "miss": false
          },
          "38": {
            "source": "        };",
            "miss": false
          },
          "39": {
            "source": "",
            "miss": false
          },
          "40": {
            "source": "        options = Hoek.merge(defaults, options, true);",
            "hits": 0,
            "miss": true
          },
          "41": {
            "source": "        server.inject(options, function (res) {",
            "hits": 0,
            "miss": true
          },
          "42": {
            "source": "",
            "miss": false
          },
          "43": {
            "source": "            Tools.checkStatus(res, options.expectedStatus || 200);",
            "hits": 0,
            "miss": true
          },
          "44": {
            "source": "            data.cart.item.getItemCount = { req: options, res: res };",
            "hits": 0,
            "miss": true
          },
          "45": {
            "source": "            return next(null, server, data);",
            "hits": 0,
            "miss": true
          },
          "46": {
            "source": "        });",
            "miss": false
          },
          "47": {
            "source": "    };",
            "miss": false
          },
          "48": {
            "source": "};",
            "miss": false
          },
          "49": {
            "source": "",
            "miss": false
          },
          "50": {
            "source": "",
            "miss": false
          },
          "51": {
            "source": "module.exports.updateItem = function (options) {",
            "hits": 1,
            "miss": false
          },
          "52": {
            "source": "",
            "miss": false
          },
          "53": {
            "source": "    options = options || {};",
            "hits": 0,
            "miss": true
          },
          "54": {
            "source": "    return function (server, data, next) {",
            "hits": 0,
            "miss": true
          },
          "55": {
            "source": "",
            "miss": false
          },
          "56": {
            "source": "        var cartId = options.cartId || Hoek.reach(data, 'cart.create.res.result.cart.id');",
            "hits": 0,
            "miss": true
          },
          "57": {
            "source": "        var itemId = options.itemId || Hoek.reach(data, 'cart.item.addItem.res.result.items.0.id');",
            "hits": 0,
            "miss": true
          },
          "58": {
            "source": "        var defaults = {",
            "hits": 0,
            "miss": true
          },
          "59": {
            "source": "            method: 'PUT',",
            "miss": false
          },
          "60": {
            "source": "            url: '/cart/' + cartId + '/items/' + itemId",
            "miss": false
          },
          "61": {
            "source": "        };",
            "miss": false
          },
          "62": {
            "source": "",
            "miss": false
          },
          "63": {
            "source": "        options = Hoek.merge(defaults, options, true);",
            "hits": 0,
            "miss": true
          },
          "64": {
            "source": "        server.inject(options, function (res) {",
            "hits": 0,
            "miss": true
          },
          "65": {
            "source": "",
            "miss": false
          },
          "66": {
            "source": "            Tools.checkStatus(res, options.expectedStatus || 200);",
            "hits": 0,
            "miss": true
          },
          "67": {
            "source": "            data.cart.item.updateItem = { req: options, res: res };",
            "hits": 0,
            "miss": true
          },
          "68": {
            "source": "            return next(null, server, data);",
            "hits": 0,
            "miss": true
          },
          "69": {
            "source": "        });",
            "miss": false
          },
          "70": {
            "source": "    };",
            "miss": false
          },
          "71": {
            "source": "};",
            "miss": false
          },
          "72": {
            "source": "",
            "miss": false
          },
          "73": {
            "source": "",
            "miss": false
          },
          "74": {
            "source": "module.exports.deleteItem = function (options) {",
            "hits": 1,
            "miss": false
          },
          "75": {
            "source": "",
            "miss": false
          },
          "76": {
            "source": "    options = options || {};",
            "hits": 0,
            "miss": true
          },
          "77": {
            "source": "    return function (server, data, next) {",
            "hits": 0,
            "miss": true
          },
          "78": {
            "source": "",
            "miss": false
          },
          "79": {
            "source": "        var cartId = options.cartId || Hoek.reach(data, 'cart.create.res.result.cart.id');",
            "hits": 0,
            "miss": true
          },
          "80": {
            "source": "        var itemId = options.itemId || Hoek.reach(data, 'cart.item.addItem.res.result.items.0.id');",
            "hits": 0,
            "miss": true
          },
          "81": {
            "source": "        var defaults = {",
            "hits": 0,
            "miss": true
          },
          "82": {
            "source": "            method: 'DELETE',",
            "miss": false
          },
          "83": {
            "source": "            url: '/cart/' + cartId + '/items/' + itemId",
            "miss": false
          },
          "84": {
            "source": "        };",
            "miss": false
          },
          "85": {
            "source": "",
            "miss": false
          },
          "86": {
            "source": "        options = Hoek.merge(defaults, options, true);",
            "hits": 0,
            "miss": true
          },
          "87": {
            "source": "        server.inject(options, function (res) {",
            "hits": 0,
            "miss": true
          },
          "88": {
            "source": "",
            "miss": false
          },
          "89": {
            "source": "            Tools.checkStatus(res, options.expectedStatus || 200);",
            "hits": 0,
            "miss": true
          },
          "90": {
            "source": "            data.cart.item.deleteItem = { req: options, res: res };",
            "hits": 0,
            "miss": true
          },
          "91": {
            "source": "            return next(null, server, data);",
            "hits": 0,
            "miss": true
          },
          "92": {
            "source": "        });",
            "miss": false
          },
          "93": {
            "source": "    };",
            "miss": false
          },
          "94": {
            "source": "};",
            "miss": false
          },
          "95": {
            "source": "",
            "miss": false
          },
          "96": {
            "source": "",
            "miss": false
          },
          "97": {
            "source": "module.exports.deleteAllItems = function (options) {",
            "hits": 1,
            "miss": false
          },
          "98": {
            "source": "",
            "miss": false
          },
          "99": {
            "source": "    options = options || {};",
            "hits": 0,
            "miss": true
          },
          "100": {
            "source": "    return function (server, data, next) {",
            "hits": 0,
            "miss": true
          },
          "101": {
            "source": "",
            "miss": false
          },
          "102": {
            "source": "        var cartId = options.cartId || Hoek.reach(data, 'cart.create.res.result.cart.id');",
            "hits": 0,
            "miss": true
          },
          "103": {
            "source": "        var defaults = {",
            "hits": 0,
            "miss": true
          },
          "104": {
            "source": "            method: 'DELETE',",
            "miss": false
          },
          "105": {
            "source": "            url: '/cart/' + cartId + '/clear'",
            "miss": false
          },
          "106": {
            "source": "        };",
            "miss": false
          },
          "107": {
            "source": "",
            "miss": false
          },
          "108": {
            "source": "        options = Hoek.merge(defaults, options, true);",
            "hits": 0,
            "miss": true
          },
          "109": {
            "source": "        server.inject(options, function (res) {",
            "hits": 0,
            "miss": true
          },
          "110": {
            "source": "",
            "miss": false
          },
          "111": {
            "source": "            Tools.checkStatus(res, options.expectedStatus || 200);",
            "hits": 0,
            "miss": true
          },
          "112": {
            "source": "            data.cart.item.deleteAllItems = { req: options, res: res };",
            "hits": 0,
            "miss": true
          },
          "113": {
            "source": "            return next(null, server, data);",
            "hits": 0,
            "miss": true
          },
          "114": {
            "source": "        });",
            "miss": false
          },
          "115": {
            "source": "    };",
            "miss": false
          },
          "116": {
            "source": "};",
            "miss": false
          },
          "117": {
            "source": "",
            "miss": false
          },
          "118": {
            "source": "",
            "miss": false
          },
          "119": {
            "source": "exports.transferToSFL = function (options) {",
            "hits": 1,
            "miss": false
          },
          "120": {
            "source": "",
            "miss": false
          },
          "121": {
            "source": "    options = options || {};",
            "hits": 0,
            "miss": true
          },
          "122": {
            "source": "    return function (server, data, next) {",
            "hits": 0,
            "miss": true
          },
          "123": {
            "source": "",
            "miss": false
          },
          "124": {
            "source": "        var cartId = options.cartId || Hoek.reach(data, 'cart.create.res.result.cart.id');",
            "hits": 0,
            "miss": true
          },
          "125": {
            "source": "        var itemId = options.itemId ||",
            "hits": 0,
            "miss": true
          },
          "126": {
            "source": "            Hoek.reach(data, 'cart.item.addItem.res.result.items.0.id') ||",
            "miss": false
          },
          "127": {
            "source": "            Hoek.reach(data, 'cart.save.transferToCart.res.result.items.0.id');",
            "miss": false
          },
          "128": {
            "source": "",
            "miss": false
          },
          "129": {
            "source": "        var defaults = {",
            "hits": 0,
            "miss": true
          },
          "130": {
            "source": "            method: 'POST',",
            "miss": false
          },
          "131": {
            "source": "            url: '/cart/' + cartId + '/items/' + itemId + '/transfer'",
            "miss": false
          },
          "132": {
            "source": "        };",
            "miss": false
          },
          "133": {
            "source": "",
            "miss": false
          },
          "134": {
            "source": "        options = Hoek.merge(defaults, options, true);",
            "hits": 0,
            "miss": true
          },
          "135": {
            "source": "        server.inject(options, function (res) {",
            "hits": 0,
            "miss": true
          },
          "136": {
            "source": "",
            "miss": false
          },
          "137": {
            "source": "            Tools.checkStatus(res, options.expectedStatus || 200);",
            "hits": 0,
            "miss": true
          },
          "138": {
            "source": "            data.cart.item.transferToSFL = { req: options, res: res };",
            "hits": 0,
            "miss": true
          },
          "139": {
            "source": "            return next(null, server, data);",
            "hits": 0,
            "miss": true
          },
          "140": {
            "source": "        });",
            "miss": false
          },
          "141": {
            "source": "    };",
            "miss": false
          },
          "142": {
            "source": "};",
            "miss": false
          }
        }
      },
      {
        "filename": "lib/cart/sfl.js",
        "percent": 51.45631067961165,
        "hits": 53,
        "misses": 50,
        "sloc": 103,
        "source": {
          "1": {
            "source": "// Load Modules",
            "miss": false
          },
          "2": {
            "source": "",
            "miss": false
          },
          "3": {
            "source": "var Hoek = require('hoek');",
            "hits": 1,
            "miss": false
          },
          "4": {
            "source": "var Tools = require('../tools');",
            "hits": 1,
            "miss": false
          },
          "5": {
            "source": "",
            "miss": false
          },
          "6": {
            "source": "",
            "miss": false
          },
          "7": {
            "source": "module.exports.addToSFL = function (options) {",
            "hits": 1,
            "miss": false
          },
          "8": {
            "source": "",
            "miss": false
          },
          "9": {
            "source": "    options = options || {};",
            "hits": 0,
            "miss": true
          },
          "10": {
            "source": "    return function (server, data, next) {",
            "hits": 0,
            "miss": true
          },
          "11": {
            "source": "",
            "miss": false
          },
          "12": {
            "source": "        var customerId = options.customerId ||",
            "hits": 0,
            "miss": true
          },
          "13": {
            "source": "            Hoek.reach(data, 'customer.create.res.result.id') ||",
            "miss": false
          },
          "14": {
            "source": "            Hoek.reach(data, 'cart.create.res.result.cart.customerId');",
            "miss": false
          },
          "15": {
            "source": "",
            "miss": false
          },
          "16": {
            "source": "        var defaults = {",
            "hits": 0,
            "miss": true
          },
          "17": {
            "source": "            method: 'POST',",
            "miss": false
          },
          "18": {
            "source": "            url: '/saved/' + customerId + '/items',",
            "miss": false
          },
          "19": {
            "source": "            payload: {}",
            "miss": false
          },
          "20": {
            "source": "        };",
            "miss": false
          },
          "21": {
            "source": "",
            "miss": false
          },
          "22": {
            "source": "        options = Hoek.merge(defaults, options, true, false);",
            "hits": 0,
            "miss": true
          },
          "23": {
            "source": "        server.inject(options, function (res) {",
            "hits": 0,
            "miss": true
          },
          "24": {
            "source": "",
            "miss": false
          },
          "25": {
            "source": "            Tools.checkStatus(res, options.expectedStatus || 200);",
            "hits": 0,
            "miss": true
          },
          "26": {
            "source": "            data.cart.save.addToSFL = { req: options, res: res };",
            "hits": 0,
            "miss": true
          },
          "27": {
            "source": "            return next(null, server, data);",
            "hits": 0,
            "miss": true
          },
          "28": {
            "source": "        });",
            "miss": false
          },
          "29": {
            "source": "    };",
            "miss": false
          },
          "30": {
            "source": "};",
            "miss": false
          },
          "31": {
            "source": "",
            "miss": false
          },
          "32": {
            "source": "",
            "miss": false
          },
          "33": {
            "source": "module.exports.getSFL = function (options) {",
            "hits": 1,
            "miss": false
          },
          "34": {
            "source": "",
            "miss": false
          },
          "35": {
            "source": "    options = options || {};",
            "hits": 0,
            "miss": true
          },
          "36": {
            "source": "    return function (server, data, next) {",
            "hits": 0,
            "miss": true
          },
          "37": {
            "source": "",
            "miss": false
          },
          "38": {
            "source": "        var customerId = options.customerId ||",
            "hits": 0,
            "miss": true
          },
          "39": {
            "source": "            Hoek.reach(data, 'customer.create.res.result.id') ||",
            "miss": false
          },
          "40": {
            "source": "            Hoek.reach(data, 'cart.create.res.result.cart.customerId');",
            "miss": false
          },
          "41": {
            "source": "",
            "miss": false
          },
          "42": {
            "source": "        var defaults = {",
            "hits": 0,
            "miss": true
          },
          "43": {
            "source": "            method: 'GET',",
            "miss": false
          },
          "44": {
            "source": "            url: '/saved/' + customerId",
            "miss": false
          },
          "45": {
            "source": "        };",
            "miss": false
          },
          "46": {
            "source": "",
            "miss": false
          },
          "47": {
            "source": "        options = Hoek.merge(defaults, options, true);",
            "hits": 0,
            "miss": true
          },
          "48": {
            "source": "        server.inject(options, function (res) {",
            "hits": 0,
            "miss": true
          },
          "49": {
            "source": "",
            "miss": false
          },
          "50": {
            "source": "            Tools.checkStatus(res, options.expectedStatus || 200);",
            "hits": 0,
            "miss": true
          },
          "51": {
            "source": "            data.cart.save.getSFL = { req: options, res: res };",
            "hits": 0,
            "miss": true
          },
          "52": {
            "source": "            return next(null, server, data);",
            "hits": 0,
            "miss": true
          },
          "53": {
            "source": "        });",
            "miss": false
          },
          "54": {
            "source": "    };",
            "miss": false
          },
          "55": {
            "source": "};",
            "miss": false
          },
          "56": {
            "source": "",
            "miss": false
          },
          "57": {
            "source": "",
            "miss": false
          },
          "58": {
            "source": "module.exports.deleteFromSFL = function (options) {",
            "hits": 1,
            "miss": false
          },
          "59": {
            "source": "",
            "miss": false
          },
          "60": {
            "source": "    options = options || {};",
            "hits": 0,
            "miss": true
          },
          "61": {
            "source": "    return function (server, data, next) {",
            "hits": 0,
            "miss": true
          },
          "62": {
            "source": "",
            "miss": false
          },
          "63": {
            "source": "        var customerId = options.customerId ||",
            "hits": 0,
            "miss": true
          },
          "64": {
            "source": "            Hoek.reach(data, 'customer.create.res.result.id') ||",
            "miss": false
          },
          "65": {
            "source": "            Hoek.reach(data, 'cart.create.res.result.cart.customerId');",
            "miss": false
          },
          "66": {
            "source": "",
            "miss": false
          },
          "67": {
            "source": "        var itemId = options.itemId || Hoek.reach(data, 'cart.save.addToSFL.res.result.savedItems.0.id');",
            "hits": 0,
            "miss": true
          },
          "68": {
            "source": "",
            "miss": false
          },
          "69": {
            "source": "        var defaults = {",
            "hits": 0,
            "miss": true
          },
          "70": {
            "source": "            method: 'DELETE',",
            "miss": false
          },
          "71": {
            "source": "            url: '/saved/' + customerId + '/items/' + itemId",
            "miss": false
          },
          "72": {
            "source": "        };",
            "miss": false
          },
          "73": {
            "source": "",
            "miss": false
          },
          "74": {
            "source": "        options = Hoek.merge(defaults, options, true);",
            "hits": 0,
            "miss": true
          },
          "75": {
            "source": "        server.inject(options, function (res) {",
            "hits": 0,
            "miss": true
          },
          "76": {
            "source": "",
            "miss": false
          },
          "77": {
            "source": "            Tools.checkStatus(res, options.expectedStatus || 200);",
            "hits": 0,
            "miss": true
          },
          "78": {
            "source": "            data.cart.save.deleteFromSFL = { req: options, res: res };",
            "hits": 0,
            "miss": true
          },
          "79": {
            "source": "            return next(null, server, data);",
            "hits": 0,
            "miss": true
          },
          "80": {
            "source": "        });",
            "miss": false
          },
          "81": {
            "source": "    };",
            "miss": false
          },
          "82": {
            "source": "};",
            "miss": false
          },
          "83": {
            "source": "",
            "miss": false
          },
          "84": {
            "source": "",
            "miss": false
          },
          "85": {
            "source": "module.exports.deleteAllFromSFL = function (options) {",
            "hits": 1,
            "miss": false
          },
          "86": {
            "source": "",
            "miss": false
          },
          "87": {
            "source": "    options = options || {};",
            "hits": 0,
            "miss": true
          },
          "88": {
            "source": "    return function (server, data, next) {",
            "hits": 0,
            "miss": true
          },
          "89": {
            "source": "",
            "miss": false
          },
          "90": {
            "source": "        var customerId = options.customerId ||",
            "hits": 0,
            "miss": true
          },
          "91": {
            "source": "            Hoek.reach(data, 'customer.create.res.result.id') ||",
            "miss": false
          },
          "92": {
            "source": "            Hoek.reach(data, 'cart.create.res.result.cart.customerId');",
            "miss": false
          },
          "93": {
            "source": "",
            "miss": false
          },
          "94": {
            "source": "        var defaults = {",
            "hits": 0,
            "miss": true
          },
          "95": {
            "source": "            method: 'DELETE',",
            "miss": false
          },
          "96": {
            "source": "            url: '/saved/' + customerId + '/clear'",
            "miss": false
          },
          "97": {
            "source": "        };",
            "miss": false
          },
          "98": {
            "source": "",
            "miss": false
          },
          "99": {
            "source": "        options = Hoek.merge(defaults, options, true);",
            "hits": 0,
            "miss": true
          },
          "100": {
            "source": "        server.inject(options, function (res) {",
            "hits": 0,
            "miss": true
          },
          "101": {
            "source": "",
            "miss": false
          },
          "102": {
            "source": "            Tools.checkStatus(res, options.expectedStatus || 200);",
            "hits": 0,
            "miss": true
          },
          "103": {
            "source": "            data.cart.save.deleteAllFromSFL = { req: options, res: res };",
            "hits": 0,
            "miss": true
          },
          "104": {
            "source": "            return next(null, server, data);",
            "hits": 0,
            "miss": true
          },
          "105": {
            "source": "        });",
            "miss": false
          },
          "106": {
            "source": "    };",
            "miss": false
          },
          "107": {
            "source": "};",
            "miss": false
          },
          "108": {
            "source": "",
            "miss": false
          },
          "109": {
            "source": "",
            "miss": false
          },
          "110": {
            "source": "module.exports.transferToCart = function (options) {",
            "hits": 1,
            "miss": false
          },
          "111": {
            "source": "",
            "miss": false
          },
          "112": {
            "source": "    options = options || {};",
            "hits": 0,
            "miss": true
          },
          "113": {
            "source": "    return function (server, data, next) {",
            "hits": 0,
            "miss": true
          },
          "114": {
            "source": "",
            "miss": false
          },
          "115": {
            "source": "        var customerId = options.customerId ||",
            "hits": 0,
            "miss": true
          },
          "116": {
            "source": "            Hoek.reach(data, 'customer.create.res.result.id') ||",
            "miss": false
          },
          "117": {
            "source": "            Hoek.reach(data, 'cart.create.res.result.cart.customerId');",
            "miss": false
          },
          "118": {
            "source": "",
            "miss": false
          },
          "119": {
            "source": "        var itemId = options.itemId ||",
            "hits": 0,
            "miss": true
          },
          "120": {
            "source": "            Hoek.reach(data, 'cart.item.transferToSFL.res.result.savedItems.0.id') ||",
            "miss": false
          },
          "121": {
            "source": "            Hoek.reach(data, 'cart.save.addToSFL.res.result.savedItems.0.id');",
            "miss": false
          },
          "122": {
            "source": "",
            "miss": false
          },
          "123": {
            "source": "        var cartId = options.cartId || Hoek.reach(data, 'cart.create.res.result.cart.id');",
            "hits": 0,
            "miss": true
          },
          "124": {
            "source": "",
            "miss": false
          },
          "125": {
            "source": "        var defaults = {",
            "hits": 0,
            "miss": true
          },
          "126": {
            "source": "            method: 'POST',",
            "miss": false
          },
          "127": {
            "source": "            url: '/saved/' + customerId + '/items/' + itemId + '/transfer',",
            "miss": false
          },
          "128": {
            "source": "            payload: {}",
            "miss": false
          },
          "129": {
            "source": "        };",
            "miss": false
          },
          "130": {
            "source": "",
            "miss": false
          },
          "131": {
            "source": "        if (cartId) {",
            "hits": 0,
            "miss": true
          },
          "132": {
            "source": "            defaults.payload.cartId = cartId;",
            "hits": 0,
            "miss": true
          },
          "133": {
            "source": "        }",
            "miss": false
          },
          "134": {
            "source": "",
            "miss": false
          },
          "135": {
            "source": "        options = Hoek.merge(defaults, options, true);",
            "hits": 0,
            "miss": true
          },
          "136": {
            "source": "        server.inject(options, function (res) {",
            "hits": 0,
            "miss": true
          },
          "137": {
            "source": "",
            "miss": false
          },
          "138": {
            "source": "            Tools.checkStatus(res, options.expectedStatus || 200);",
            "hits": 0,
            "miss": true
          },
          "139": {
            "source": "            data.cart.save.transferToCart = { req: options, res: res };",
            "hits": 0,
            "miss": true
          },
          "140": {
            "source": "            return next(null, server, data);",
            "hits": 0,
            "miss": true
          },
          "141": {
            "source": "        });",
            "miss": false
          },
          "142": {
            "source": "    };",
            "miss": false
          },
          "143": {
            "source": "};",
            "miss": false
          }
        }
      },
      {
        "filename": "lib/cart/warranty.js",
        "percent": 48.38709677419355,
        "hits": 30,
        "misses": 32,
        "sloc": 62,
        "source": {
          "1": {
            "source": "// Load Modules",
            "miss": false
          },
          "2": {
            "source": "",
            "miss": false
          },
          "3": {
            "source": "var Hoek = require('hoek');",
            "hits": 1,
            "miss": false
          },
          "4": {
            "source": "var Tools = require('../tools');",
            "hits": 1,
            "miss": false
          },
          "5": {
            "source": "",
            "miss": false
          },
          "6": {
            "source": "",
            "miss": false
          },
          "7": {
            "source": "module.exports.addWarranty = function (options) {",
            "hits": 1,
            "miss": false
          },
          "8": {
            "source": "",
            "miss": false
          },
          "9": {
            "source": "    options = options || {};",
            "hits": 0,
            "miss": true
          },
          "10": {
            "source": "    return function (server, data, next) {",
            "hits": 0,
            "miss": true
          },
          "11": {
            "source": "",
            "miss": false
          },
          "12": {
            "source": "        var cartId = options.cartId || Hoek.reach(data, 'cart.create.res.result.cart.id');",
            "hits": 0,
            "miss": true
          },
          "13": {
            "source": "        var itemId = options.itemId || Hoek.reach(data, 'cart.item.addItem.res.result.items.0.id');",
            "hits": 0,
            "miss": true
          },
          "14": {
            "source": "",
            "miss": false
          },
          "15": {
            "source": "        var defaults = {",
            "hits": 0,
            "miss": true
          },
          "16": {
            "source": "            method: 'POST',",
            "miss": false
          },
          "17": {
            "source": "            url: '/cart/' + cartId + '/items/' + itemId + '/warranty',",
            "miss": false
          },
          "18": {
            "source": "            payload: {}",
            "miss": false
          },
          "19": {
            "source": "        };",
            "miss": false
          },
          "20": {
            "source": "",
            "miss": false
          },
          "21": {
            "source": "        options = Hoek.merge(defaults, options, true);",
            "hits": 0,
            "miss": true
          },
          "22": {
            "source": "        server.inject(options, function (res) {",
            "hits": 0,
            "miss": true
          },
          "23": {
            "source": "",
            "miss": false
          },
          "24": {
            "source": "            Tools.checkStatus(res, options.expectedStatus || 200);",
            "hits": 0,
            "miss": true
          },
          "25": {
            "source": "            data.cart.warranty.addWarranty = { req: options, res: res };",
            "hits": 0,
            "miss": true
          },
          "26": {
            "source": "            return next(null, server, data);",
            "hits": 0,
            "miss": true
          },
          "27": {
            "source": "        });",
            "miss": false
          },
          "28": {
            "source": "    };",
            "miss": false
          },
          "29": {
            "source": "};",
            "miss": false
          },
          "30": {
            "source": "",
            "miss": false
          },
          "31": {
            "source": "",
            "miss": false
          },
          "32": {
            "source": "module.exports.updateWarranty = function (options) {",
            "hits": 1,
            "miss": false
          },
          "33": {
            "source": "",
            "miss": false
          },
          "34": {
            "source": "    options = options || {};",
            "hits": 0,
            "miss": true
          },
          "35": {
            "source": "    return function (server, data, next) {",
            "hits": 0,
            "miss": true
          },
          "36": {
            "source": "",
            "miss": false
          },
          "37": {
            "source": "        var cartId = options.cartId || Hoek.reach(data, 'cart.create.res.result.cart.id');",
            "hits": 0,
            "miss": true
          },
          "38": {
            "source": "        var itemId = options.itemId || Hoek.reach(data, 'cart.item.addItem.res.result.items.0.id');",
            "hits": 0,
            "miss": true
          },
          "39": {
            "source": "",
            "miss": false
          },
          "40": {
            "source": "        var oldWarrantyId = options.oldWarrantyId ||",
            "hits": 0,
            "miss": true
          },
          "41": {
            "source": "            Hoek.reach(data, 'cart.warranty.addWarranty.res.result.items.0.warranty.id') ||",
            "miss": false
          },
          "42": {
            "source": "            Hoek.reach(data, 'cart.item.addItem.res.result.items.0.warranty.id');",
            "miss": false
          },
          "43": {
            "source": "",
            "miss": false
          },
          "44": {
            "source": "        var defaults = {",
            "hits": 0,
            "miss": true
          },
          "45": {
            "source": "            method: 'PUT',",
            "miss": false
          },
          "46": {
            "source": "            url: '/cart/' + cartId + '/items/' + itemId + '/warranty/' + oldWarrantyId,",
            "miss": false
          },
          "47": {
            "source": "            payload: {}",
            "miss": false
          },
          "48": {
            "source": "        };",
            "miss": false
          },
          "49": {
            "source": "",
            "miss": false
          },
          "50": {
            "source": "        options = Hoek.merge(defaults, options, true);",
            "hits": 0,
            "miss": true
          },
          "51": {
            "source": "        server.inject(options, function (res) {",
            "hits": 0,
            "miss": true
          },
          "52": {
            "source": "",
            "miss": false
          },
          "53": {
            "source": "            Tools.checkStatus(res, options.expectedStatus || 200);",
            "hits": 0,
            "miss": true
          },
          "54": {
            "source": "            data.cart.warranty.updateWarranty = { req: options, res: res };",
            "hits": 0,
            "miss": true
          },
          "55": {
            "source": "            return next(null, server, data);",
            "hits": 0,
            "miss": true
          },
          "56": {
            "source": "        });",
            "miss": false
          },
          "57": {
            "source": "    };",
            "miss": false
          },
          "58": {
            "source": "};",
            "miss": false
          },
          "59": {
            "source": "",
            "miss": false
          },
          "60": {
            "source": "",
            "miss": false
          },
          "61": {
            "source": "module.exports.deleteWarranty = function (options) {",
            "hits": 1,
            "miss": false
          },
          "62": {
            "source": "",
            "miss": false
          },
          "63": {
            "source": "    options = options || {};",
            "hits": 0,
            "miss": true
          },
          "64": {
            "source": "    return function (server, data, next) {",
            "hits": 0,
            "miss": true
          },
          "65": {
            "source": "",
            "miss": false
          },
          "66": {
            "source": "        var cartId = options.cartId || Hoek.reach(data, 'cart.create.res.result.cart.id');",
            "hits": 0,
            "miss": true
          },
          "67": {
            "source": "        var itemId = options.itemId || Hoek.reach(data, 'cart.item.addItem.res.result.items.0.id');",
            "hits": 0,
            "miss": true
          },
          "68": {
            "source": "",
            "miss": false
          },
          "69": {
            "source": "        var warrantyId = options.warrantyId ||",
            "hits": 0,
            "miss": true
          },
          "70": {
            "source": "            Hoek.reach(data, 'cart.warranty.addWarranty.res.result.items.0.warranty.id') ||",
            "miss": false
          },
          "71": {
            "source": "            Hoek.reach(data, 'cart.item.addItem.res.result.items.0.warranty.id');",
            "miss": false
          },
          "72": {
            "source": "",
            "miss": false
          },
          "73": {
            "source": "        var defaults = {",
            "hits": 0,
            "miss": true
          },
          "74": {
            "source": "            method: 'DELETE',",
            "miss": false
          },
          "75": {
            "source": "            url: '/cart/' + cartId + '/items/' + itemId + '/warranty/' + warrantyId",
            "miss": false
          },
          "76": {
            "source": "        };",
            "miss": false
          },
          "77": {
            "source": "",
            "miss": false
          },
          "78": {
            "source": "        options = Hoek.merge(defaults, options, true);",
            "hits": 0,
            "miss": true
          },
          "79": {
            "source": "        server.inject(options, function (res) {",
            "hits": 0,
            "miss": true
          },
          "80": {
            "source": "",
            "miss": false
          },
          "81": {
            "source": "            Tools.checkStatus(res, options.expectedStatus || 200);",
            "hits": 0,
            "miss": true
          },
          "82": {
            "source": "            data.cart.warranty.deleteWarranty = { req: options, res: res };",
            "hits": 0,
            "miss": true
          },
          "83": {
            "source": "            return next(null, server, data);",
            "hits": 0,
            "miss": true
          },
          "84": {
            "source": "        });",
            "miss": false
          },
          "85": {
            "source": "    };",
            "miss": false
          },
          "86": {
            "source": "};",
            "miss": false
          }
        }
      },
      {
        "filename": "lib/checkout/contract.js",
        "percent": 68.67862969004894,
        "hits": 421,
        "misses": 192,
        "sloc": 613,
        "source": {
          "1": {
            "source": "// Load modules",
            "miss": false
          },
          "2": {
            "source": "",
            "miss": false
          },
          "3": {
            "source": "var Async = require('async');",
            "hits": 1,
            "miss": false
          },
          "4": {
            "source": "var Boom = require('boom');",
            "hits": 1,
            "miss": false
          },
          "5": {
            "source": "var Hoek = require('hoek');",
            "hits": 1,
            "miss": false
          },
          "6": {
            "source": "var Payment = require('../payment');",
            "hits": 1,
            "miss": false
          },
          "7": {
            "source": "var Tools = require('../tools');",
            "hits": 1,
            "miss": false
          },
          "8": {
            "source": "",
            "miss": false
          },
          "9": {
            "source": "",
            "miss": false
          },
          "10": {
            "source": "module.exports.create = function (options) {",
            "hits": 1,
            "miss": false
          },
          "11": {
            "source": "",
            "miss": false
          },
          "12": {
            "source": "    return function (server, data, next) {",
            "hits": 0,
            "miss": true
          },
          "13": {
            "source": "",
            "miss": false
          },
          "14": {
            "source": "        var defaults = {",
            "hits": 0,
            "miss": true
          },
          "15": {
            "source": "            method: 'POST',",
            "miss": false
          },
          "16": {
            "source": "            url: '/checkout/contract',",
            "miss": false
          },
          "17": {
            "source": "            payload: {",
            "miss": false
          },
          "18": {
            "source": "                crt: Hoek.reach(data, 'cart.create.res.result.cart.id'),",
            "miss": false
          },
          "19": {
            "source": "                storeList: Tools.getStoreList()",
            "miss": false
          },
          "20": {
            "source": "            }",
            "miss": false
          },
          "21": {
            "source": "        };",
            "miss": false
          },
          "22": {
            "source": "",
            "miss": false
          },
          "23": {
            "source": "        options = Hoek.merge(defaults, options || {}, true);",
            "hits": 0,
            "miss": true
          },
          "24": {
            "source": "        server.inject(options, function (res) {",
            "hits": 0,
            "miss": true
          },
          "25": {
            "source": "",
            "miss": false
          },
          "26": {
            "source": "            var err = Tools.checkForError(res);",
            "hits": 0,
            "miss": true
          },
          "27": {
            "source": "",
            "miss": false
          },
          "28": {
            "source": "            data.checkout.contract.create = { err: err, req: options, res: res };",
            "hits": 0,
            "miss": true
          },
          "29": {
            "source": "            return next(err, server, data);",
            "hits": 0,
            "miss": true
          },
          "30": {
            "source": "        });",
            "miss": false
          },
          "31": {
            "source": "    };",
            "miss": false
          },
          "32": {
            "source": "};",
            "miss": false
          },
          "33": {
            "source": "",
            "miss": false
          },
          "34": {
            "source": "",
            "miss": false
          },
          "35": {
            "source": "module.exports.get = function (options) {",
            "hits": 1,
            "miss": false
          },
          "36": {
            "source": "",
            "miss": false
          },
          "37": {
            "source": "    return function (server, data, next) {",
            "hits": 0,
            "miss": true
          },
          "38": {
            "source": "",
            "miss": false
          },
          "39": {
            "source": "        var purchaseId = Hoek.reach(data, 'checkout.contract.create.res.result.id');",
            "hits": 0,
            "miss": true
          },
          "40": {
            "source": "",
            "miss": false
          },
          "41": {
            "source": "        var defaults = {",
            "hits": 0,
            "miss": true
          },
          "42": {
            "source": "            method: 'GET',",
            "miss": false
          },
          "43": {
            "source": "            url: '/checkout/contract/' + purchaseId + '?storeList=2280,100,5610'",
            "miss": false
          },
          "44": {
            "source": "        };",
            "miss": false
          },
          "45": {
            "source": "",
            "miss": false
          },
          "46": {
            "source": "        options = Hoek.merge(defaults, options || {}, true);",
            "hits": 0,
            "miss": true
          },
          "47": {
            "source": "        server.inject(options, function (res) {",
            "hits": 0,
            "miss": true
          },
          "48": {
            "source": "",
            "miss": false
          },
          "49": {
            "source": "            var err = Tools.checkForError(res);",
            "hits": 0,
            "miss": true
          },
          "50": {
            "source": "",
            "miss": false
          },
          "51": {
            "source": "            data.checkout.contract.get = { err: err, req: options, res: res };",
            "hits": 0,
            "miss": true
          },
          "52": {
            "source": "            return next(err, server, data);",
            "hits": 0,
            "miss": true
          },
          "53": {
            "source": "        });",
            "miss": false
          },
          "54": {
            "source": "    };",
            "miss": false
          },
          "55": {
            "source": "};",
            "miss": false
          },
          "56": {
            "source": "",
            "miss": false
          },
          "57": {
            "source": "",
            "miss": false
          },
          "58": {
            "source": "module.exports.updateBuyer = function (options) {",
            "hits": 1,
            "miss": false
          },
          "59": {
            "source": "",
            "miss": false
          },
          "60": {
            "source": "    return function (server, data, next) {",
            "hits": 0,
            "miss": true
          },
          "61": {
            "source": "",
            "miss": false
          },
          "62": {
            "source": "        var purchaseId = Hoek.reach(data, 'checkout.contract.create.res.result.id');",
            "hits": 0,
            "miss": true
          },
          "63": {
            "source": "        var customerAccountId = Hoek.reach(data, 'customer.create.res.result.id') ||",
            "hits": 0,
            "miss": true
          },
          "64": {
            "source": "                                Hoek.reach(data, 'customer.createAssociate.res.result.person.customerAccountId') ||",
            "miss": false
          },
          "65": {
            "source": "                                Hoek.reach(data, 'cart.create.res.result.cart.customerId');",
            "miss": false
          },
          "66": {
            "source": "",
            "miss": false
          },
          "67": {
            "source": "        var defaults = {",
            "hits": 0,
            "miss": true
          },
          "68": {
            "source": "            method: 'POST',",
            "miss": false
          },
          "69": {
            "source": "            url: '/checkout/contract/' + purchaseId + '/buyer',",
            "miss": false
          },
          "70": {
            "source": "            payload: {",
            "miss": false
          },
          "71": {
            "source": "                customerAccountId: customerAccountId,",
            "miss": false
          },
          "72": {
            "source": "                isGuest: !customerAccountId,",
            "miss": false
          },
          "73": {
            "source": "                storeList: Tools.getStoreList()",
            "miss": false
          },
          "74": {
            "source": "            }",
            "miss": false
          },
          "75": {
            "source": "        };",
            "miss": false
          },
          "76": {
            "source": "",
            "miss": false
          },
          "77": {
            "source": "        options = Hoek.merge(defaults, options || {}, true);",
            "hits": 0,
            "miss": true
          },
          "78": {
            "source": "        server.inject(options, function (res) {",
            "hits": 0,
            "miss": true
          },
          "79": {
            "source": "",
            "miss": false
          },
          "80": {
            "source": "            var err = Tools.checkForError(res);",
            "hits": 0,
            "miss": true
          },
          "81": {
            "source": "",
            "miss": false
          },
          "82": {
            "source": "            data.checkout.contract.updateBuyer = { err: err, req: options, res: res };",
            "hits": 0,
            "miss": true
          },
          "83": {
            "source": "            return next(err, server, data);",
            "hits": 0,
            "miss": true
          },
          "84": {
            "source": "        });",
            "miss": false
          },
          "85": {
            "source": "    };",
            "miss": false
          },
          "86": {
            "source": "};",
            "miss": false
          },
          "87": {
            "source": "",
            "miss": false
          },
          "88": {
            "source": "",
            "miss": false
          },
          "89": {
            "source": "module.exports.updateLocation = function (options) {",
            "hits": 1,
            "miss": false
          },
          "90": {
            "source": "",
            "miss": false
          },
          "91": {
            "source": "    return function (server, data, next) {",
            "hits": 0,
            "miss": true
          },
          "92": {
            "source": "",
            "miss": false
          },
          "93": {
            "source": "        var purchaseId = Hoek.reach(data, 'checkout.contract.create.res.result.id');",
            "hits": 0,
            "miss": true
          },
          "94": {
            "source": "",
            "miss": false
          },
          "95": {
            "source": "        var defaults = {",
            "hits": 0,
            "miss": true
          },
          "96": {
            "source": "            method: 'POST',",
            "miss": false
          },
          "97": {
            "source": "            url: '/checkout/contract/' + purchaseId + '/location',",
            "miss": false
          },
          "98": {
            "source": "            payload: {",
            "miss": false
          },
          "99": {
            "source": "                storeList: Tools.getStoreList()",
            "miss": false
          },
          "100": {
            "source": "            }",
            "miss": false
          },
          "101": {
            "source": "        };",
            "miss": false
          },
          "102": {
            "source": "",
            "miss": false
          },
          "103": {
            "source": "        options = Hoek.merge(defaults, options || {}, true);",
            "hits": 0,
            "miss": true
          },
          "104": {
            "source": "        server.inject(options, function (res) {",
            "hits": 0,
            "miss": true
          },
          "105": {
            "source": "",
            "miss": false
          },
          "106": {
            "source": "            var err = Tools.checkForError(res);",
            "hits": 0,
            "miss": true
          },
          "107": {
            "source": "",
            "miss": false
          },
          "108": {
            "source": "            data.checkout.contract.updateLocation = { err: err, req: options, res: res };",
            "hits": 0,
            "miss": true
          },
          "109": {
            "source": "            return next(err, server, data);",
            "hits": 0,
            "miss": true
          },
          "110": {
            "source": "        });",
            "miss": false
          },
          "111": {
            "source": "    };",
            "miss": false
          },
          "112": {
            "source": "};",
            "miss": false
          },
          "113": {
            "source": "",
            "miss": false
          },
          "114": {
            "source": "",
            "miss": false
          },
          "115": {
            "source": "module.exports.initiatePaypal = function (options) {",
            "hits": 1,
            "miss": false
          },
          "116": {
            "source": "",
            "miss": false
          },
          "117": {
            "source": "    return function (server, data, next) {",
            "hits": 0,
            "miss": true
          },
          "118": {
            "source": "",
            "miss": false
          },
          "119": {
            "source": "        var purchaseId = Hoek.reach(data, 'checkout.contract.create.res.result.id');",
            "hits": 0,
            "miss": true
          },
          "120": {
            "source": "",
            "miss": false
          },
          "121": {
            "source": "        var defaults = {",
            "hits": 0,
            "miss": true
          },
          "122": {
            "source": "            method: 'POST',",
            "miss": false
          },
          "123": {
            "source": "            url: '/checkout/contract/' + purchaseId + '/initiate-paypal',",
            "miss": false
          },
          "124": {
            "source": "            payload: {",
            "miss": false
          },
          "125": {
            "source": "                returnUrl: 'http://www.walmart.com',",
            "miss": false
          },
          "126": {
            "source": "                cancelUrl: 'http://www.walmart.com'",
            "miss": false
          },
          "127": {
            "source": "            }",
            "miss": false
          },
          "128": {
            "source": "        };",
            "miss": false
          },
          "129": {
            "source": "",
            "miss": false
          },
          "130": {
            "source": "        options = Hoek.merge(defaults, options || {}, true);",
            "hits": 0,
            "miss": true
          },
          "131": {
            "source": "        server.inject(options, function (res) {",
            "hits": 0,
            "miss": true
          },
          "132": {
            "source": "",
            "miss": false
          },
          "133": {
            "source": "            var err = Tools.checkForError(res);",
            "hits": 0,
            "miss": true
          },
          "134": {
            "source": "",
            "miss": false
          },
          "135": {
            "source": "            data.checkout.contract.initiatePaypal = { err: err, req: options, res: res };",
            "hits": 0,
            "miss": true
          },
          "136": {
            "source": "            return next(err, server, data);",
            "hits": 0,
            "miss": true
          },
          "137": {
            "source": "        });",
            "miss": false
          },
          "138": {
            "source": "    };",
            "miss": false
          },
          "139": {
            "source": "};",
            "miss": false
          },
          "140": {
            "source": "",
            "miss": false
          },
          "141": {
            "source": "",
            "miss": false
          },
          "142": {
            "source": "module.exports.updateShippingAddress = function (options) {",
            "hits": 1,
            "miss": false
          },
          "143": {
            "source": "",
            "miss": false
          },
          "144": {
            "source": "    return function (server, data, next) {",
            "hits": 0,
            "miss": true
          },
          "145": {
            "source": "",
            "miss": false
          },
          "146": {
            "source": "        var purchaseId = Hoek.reach(data, 'checkout.contract.create.res.result.id');",
            "hits": 0,
            "miss": true
          },
          "147": {
            "source": "",
            "miss": false
          },
          "148": {
            "source": "        var defaults = {",
            "hits": 0,
            "miss": true
          },
          "149": {
            "source": "            method: 'POST',",
            "miss": false
          },
          "150": {
            "source": "            url: '/checkout/contract/' + purchaseId + '/shipping-address',",
            "miss": false
          },
          "151": {
            "source": "            payload: {",
            "miss": false
          },
          "152": {
            "source": "                firstName: 'Light',",
            "miss": false
          },
          "153": {
            "source": "                lastName: 'Yagami',",
            "miss": false
          },
          "154": {
            "source": "                addressLineOne: '850 Cherry Avenue',",
            "miss": false
          },
          "155": {
            "source": "                postalCode: '94066',",
            "miss": false
          },
          "156": {
            "source": "                storeList: Tools.getStoreList()",
            "miss": false
          },
          "157": {
            "source": "            }",
            "miss": false
          },
          "158": {
            "source": "        };",
            "miss": false
          },
          "159": {
            "source": "",
            "miss": false
          },
          "160": {
            "source": "        // Set registry id, type, and addressId as defaults if they exist",
            "miss": false
          },
          "161": {
            "source": "        var registry = Hoek.reach(data, 'lists.create.res.result');",
            "hits": 0,
            "miss": true
          },
          "162": {
            "source": "        if (registry) {",
            "hits": 0,
            "miss": true
          },
          "163": {
            "source": "            defaults.payload = {",
            "hits": 0,
            "miss": true
          },
          "164": {
            "source": "                registry: {",
            "miss": false
          },
          "165": {
            "source": "                    id: registry.id,",
            "miss": false
          },
          "166": {
            "source": "                    type: registry.type",
            "miss": false
          },
          "167": {
            "source": "                }",
            "miss": false
          },
          "168": {
            "source": "            };",
            "miss": false
          },
          "169": {
            "source": "        }",
            "miss": false
          },
          "170": {
            "source": "",
            "miss": false
          },
          "171": {
            "source": "        options = Hoek.merge(defaults, options || {}, true);",
            "hits": 0,
            "miss": true
          },
          "172": {
            "source": "        server.inject(options, function (res) {",
            "hits": 0,
            "miss": true
          },
          "173": {
            "source": "",
            "miss": false
          },
          "174": {
            "source": "            var err = Tools.checkForError(res);",
            "hits": 0,
            "miss": true
          },
          "175": {
            "source": "",
            "miss": false
          },
          "176": {
            "source": "            data.checkout.contract.updateShippingAddress = { err: err, req: options, res: res };",
            "hits": 0,
            "miss": true
          },
          "177": {
            "source": "            return next(err, server, data);",
            "hits": 0,
            "miss": true
          },
          "178": {
            "source": "        });",
            "miss": false
          },
          "179": {
            "source": "    };",
            "miss": false
          },
          "180": {
            "source": "};",
            "miss": false
          },
          "181": {
            "source": "",
            "miss": false
          },
          "182": {
            "source": "",
            "miss": false
          },
          "183": {
            "source": "module.exports.updateFulfillment = function (type, options) {",
            "hits": 1,
            "miss": false
          },
          "184": {
            "source": "",
            "miss": false
          },
          "185": {
            "source": "    return function (server, data, next) {",
            "hits": 0,
            "miss": true
          },
          "186": {
            "source": "",
            "miss": false
          },
          "187": {
            "source": "        if (type === 'FREIGHT') {",
            "hits": 0,
            "miss": true
          },
          "188": {
            "source": "            return next(null, server, data);",
            "hits": 0,
            "miss": true
          },
          "189": {
            "source": "        }",
            "miss": false
          },
          "190": {
            "source": "",
            "miss": false
          },
          "191": {
            "source": "        var purchaseId = Hoek.reach(data, 'checkout.contract.create.res.result.id');",
            "hits": 0,
            "miss": true
          },
          "192": {
            "source": "        var itemIds = [];",
            "hits": 0,
            "miss": true
          },
          "193": {
            "source": "        var contractItems = Hoek.reach(data, 'checkout.contract.create.res.result.items');",
            "hits": 0,
            "miss": true
          },
          "194": {
            "source": "        for (var i = 0, il = contractItems.length; i < il; i++) {",
            "hits": 0,
            "miss": true
          },
          "195": {
            "source": "            var item = contractItems[i];",
            "hits": 0,
            "miss": true
          },
          "196": {
            "source": "            itemIds[i] = item.id;",
            "hits": 0,
            "miss": true
          },
          "197": {
            "source": "        }",
            "miss": false
          },
          "198": {
            "source": "",
            "miss": false
          },
          "199": {
            "source": "        var defaults = {",
            "hits": 0,
            "miss": true
          },
          "200": {
            "source": "            method: 'POST',",
            "miss": false
          },
          "201": {
            "source": "            url: '/checkout/contract/' + purchaseId + '/fulfillment',",
            "miss": false
          },
          "202": {
            "source": "            payload: {",
            "miss": false
          },
          "203": {
            "source": "                storeList: Tools.getStoreList()",
            "miss": false
          },
          "204": {
            "source": "            }",
            "miss": false
          },
          "205": {
            "source": "        };",
            "miss": false
          },
          "206": {
            "source": "",
            "miss": false
          },
          "207": {
            "source": "        if (type === 'S2H') {",
            "hits": 0,
            "miss": true
          },
          "208": {
            "source": "            defaults.payload = {",
            "hits": 0,
            "miss": true
          },
          "209": {
            "source": "                groups: [",
            "miss": false
          },
          "210": {
            "source": "                    {",
            "miss": false
          },
          "211": {
            "source": "                        fulfillmentOption: 'S2H',",
            "miss": false
          },
          "212": {
            "source": "                        shipMethod: 'STANDARD',",
            "miss": false
          },
          "213": {
            "source": "                        itemIds: itemIds",
            "miss": false
          },
          "214": {
            "source": "                    }",
            "miss": false
          },
          "215": {
            "source": "                ],",
            "miss": false
          },
          "216": {
            "source": "                storeList: Tools.getStoreList()",
            "miss": false
          },
          "217": {
            "source": "            };",
            "miss": false
          },
          "218": {
            "source": "        }",
            "miss": false
          },
          "219": {
            "source": "",
            "miss": false
          },
          "220": {
            "source": "        if (type === 'S2H-VALUE') {",
            "hits": 0,
            "miss": true
          },
          "221": {
            "source": "            defaults.payload = {",
            "hits": 0,
            "miss": true
          },
          "222": {
            "source": "                groups: [",
            "miss": false
          },
          "223": {
            "source": "                    {",
            "miss": false
          },
          "224": {
            "source": "                        fulfillmentOption: 'S2H',",
            "miss": false
          },
          "225": {
            "source": "                        shipMethod: 'VALUE',",
            "miss": false
          },
          "226": {
            "source": "                        itemIds: itemIds",
            "miss": false
          },
          "227": {
            "source": "                    }",
            "miss": false
          },
          "228": {
            "source": "                ],",
            "miss": false
          },
          "229": {
            "source": "                storeList: Tools.getStoreList()",
            "miss": false
          },
          "230": {
            "source": "            };",
            "miss": false
          },
          "231": {
            "source": "        }",
            "miss": false
          },
          "232": {
            "source": "",
            "miss": false
          },
          "233": {
            "source": "        if (type === 'ELECTRONIC') {",
            "hits": 0,
            "miss": true
          },
          "234": {
            "source": "            defaults.payload = {",
            "hits": 0,
            "miss": true
          },
          "235": {
            "source": "                groups: [",
            "miss": false
          },
          "236": {
            "source": "                    {",
            "miss": false
          },
          "237": {
            "source": "                        fulfillmentOption: 'ELECTRONIC',",
            "miss": false
          },
          "238": {
            "source": "                        shipMethod: 'ELECTRONIC_DELIVERY',",
            "miss": false
          },
          "239": {
            "source": "                        itemIds: itemIds",
            "miss": false
          },
          "240": {
            "source": "                    }",
            "miss": false
          },
          "241": {
            "source": "                ],",
            "miss": false
          },
          "242": {
            "source": "                storeList: Tools.getStoreList()",
            "miss": false
          },
          "243": {
            "source": "            };",
            "miss": false
          },
          "244": {
            "source": "        }",
            "miss": false
          },
          "245": {
            "source": "",
            "miss": false
          },
          "246": {
            "source": "        if (type === 'S2S') {",
            "hits": 0,
            "miss": true
          },
          "247": {
            "source": "            defaults.payload = {",
            "hits": 0,
            "miss": true
          },
          "248": {
            "source": "                groups: [",
            "miss": false
          },
          "249": {
            "source": "                    {",
            "miss": false
          },
          "250": {
            "source": "                        fulfillmentOption: 'S2S',",
            "miss": false
          },
          "251": {
            "source": "                        shipMethod: 'STORE_DELIVERY',",
            "miss": false
          },
          "252": {
            "source": "                        itemIds: itemIds,",
            "miss": false
          },
          "253": {
            "source": "                        storeId: 2280",
            "miss": false
          },
          "254": {
            "source": "                    }",
            "miss": false
          },
          "255": {
            "source": "                ],",
            "miss": false
          },
          "256": {
            "source": "                storeList: Tools.getStoreList()",
            "miss": false
          },
          "257": {
            "source": "            };",
            "miss": false
          },
          "258": {
            "source": "        }",
            "miss": false
          },
          "259": {
            "source": "",
            "miss": false
          },
          "260": {
            "source": "        if (type === 'PUT') {",
            "hits": 0,
            "miss": true
          },
          "261": {
            "source": "            defaults.payload = {",
            "hits": 0,
            "miss": true
          },
          "262": {
            "source": "                groups: [",
            "miss": false
          },
          "263": {
            "source": "                    {",
            "miss": false
          },
          "264": {
            "source": "                        fulfillmentOption: 'PUT',",
            "miss": false
          },
          "265": {
            "source": "                        shipMethod: 'PICKUP_TODAY',",
            "miss": false
          },
          "266": {
            "source": "                        itemIds: itemIds,",
            "miss": false
          },
          "267": {
            "source": "                        storeId: 2280",
            "miss": false
          },
          "268": {
            "source": "                    }",
            "miss": false
          },
          "269": {
            "source": "                ],",
            "miss": false
          },
          "270": {
            "source": "                storeList: Tools.getStoreList()",
            "miss": false
          },
          "271": {
            "source": "            };",
            "miss": false
          },
          "272": {
            "source": "        }",
            "miss": false
          },
          "273": {
            "source": "",
            "miss": false
          },
          "274": {
            "source": "        if (type === 'S2H_S2S') {",
            "hits": 0,
            "miss": true
          },
          "275": {
            "source": "            defaults.payload = {",
            "hits": 0,
            "miss": true
          },
          "276": {
            "source": "                groups: [",
            "miss": false
          },
          "277": {
            "source": "                    {",
            "miss": false
          },
          "278": {
            "source": "                        fulfillmentOption: 'S2H',",
            "miss": false
          },
          "279": {
            "source": "                        shipMethod: 'STANDARD',",
            "miss": false
          },
          "280": {
            "source": "                        itemIds: itemIds",
            "miss": false
          },
          "281": {
            "source": "                    },",
            "miss": false
          },
          "282": {
            "source": "                    {",
            "miss": false
          },
          "283": {
            "source": "                        fulfillmentOption: 'S2S',",
            "miss": false
          },
          "284": {
            "source": "                        shipMethod: 'STORE_DELIVERY',",
            "miss": false
          },
          "285": {
            "source": "                        itemIds: itemIds,",
            "miss": false
          },
          "286": {
            "source": "                        storeId: 2280",
            "miss": false
          },
          "287": {
            "source": "                    }",
            "miss": false
          },
          "288": {
            "source": "                ],",
            "miss": false
          },
          "289": {
            "source": "                storeList: Tools.getStoreList()",
            "miss": false
          },
          "290": {
            "source": "            };",
            "miss": false
          },
          "291": {
            "source": "        }",
            "miss": false
          },
          "292": {
            "source": "",
            "miss": false
          },
          "293": {
            "source": "        if (type === 'MIXED') {",
            "hits": 0,
            "miss": true
          },
          "294": {
            "source": "            defaults.payload = {",
            "hits": 0,
            "miss": true
          },
          "295": {
            "source": "                groups: [",
            "miss": false
          },
          "296": {
            "source": "                    {",
            "miss": false
          },
          "297": {
            "source": "                        fulfillmentOption: 'S2H',",
            "miss": false
          },
          "298": {
            "source": "                        shipMethod: 'MIXED_DELIVERY',",
            "miss": false
          },
          "299": {
            "source": "                        itemIds: itemIds",
            "miss": false
          },
          "300": {
            "source": "                    }",
            "miss": false
          },
          "301": {
            "source": "                ],",
            "miss": false
          },
          "302": {
            "source": "                storeList: Tools.getStoreList()",
            "miss": false
          },
          "303": {
            "source": "            };",
            "miss": false
          },
          "304": {
            "source": "        }",
            "miss": false
          },
          "305": {
            "source": "",
            "miss": false
          },
          "306": {
            "source": "        options = Hoek.merge(defaults, options || {}, true);",
            "hits": 0,
            "miss": true
          },
          "307": {
            "source": "        server.inject(options, function (res) {",
            "hits": 0,
            "miss": true
          },
          "308": {
            "source": "",
            "miss": false
          },
          "309": {
            "source": "            var err = Tools.checkForError(res);",
            "hits": 0,
            "miss": true
          },
          "310": {
            "source": "",
            "miss": false
          },
          "311": {
            "source": "            data.checkout.contract.updateFulfillment = { err: err, req: options, res: res };",
            "hits": 0,
            "miss": true
          },
          "312": {
            "source": "            return next(err, server, data);",
            "hits": 0,
            "miss": true
          },
          "313": {
            "source": "        });",
            "miss": false
          },
          "314": {
            "source": "    };",
            "miss": false
          },
          "315": {
            "source": "};",
            "miss": false
          },
          "316": {
            "source": "",
            "miss": false
          },
          "317": {
            "source": "",
            "miss": false
          },
          "318": {
            "source": "module.exports.updatePayment = function (type, options) {",
            "hits": 1,
            "miss": false
          },
          "319": {
            "source": "",
            "miss": false
          },
          "320": {
            "source": "    return function (server, data, next) {",
            "hits": 0,
            "miss": true
          },
          "321": {
            "source": "",
            "miss": false
          },
          "322": {
            "source": "        var purchaseId = Hoek.reach(data, 'checkout.contract.create.res.result.id');",
            "hits": 0,
            "miss": true
          },
          "323": {
            "source": "        var giftCardsToBeChecked = [];",
            "hits": 0,
            "miss": true
          },
          "324": {
            "source": "",
            "miss": false
          },
          "325": {
            "source": "        var defaults = {",
            "hits": 0,
            "miss": true
          },
          "326": {
            "source": "            method: 'POST',",
            "miss": false
          },
          "327": {
            "source": "            url: '/checkout/contract/' + purchaseId + '/payment',",
            "miss": false
          },
          "328": {
            "source": "            payload: {",
            "miss": false
          },
          "329": {
            "source": "                payments: [],",
            "miss": false
          },
          "330": {
            "source": "                storeList: Tools.getStoreList()",
            "miss": false
          },
          "331": {
            "source": "            }",
            "miss": false
          },
          "332": {
            "source": "        };",
            "miss": false
          },
          "333": {
            "source": "",
            "miss": false
          },
          "334": {
            "source": "        var getTotal = function () {",
            "hits": 0,
            "miss": true
          },
          "335": {
            "source": "",
            "miss": false
          },
          "336": {
            "source": "            var getContract = module.exports.get();",
            "hits": 0,
            "miss": true
          },
          "337": {
            "source": "            getContract(server, data, function (err, server, data) {",
            "hits": 0,
            "miss": true
          },
          "338": {
            "source": "",
            "miss": false
          },
          "339": {
            "source": "                setDefaults(data.checkout.contract.get.res.result.summary.grandTotal);",
            "hits": 0,
            "miss": true
          },
          "340": {
            "source": "            });",
            "miss": false
          },
          "341": {
            "source": "        };",
            "miss": false
          },
          "342": {
            "source": "",
            "miss": false
          },
          "343": {
            "source": "        var pushGiftCards = function (payments, howMany, duplicate) {",
            "hits": 0,
            "miss": true
          },
          "344": {
            "source": "",
            "miss": false
          },
          "345": {
            "source": "            var giftCards = getGiftCards(howMany);",
            "hits": 0,
            "miss": true
          },
          "346": {
            "source": "            giftCards.map(function (giftCard) {",
            "hits": 0,
            "miss": true
          },
          "347": {
            "source": "",
            "miss": false
          },
          "348": {
            "source": "                payments.push({",
            "hits": 0,
            "miss": true
          },
          "349": {
            "source": "                    paymentType: 'GIFTCARD',",
            "miss": false
          },
          "350": {
            "source": "                    number: giftCard.account,",
            "miss": false
          },
          "351": {
            "source": "                    pin: giftCard.pin,",
            "miss": false
          },
          "352": {
            "source": "                    firstName: 'Tom',",
            "miss": false
          },
          "353": {
            "source": "                    lastName: 'Smith'",
            "miss": false
          },
          "354": {
            "source": "                });",
            "miss": false
          },
          "355": {
            "source": "",
            "miss": false
          },
          "356": {
            "source": "                if (duplicate) {",
            "hits": 0,
            "miss": true
          },
          "357": {
            "source": "                    payments.push({",
            "hits": 0,
            "miss": true
          },
          "358": {
            "source": "                        paymentType: 'GIFTCARD',",
            "miss": false
          },
          "359": {
            "source": "                        number: giftCard.account,",
            "miss": false
          },
          "360": {
            "source": "                        pin: giftCard.pin,",
            "miss": false
          },
          "361": {
            "source": "                        firstName: 'Tom',",
            "miss": false
          },
          "362": {
            "source": "                        lastName: 'Smith'",
            "miss": false
          },
          "363": {
            "source": "                    });",
            "miss": false
          },
          "364": {
            "source": "                }",
            "miss": false
          },
          "365": {
            "source": "            });",
            "miss": false
          },
          "366": {
            "source": "        };",
            "miss": false
          },
          "367": {
            "source": "",
            "miss": false
          },
          "368": {
            "source": "        var getGiftCards = function (howMany) {",
            "hits": 0,
            "miss": true
          },
          "369": {
            "source": "",
            "miss": false
          },
          "370": {
            "source": "            var giftCards = [];",
            "hits": 0,
            "miss": true
          },
          "371": {
            "source": "            var il = howMany || 1;",
            "hits": 0,
            "miss": true
          },
          "372": {
            "source": "",
            "miss": false
          },
          "373": {
            "source": "            for (var i = 0; i < il; ++i) {",
            "hits": 0,
            "miss": true
          },
          "374": {
            "source": "                var gc = Payment.getStaticGiftCard();",
            "hits": 0,
            "miss": true
          },
          "375": {
            "source": "",
            "miss": false
          },
          "376": {
            "source": "                giftCards.push(gc);",
            "hits": 0,
            "miss": true
          },
          "377": {
            "source": "                giftCardsToBeChecked.push(gc);",
            "hits": 0,
            "miss": true
          },
          "378": {
            "source": "            }",
            "miss": false
          },
          "379": {
            "source": "",
            "miss": false
          },
          "380": {
            "source": "            return giftCards;",
            "hits": 0,
            "miss": true
          },
          "381": {
            "source": "        };",
            "miss": false
          },
          "382": {
            "source": "",
            "miss": false
          },
          "383": {
            "source": "        var setDefaults = function (grandTotal) {",
            "hits": 0,
            "miss": true
          },
          "384": {
            "source": "",
            "miss": false
          },
          "385": {
            "source": "            defaults.payload.email = 'tom@smith.com';",
            "hits": 0,
            "miss": true
          },
          "386": {
            "source": "",
            "miss": false
          },
          "387": {
            "source": "            if (type === 'CREDITCARD') {",
            "hits": 0,
            "miss": true
          },
          "388": {
            "source": "                defaults.payload.payments.push({",
            "hits": 0,
            "miss": true
          },
          "389": {
            "source": "                    paymentType: 'CREDITCARD',",
            "miss": false
          },
          "390": {
            "source": "                    cardType: 'VISA',",
            "miss": false
          },
          "391": {
            "source": "                    number: '4716118355162725',",
            "miss": false
          },
          "392": {
            "source": "                    cvv: '033',",
            "miss": false
          },
          "393": {
            "source": "                    expiryMonth: 12,",
            "miss": false
          },
          "394": {
            "source": "                    expiryYear: 2014,",
            "miss": false
          },
          "395": {
            "source": "                    firstName: 'Tom',",
            "miss": false
          },
          "396": {
            "source": "                    lastName: 'Smith',",
            "miss": false
          },
          "397": {
            "source": "                    addressLineOne: '303 Hillside Terrace',",
            "miss": false
          },
          "398": {
            "source": "                    addressLineTwo: '',",
            "miss": false
          },
          "399": {
            "source": "                    postalCode: '07860'",
            "miss": false
          },
          "400": {
            "source": "                });",
            "miss": false
          },
          "401": {
            "source": "            }",
            "miss": false
          },
          "402": {
            "source": "",
            "miss": false
          },
          "403": {
            "source": "            if (type === 'CREDITCARD-SINGLE-DIGIT-MONTH') {",
            "hits": 0,
            "miss": true
          },
          "404": {
            "source": "                defaults.payload.payments.push({",
            "hits": 0,
            "miss": true
          },
          "405": {
            "source": "                    paymentType: 'CREDITCARD',",
            "miss": false
          },
          "406": {
            "source": "                    cardType: 'VISA',",
            "miss": false
          },
          "407": {
            "source": "                    number: '4716118355162725',",
            "miss": false
          },
          "408": {
            "source": "                    cvv: '033',",
            "miss": false
          },
          "409": {
            "source": "                    expiryMonth: 3,",
            "miss": false
          },
          "410": {
            "source": "                    expiryYear: 2016,",
            "miss": false
          },
          "411": {
            "source": "                    firstName: 'Tom',",
            "miss": false
          },
          "412": {
            "source": "                    lastName: 'Smith',",
            "miss": false
          },
          "413": {
            "source": "                    addressLineOne: '303 Hillside Terrace',",
            "miss": false
          },
          "414": {
            "source": "                    addressLineTwo: '',",
            "miss": false
          },
          "415": {
            "source": "                    postalCode: '07860'",
            "miss": false
          },
          "416": {
            "source": "                });",
            "miss": false
          },
          "417": {
            "source": "            }",
            "miss": false
          },
          "418": {
            "source": "",
            "miss": false
          },
          "419": {
            "source": "            if (type === 'CREDITCARD-BAD-CVV') {",
            "hits": 0,
            "miss": true
          },
          "420": {
            "source": "                defaults.payload.payments.push({",
            "hits": 0,
            "miss": true
          },
          "421": {
            "source": "                    paymentType: 'CREDITCARD',",
            "miss": false
          },
          "422": {
            "source": "                    cardType: 'VISA',",
            "miss": false
          },
          "423": {
            "source": "                    number: '4716118355162725',",
            "miss": false
          },
          "424": {
            "source": "                    cvv: '1234',",
            "miss": false
          },
          "425": {
            "source": "                    expiryMonth: 12,",
            "miss": false
          },
          "426": {
            "source": "                    expiryYear: 2014,",
            "miss": false
          },
          "427": {
            "source": "                    firstName: 'Tom',",
            "miss": false
          },
          "428": {
            "source": "                    lastName: 'Smith',",
            "miss": false
          },
          "429": {
            "source": "                    addressLineOne: '303 Hillside Terrace',",
            "miss": false
          },
          "430": {
            "source": "                    addressLineTwo: '',",
            "miss": false
          },
          "431": {
            "source": "                    postalCode: '07860'",
            "miss": false
          },
          "432": {
            "source": "                });",
            "miss": false
          },
          "433": {
            "source": "            }",
            "miss": false
          },
          "434": {
            "source": "",
            "miss": false
          },
          "435": {
            "source": "            if (type === 'CREDITCARD-NOEMAIL') {",
            "hits": 0,
            "miss": true
          },
          "436": {
            "source": "",
            "miss": false
          },
          "437": {
            "source": "                delete defaults.payload.email;",
            "hits": 0,
            "miss": true
          },
          "438": {
            "source": "",
            "miss": false
          },
          "439": {
            "source": "                defaults.payload.payments.push({",
            "hits": 0,
            "miss": true
          },
          "440": {
            "source": "                    paymentType: 'CREDITCARD',",
            "miss": false
          },
          "441": {
            "source": "                    cardType: 'VISA',",
            "miss": false
          },
          "442": {
            "source": "                    number: '4716118355162725',",
            "miss": false
          },
          "443": {
            "source": "                    cvv: '033',",
            "miss": false
          },
          "444": {
            "source": "                    expiryMonth: 12,",
            "miss": false
          },
          "445": {
            "source": "                    expiryYear: 2014,",
            "miss": false
          },
          "446": {
            "source": "                    firstName: 'Tom',",
            "miss": false
          },
          "447": {
            "source": "                    lastName: 'Smith',",
            "miss": false
          },
          "448": {
            "source": "                    addressLineOne: '303 Hillside Terrace',",
            "miss": false
          },
          "449": {
            "source": "                    addressLineTwo: '',",
            "miss": false
          },
          "450": {
            "source": "                    postalCode: '07860'",
            "miss": false
          },
          "451": {
            "source": "                });",
            "miss": false
          },
          "452": {
            "source": "            }",
            "miss": false
          },
          "453": {
            "source": "",
            "miss": false
          },
          "454": {
            "source": "            if (type === 'SAVED-CARD') {",
            "hits": 0,
            "miss": true
          },
          "455": {
            "source": "                defaults.payload.payments.push({",
            "hits": 0,
            "miss": true
          },
          "456": {
            "source": "                    preferenceId: data.customer.creditCard.create.res.result.id",
            "miss": false
          },
          "457": {
            "source": "                });",
            "miss": false
          },
          "458": {
            "source": "            }",
            "miss": false
          },
          "459": {
            "source": "",
            "miss": false
          },
          "460": {
            "source": "            if (type === 'SAVED-CARD-W-INVALID-CVV-IN-PAYLOAD') {",
            "hits": 0,
            "miss": true
          },
          "461": {
            "source": "                defaults.payload.payments.push({",
            "hits": 0,
            "miss": true
          },
          "462": {
            "source": "                    preferenceId: data.customer.creditCard.create.res.result.id,",
            "miss": false
          },
          "463": {
            "source": "                    cvv: '1234'",
            "miss": false
          },
          "464": {
            "source": "                });",
            "miss": false
          },
          "465": {
            "source": "            }",
            "miss": false
          },
          "466": {
            "source": "",
            "miss": false
          },
          "467": {
            "source": "            if (type === 'VOLTAGE-CREDIT-CARD') {",
            "hits": 0,
            "miss": true
          },
          "468": {
            "source": "                var voltages = Hoek.reach(data, 'encryption.card.res') || {};",
            "hits": 0,
            "miss": true
          },
          "469": {
            "source": "",
            "miss": false
          },
          "470": {
            "source": "                defaults.payload.payments.push({",
            "hits": 0,
            "miss": true
          },
          "471": {
            "source": "                    paymentType: 'CREDITCARD',",
            "miss": false
          },
          "472": {
            "source": "                    cardType: voltages.cardType,",
            "miss": false
          },
          "473": {
            "source": "                    encryptedPan: voltages.encryptedPan,",
            "miss": false
          },
          "474": {
            "source": "                    encryptedCvv: voltages.encryptedCvv,",
            "miss": false
          },
          "475": {
            "source": "                    integrityCheck: voltages.integrityCheck,",
            "miss": false
          },
          "476": {
            "source": "                    keyId: voltages.keyId,",
            "miss": false
          },
          "477": {
            "source": "                    phase: voltages.phase,",
            "miss": false
          },
          "478": {
            "source": "                    expiryMonth: 12,",
            "miss": false
          },
          "479": {
            "source": "                    expiryYear: 2014,",
            "miss": false
          },
          "480": {
            "source": "                    firstName: 'Tom',",
            "miss": false
          },
          "481": {
            "source": "                    lastName: 'Smith',",
            "miss": false
          },
          "482": {
            "source": "                    addressLineOne: '303 Hillside Terrace',",
            "miss": false
          },
          "483": {
            "source": "                    addressLineTwo: '',",
            "miss": false
          },
          "484": {
            "source": "                    postalCode: '07860'",
            "miss": false
          },
          "485": {
            "source": "                });",
            "miss": false
          },
          "486": {
            "source": "            }",
            "miss": false
          },
          "487": {
            "source": "",
            "miss": false
          },
          "488": {
            "source": "            if (type === 'SINGLE-DIGIT-MONTH-VOLTAGE-CREDIT-CARD') {",
            "hits": 0,
            "miss": true
          },
          "489": {
            "source": "                var voltages = Hoek.reach(data, 'encryption.card.res') || {};",
            "hits": 0,
            "miss": true
          },
          "490": {
            "source": "",
            "miss": false
          },
          "491": {
            "source": "                defaults.payload.payments.push({",
            "hits": 0,
            "miss": true
          },
          "492": {
            "source": "                    paymentType: 'CREDITCARD',",
            "miss": false
          },
          "493": {
            "source": "                    cardType: voltages.cardType,",
            "miss": false
          },
          "494": {
            "source": "                    encryptedPan: voltages.encryptedPan,",
            "miss": false
          },
          "495": {
            "source": "                    encryptedCvv: voltages.encryptedCvv,",
            "miss": false
          },
          "496": {
            "source": "                    integrityCheck: voltages.integrityCheck,",
            "miss": false
          },
          "497": {
            "source": "                    keyId: voltages.keyId,",
            "miss": false
          },
          "498": {
            "source": "                    phase: voltages.phase,",
            "miss": false
          },
          "499": {
            "source": "                    expiryMonth: 1,",
            "miss": false
          },
          "500": {
            "source": "                    expiryYear: 2016,",
            "miss": false
          },
          "501": {
            "source": "                    firstName: 'Tom',",
            "miss": false
          },
          "502": {
            "source": "                    lastName: 'Smith',",
            "miss": false
          },
          "503": {
            "source": "                    addressLineOne: '303 Hillside Terrace',",
            "miss": false
          },
          "504": {
            "source": "                    addressLineTwo: '',",
            "miss": false
          },
          "505": {
            "source": "                    postalCode: '07860'",
            "miss": false
          },
          "506": {
            "source": "                });",
            "miss": false
          },
          "507": {
            "source": "            }",
            "miss": false
          },
          "508": {
            "source": "",
            "miss": false
          },
          "509": {
            "source": "            if (type === 'VOLTAGE-ERROR') {",
            "hits": 0,
            "miss": true
          },
          "510": {
            "source": "                defaults.payload.payments.push({",
            "hits": 0,
            "miss": true
          },
          "511": {
            "source": "                    paymentType: 'CREDITCARD',",
            "miss": false
          },
          "512": {
            "source": "                    cardType: 'VISA',",
            "miss": false
          },
          "513": {
            "source": "                    phase: '1',",
            "miss": false
          },
          "514": {
            "source": "                    encryptedPan: null,",
            "miss": false
          },
          "515": {
            "source": "                    encryptedCvv: '799',",
            "miss": false
          },
          "516": {
            "source": "                    keyId: 'bf01bf60',",
            "miss": false
          },
          "517": {
            "source": "                    integrityCheck: '55c458be66134867',",
            "miss": false
          },
          "518": {
            "source": "                    expiryMonth: 12,",
            "miss": false
          },
          "519": {
            "source": "                    expiryYear: 2015,",
            "miss": false
          },
          "520": {
            "source": "                    firstName: 'Tom',",
            "miss": false
          },
          "521": {
            "source": "                    lastName: 'Smith',",
            "miss": false
          },
          "522": {
            "source": "                    addressLineOne: '303 Hillside Terrace',",
            "miss": false
          },
          "523": {
            "source": "                    addressLineTwo: '',",
            "miss": false
          },
          "524": {
            "source": "                    postalCode: '07860'",
            "miss": false
          },
          "525": {
            "source": "                });",
            "miss": false
          },
          "526": {
            "source": "            }",
            "miss": false
          },
          "527": {
            "source": "",
            "miss": false
          },
          "528": {
            "source": "            if (type === 'GIFTCARD' || type === 'PIHASH-GIFTCARD') {",
            "hits": 0,
            "miss": true
          },
          "529": {
            "source": "                // Round robin of static gift cards",
            "miss": false
          },
          "530": {
            "source": "                pushGiftCards(defaults.payload.payments);",
            "hits": 0,
            "miss": true
          },
          "531": {
            "source": "            }",
            "miss": false
          },
          "532": {
            "source": "",
            "miss": false
          },
          "533": {
            "source": "            if (type === 'GIFTCARD-ERROR') {",
            "hits": 0,
            "miss": true
          },
          "534": {
            "source": "                // Round robin of static gift cards",
            "miss": false
          },
          "535": {
            "source": "                defaults.payload.payments.push({",
            "hits": 0,
            "miss": true
          },
          "536": {
            "source": "                    paymentType: 'GIFTCARD',",
            "miss": false
          },
          "537": {
            "source": "                    number: '10000',",
            "miss": false
          },
          "538": {
            "source": "                    pin: '1234',",
            "miss": false
          },
          "539": {
            "source": "                    firstName: 'Tom',",
            "miss": false
          },
          "540": {
            "source": "                    lastName: 'Smith'",
            "miss": false
          },
          "541": {
            "source": "                });",
            "miss": false
          },
          "542": {
            "source": "            }",
            "miss": false
          },
          "543": {
            "source": "",
            "miss": false
          },
          "544": {
            "source": "            if (type === 'GIFTCARD-SPLIT-TENDER') {",
            "hits": 0,
            "miss": true
          },
          "545": {
            "source": "                // Round robin of static gift cards",
            "miss": false
          },
          "546": {
            "source": "                pushGiftCards(defaults.payload.payments);",
            "hits": 0,
            "miss": true
          },
          "547": {
            "source": "            }",
            "miss": false
          },
          "548": {
            "source": "",
            "miss": false
          },
          "549": {
            "source": "            if (type === 'MULTI-GIFTCARD-SPLIT-TENDER') {",
            "hits": 0,
            "miss": true
          },
          "550": {
            "source": "                // Round robin of static gift cards",
            "miss": false
          },
          "551": {
            "source": "                pushGiftCards(defaults.payload.payments, 2);",
            "hits": 0,
            "miss": true
          },
          "552": {
            "source": "            }",
            "miss": false
          },
          "553": {
            "source": "",
            "miss": false
          },
          "554": {
            "source": "            if (type === 'GIFTCARD-MIN-DETAILS') {",
            "hits": 0,
            "miss": true
          },
          "555": {
            "source": "                // Round robin of static gift cards",
            "miss": false
          },
          "556": {
            "source": "                pushGiftCards(defaults.payload.payments);",
            "hits": 0,
            "miss": true
          },
          "557": {
            "source": "",
            "miss": false
          },
          "558": {
            "source": "                delete defaults.payload.payments[0].firstName;",
            "hits": 0,
            "miss": true
          },
          "559": {
            "source": "                delete defaults.payload.payments[0].lastName;",
            "hits": 0,
            "miss": true
          },
          "560": {
            "source": "            }",
            "miss": false
          },
          "561": {
            "source": "",
            "miss": false
          },
          "562": {
            "source": "            if (type === 'SPLIT-TENDER') {",
            "hits": 0,
            "miss": true
          },
          "563": {
            "source": "                // Round robin of static gift cards",
            "miss": false
          },
          "564": {
            "source": "                pushGiftCards(defaults.payload.payments);",
            "hits": 0,
            "miss": true
          },
          "565": {
            "source": "",
            "miss": false
          },
          "566": {
            "source": "                defaults.payload.payments.push({",
            "hits": 0,
            "miss": true
          },
          "567": {
            "source": "                    paymentType: 'CREDITCARD',",
            "miss": false
          },
          "568": {
            "source": "                    cardType: 'VISA',",
            "miss": false
          },
          "569": {
            "source": "                    number: '4716118355162725',",
            "miss": false
          },
          "570": {
            "source": "                    cvv: '033',",
            "miss": false
          },
          "571": {
            "source": "                    expiryMonth: 12,",
            "miss": false
          },
          "572": {
            "source": "                    expiryYear: 2014,",
            "miss": false
          },
          "573": {
            "source": "                    firstName: 'Tom',",
            "miss": false
          },
          "574": {
            "source": "                    lastName: 'Smith',",
            "miss": false
          },
          "575": {
            "source": "                    addressLineOne: '303 Hillside Terrace',",
            "miss": false
          },
          "576": {
            "source": "                    addressLineTwo: '',",
            "miss": false
          },
          "577": {
            "source": "                    postalCode: '07860'",
            "miss": false
          },
          "578": {
            "source": "                });",
            "miss": false
          },
          "579": {
            "source": "            }",
            "miss": false
          },
          "580": {
            "source": "",
            "miss": false
          },
          "581": {
            "source": "            if (type === 'PAYPAL') {",
            "hits": 0,
            "miss": true
          },
          "582": {
            "source": "                defaults.payload.payments.push({",
            "hits": 0,
            "miss": true
          },
          "583": {
            "source": "                    paymentHandle: data.checkout.contract.initiatePaypal.res.result.paymentHandle,",
            "miss": false
          },
          "584": {
            "source": "                    firstName: 'Tom',",
            "miss": false
          },
          "585": {
            "source": "                    lastName: 'Smith',",
            "miss": false
          },
          "586": {
            "source": "                    addressLineOne: '303 Hillside Terrace',",
            "miss": false
          },
          "587": {
            "source": "                    postalCode: '07860'",
            "miss": false
          },
          "588": {
            "source": "                });",
            "miss": false
          },
          "589": {
            "source": "            }",
            "miss": false
          },
          "590": {
            "source": "",
            "miss": false
          },
          "591": {
            "source": "            if (type === 'PIHASH') {",
            "hits": 0,
            "miss": true
          },
          "592": {
            "source": "                defaults.payload.payments.push({",
            "hits": 0,
            "miss": true
          },
          "593": {
            "source": "                    piHash: 'PIH.pang.VISA.CREDITCARD.2079bf46-029c-41da-87fa-e0c0637e3508.4444',",
            "miss": false
          },
          "594": {
            "source": "                    cvv: '033',",
            "miss": false
          },
          "595": {
            "source": "                    expiryMonth: 12,",
            "miss": false
          },
          "596": {
            "source": "                    expiryYear: 2014,",
            "miss": false
          },
          "597": {
            "source": "                    firstName: 'Tom',",
            "miss": false
          },
          "598": {
            "source": "                    lastName: 'Smith',",
            "miss": false
          },
          "599": {
            "source": "                    addressLineOne: '303 Hillside Terrace',",
            "miss": false
          },
          "600": {
            "source": "                    postalCode: '07860'",
            "miss": false
          },
          "601": {
            "source": "                });",
            "miss": false
          },
          "602": {
            "source": "            }",
            "miss": false
          },
          "603": {
            "source": "",
            "miss": false
          },
          "604": {
            "source": "            if (type === 'PIP') {",
            "hits": 0,
            "miss": true
          },
          "605": {
            "source": "                defaults.payload.payments.push({",
            "hits": 0,
            "miss": true
          },
          "606": {
            "source": "                    paymentType: 'PIP',",
            "miss": false
          },
          "607": {
            "source": "                    firstName: 'Tom',",
            "miss": false
          },
          "608": {
            "source": "                    lastName: 'Smith',",
            "miss": false
          },
          "609": {
            "source": "                    addressLineOne: '303 Hillside Terrace',",
            "miss": false
          },
          "610": {
            "source": "                    postalCode: '07860'",
            "miss": false
          },
          "611": {
            "source": "                });",
            "miss": false
          },
          "612": {
            "source": "            }",
            "miss": false
          },
          "613": {
            "source": "",
            "miss": false
          },
          "614": {
            "source": "            if (type === 'WMUSGEDISCOVER-CARD') {",
            "hits": 0,
            "miss": true
          },
          "615": {
            "source": "                defaults.payload.payments.push({",
            "hits": 0,
            "miss": true
          },
          "616": {
            "source": "                    paymentType: 'CREDITCARD',",
            "miss": false
          },
          "617": {
            "source": "                    cardType: 'WMUSGEDISCOVER',",
            "miss": false
          },
          "618": {
            "source": "                    number: '6011313444444444',",
            "miss": false
          },
          "619": {
            "source": "                    cvv: '444',",
            "miss": false
          },
          "620": {
            "source": "                    expiryMonth: 12,",
            "miss": false
          },
          "621": {
            "source": "                    expiryYear: 2014,",
            "miss": false
          },
          "622": {
            "source": "                    firstName: 'Tom',",
            "miss": false
          },
          "623": {
            "source": "                    lastName: 'Smith',",
            "miss": false
          },
          "624": {
            "source": "                    addressLineOne: '303 Hillside Terrace',",
            "miss": false
          },
          "625": {
            "source": "                    addressLineTwo: '',",
            "miss": false
          },
          "626": {
            "source": "                    postalCode: '07860'",
            "miss": false
          },
          "627": {
            "source": "                });",
            "miss": false
          },
          "628": {
            "source": "            }",
            "miss": false
          },
          "629": {
            "source": "",
            "miss": false
          },
          "630": {
            "source": "            if (type === 'ZERO-DOLLAR-GIFTCARD') {",
            "hits": 0,
            "miss": true
          },
          "631": {
            "source": "                defaults.payload.payments.push({",
            "hits": 0,
            "miss": true
          },
          "632": {
            "source": "                    paymentType: 'GIFTCARD',",
            "miss": false
          },
          "633": {
            "source": "                    number: '7777079673953760',",
            "miss": false
          },
          "634": {
            "source": "                    pin: '2639',",
            "miss": false
          },
          "635": {
            "source": "                    firstName: 'Tom',",
            "miss": false
          },
          "636": {
            "source": "                    lastName: 'Smith'",
            "miss": false
          },
          "637": {
            "source": "                });",
            "miss": false
          },
          "638": {
            "source": "            }",
            "miss": false
          },
          "639": {
            "source": "",
            "miss": false
          },
          "640": {
            "source": "            if (type === 'GIFTCARD-TWICE') {",
            "hits": 0,
            "miss": true
          },
          "641": {
            "source": "                // Round robin of static gift cards",
            "miss": false
          },
          "642": {
            "source": "                pushGiftCards(defaults.payload.payments, 1, true);",
            "hits": 0,
            "miss": true
          },
          "643": {
            "source": "            }",
            "miss": false
          },
          "644": {
            "source": "",
            "miss": false
          },
          "645": {
            "source": "            var giftCardTypes = [",
            "hits": 0,
            "miss": true
          },
          "646": {
            "source": "                'GIFTCARD',",
            "miss": false
          },
          "647": {
            "source": "                'GIFTCARD-SPLIT-TENDER',",
            "miss": false
          },
          "648": {
            "source": "                'MULTI-GIFTCARD-SPLIT-TENDER',",
            "miss": false
          },
          "649": {
            "source": "                'SPLIT-TENDER',",
            "miss": false
          },
          "650": {
            "source": "                'PIHASH-GIFTCARD',",
            "miss": false
          },
          "651": {
            "source": "                'GIFTCARD-TWICE',",
            "miss": false
          },
          "652": {
            "source": "                'GIFTCARD-MIN-DETAILS'",
            "miss": false
          },
          "653": {
            "source": "            ];",
            "miss": false
          },
          "654": {
            "source": "",
            "miss": false
          },
          "655": {
            "source": "            if (giftCardTypes.indexOf(type) === -1) {",
            "hits": 0,
            "miss": true
          },
          "656": {
            "source": "                return performUpdate();",
            "hits": 0,
            "miss": true
          },
          "657": {
            "source": "            }",
            "miss": false
          },
          "658": {
            "source": "",
            "miss": false
          },
          "659": {
            "source": "            var checkGiftCards = function (giftCard, callback) {",
            "hits": 0,
            "miss": true
          },
          "660": {
            "source": "",
            "miss": false
          },
          "661": {
            "source": "                server.plugins.payment.generatePiHash({ account: giftCard.account, pmId: 'FDCGC', pin: giftCard.pin }, function (err, piHash) {",
            "hits": 0,
            "miss": true
          },
          "662": {
            "source": "",
            "miss": false
          },
          "663": {
            "source": "                    if (err) {",
            "hits": 0,
            "miss": true
          },
          "664": {
            "source": "                        return callback(Boom.wrap(err));",
            "hits": 0,
            "miss": true
          },
          "665": {
            "source": "                    }",
            "miss": false
          },
          "666": {
            "source": "",
            "miss": false
          },
          "667": {
            "source": "                    if (type === 'PIHASH-GIFTCARD') {",
            "hits": 0,
            "miss": true
          },
          "668": {
            "source": "                        defaults.payload.payments[0].piHash = piHash;",
            "hits": 0,
            "miss": true
          },
          "669": {
            "source": "                        delete defaults.payload.payments[0].number;",
            "hits": 0,
            "miss": true
          },
          "670": {
            "source": "                    }",
            "miss": false
          },
          "671": {
            "source": "",
            "miss": false
          },
          "672": {
            "source": "                    // Check gift card balance",
            "miss": false
          },
          "673": {
            "source": "                    server.plugins.payment.giftCardBalance({ piHash: piHash }, function (err, card) {",
            "hits": 0,
            "miss": true
          },
          "674": {
            "source": "",
            "miss": false
          },
          "675": {
            "source": "                        if (err) {",
            "hits": 0,
            "miss": true
          },
          "676": {
            "source": "                            return callback(Boom.wrap(err));",
            "hits": 0,
            "miss": true
          },
          "677": {
            "source": "                        }",
            "miss": false
          },
          "678": {
            "source": "",
            "miss": false
          },
          "679": {
            "source": "                        if (card.balance >= Payment.giftCardMinimum) {",
            "hits": 0,
            "miss": true
          },
          "680": {
            "source": "                            return callback();",
            "hits": 0,
            "miss": true
          },
          "681": {
            "source": "                        }",
            "miss": false
          },
          "682": {
            "source": "",
            "miss": false
          },
          "683": {
            "source": "                        // Reset gift card balance",
            "miss": false
          },
          "684": {
            "source": "                        var addGiftCardBalanceOptions = {",
            "hits": 0,
            "miss": true
          },
          "685": {
            "source": "                            piHash: piHash,",
            "miss": false
          },
          "686": {
            "source": "                            pin: giftCard.pin,",
            "miss": false
          },
          "687": {
            "source": "                            amount: Math.round((Payment.giftCardMinimum - card.balance) * 100) / 100",
            "miss": false
          },
          "688": {
            "source": "                        };",
            "miss": false
          },
          "689": {
            "source": "",
            "miss": false
          },
          "690": {
            "source": "                        server.plugins.payment.addGiftCardBalance(addGiftCardBalanceOptions, function (err) {",
            "hits": 0,
            "miss": true
          },
          "691": {
            "source": "",
            "miss": false
          },
          "692": {
            "source": "                            if (err) {",
            "hits": 0,
            "miss": true
          },
          "693": {
            "source": "                                return callback(Boom.wrap(err));",
            "hits": 0,
            "miss": true
          },
          "694": {
            "source": "                            }",
            "miss": false
          },
          "695": {
            "source": "",
            "miss": false
          },
          "696": {
            "source": "                            callback();",
            "hits": 0,
            "miss": true
          },
          "697": {
            "source": "                        });",
            "miss": false
          },
          "698": {
            "source": "                    });",
            "miss": false
          },
          "699": {
            "source": "                });",
            "miss": false
          },
          "700": {
            "source": "            };",
            "miss": false
          },
          "701": {
            "source": "",
            "miss": false
          },
          "702": {
            "source": "            Async.map(giftCardsToBeChecked, checkGiftCards, function (err) {",
            "hits": 0,
            "miss": true
          },
          "703": {
            "source": "",
            "miss": false
          },
          "704": {
            "source": "                giftCardsToBeChecked = [];",
            "hits": 0,
            "miss": true
          },
          "705": {
            "source": "                performUpdate(err);",
            "hits": 0,
            "miss": true
          },
          "706": {
            "source": "            });",
            "miss": false
          },
          "707": {
            "source": "        };",
            "miss": false
          },
          "708": {
            "source": "",
            "miss": false
          },
          "709": {
            "source": "        var performUpdate = function (err) {",
            "hits": 0,
            "miss": true
          },
          "710": {
            "source": "",
            "miss": false
          },
          "711": {
            "source": "            if (err) {",
            "hits": 0,
            "miss": true
          },
          "712": {
            "source": "                return next(Boom.wrap(err));",
            "hits": 0,
            "miss": true
          },
          "713": {
            "source": "            }",
            "miss": false
          },
          "714": {
            "source": "",
            "miss": false
          },
          "715": {
            "source": "            options = Hoek.merge(defaults, options || {}, true);",
            "hits": 0,
            "miss": true
          },
          "716": {
            "source": "            server.inject(options, function (res) {",
            "hits": 0,
            "miss": true
          },
          "717": {
            "source": "",
            "miss": false
          },
          "718": {
            "source": "                var err = Tools.checkForError(res);",
            "hits": 0,
            "miss": true
          },
          "719": {
            "source": "",
            "miss": false
          },
          "720": {
            "source": "                data.checkout.contract.updatePayment = { err: err, req: options, res: res };",
            "hits": 0,
            "miss": true
          },
          "721": {
            "source": "                next(err, server, data);",
            "hits": 0,
            "miss": true
          },
          "722": {
            "source": "            });",
            "miss": false
          },
          "723": {
            "source": "        };",
            "miss": false
          },
          "724": {
            "source": "",
            "miss": false
          },
          "725": {
            "source": "        getTotal();",
            "hits": 0,
            "miss": true
          },
          "726": {
            "source": "    };",
            "miss": false
          },
          "727": {
            "source": "};",
            "miss": false
          },
          "728": {
            "source": "",
            "miss": false
          },
          "729": {
            "source": "",
            "miss": false
          },
          "730": {
            "source": "module.exports.submit = function (options) {",
            "hits": 1,
            "miss": false
          },
          "731": {
            "source": "",
            "miss": false
          },
          "732": {
            "source": "    return function (server, data, next) {",
            "hits": 0,
            "miss": true
          },
          "733": {
            "source": "",
            "miss": false
          },
          "734": {
            "source": "        var purchaseId = Hoek.reach(data, 'checkout.contract.create.res.result.id');",
            "hits": 0,
            "miss": true
          },
          "735": {
            "source": "",
            "miss": false
          },
          "736": {
            "source": "        var defaults = {",
            "hits": 0,
            "miss": true
          },
          "737": {
            "source": "            method: 'PUT',",
            "miss": false
          },
          "738": {
            "source": "            url: '/checkout/contract/' + purchaseId + '/order',",
            "miss": false
          },
          "739": {
            "source": "            payload: {",
            "miss": false
          },
          "740": {
            "source": "                storeList: Tools.getStoreList()",
            "miss": false
          },
          "741": {
            "source": "            }",
            "miss": false
          },
          "742": {
            "source": "        };",
            "miss": false
          },
          "743": {
            "source": "",
            "miss": false
          },
          "744": {
            "source": "        options = Hoek.merge(defaults, options || {}, true);",
            "hits": 0,
            "miss": true
          },
          "745": {
            "source": "        server.inject(options, function (res) {",
            "hits": 0,
            "miss": true
          },
          "746": {
            "source": "",
            "miss": false
          },
          "747": {
            "source": "            var err = Tools.checkForError(res);",
            "hits": 0,
            "miss": true
          },
          "748": {
            "source": "",
            "miss": false
          },
          "749": {
            "source": "            data.checkout.contract.submit = { err: err, req: options, res: res };",
            "hits": 0,
            "miss": true
          },
          "750": {
            "source": "            return next(err, server, data);",
            "hits": 0,
            "miss": true
          },
          "751": {
            "source": "        });",
            "miss": false
          },
          "752": {
            "source": "    };",
            "miss": false
          },
          "753": {
            "source": "};",
            "miss": false
          },
          "754": {
            "source": "",
            "miss": false
          }
        }
      },
      {
        "filename": "lib/checkout/discount.js",
        "percent": 60,
        "hits": 21,
        "misses": 14,
        "sloc": 35,
        "source": {
          "1": {
            "source": "// Load modules",
            "miss": false
          },
          "2": {
            "source": "",
            "miss": false
          },
          "3": {
            "source": "var Hoek = require('hoek');",
            "hits": 1,
            "miss": false
          },
          "4": {
            "source": "var Tools = require('../tools');",
            "hits": 1,
            "miss": false
          },
          "5": {
            "source": "",
            "miss": false
          },
          "6": {
            "source": "",
            "miss": false
          },
          "7": {
            "source": "module.exports.apply = function (options) {",
            "hits": 1,
            "miss": false
          },
          "8": {
            "source": "",
            "miss": false
          },
          "9": {
            "source": "    return function (server, data, next) {",
            "hits": 0,
            "miss": true
          },
          "10": {
            "source": "",
            "miss": false
          },
          "11": {
            "source": "        var defaults = {",
            "hits": 0,
            "miss": true
          },
          "12": {
            "source": "            method: 'POST',",
            "miss": false
          },
          "13": {
            "source": "            url: '/checkout/contract/' + Hoek.reach(data, 'checkout.contract.create.res.result.id') + '/associate-discount',",
            "miss": false
          },
          "14": {
            "source": "            payload: {",
            "miss": false
          },
          "15": {
            "source": "                    win: '121231231212123',",
            "miss": false
          },
          "16": {
            "source": "                    discountCard: '12312312124124214214'",
            "miss": false
          },
          "17": {
            "source": "            }",
            "miss": false
          },
          "18": {
            "source": "        };",
            "miss": false
          },
          "19": {
            "source": "",
            "miss": false
          },
          "20": {
            "source": "        options = Hoek.merge(defaults, options || {}, true);",
            "hits": 0,
            "miss": true
          },
          "21": {
            "source": "        server.inject(options, function (res) {",
            "hits": 0,
            "miss": true
          },
          "22": {
            "source": "",
            "miss": false
          },
          "23": {
            "source": "            var err = Tools.checkForError(res);",
            "hits": 0,
            "miss": true
          },
          "24": {
            "source": "",
            "miss": false
          },
          "25": {
            "source": "            data.checkout.discount.apply = { err: err, req: options, res: res };",
            "hits": 0,
            "miss": true
          },
          "26": {
            "source": "            next(err, server, data);",
            "hits": 0,
            "miss": true
          },
          "27": {
            "source": "        });",
            "miss": false
          },
          "28": {
            "source": "    };",
            "miss": false
          },
          "29": {
            "source": "};",
            "miss": false
          },
          "30": {
            "source": "",
            "miss": false
          },
          "31": {
            "source": "",
            "miss": false
          },
          "32": {
            "source": "module.exports.remove = function (options) {",
            "hits": 1,
            "miss": false
          },
          "33": {
            "source": "",
            "miss": false
          },
          "34": {
            "source": "    return function (server, data, next) {",
            "hits": 0,
            "miss": true
          },
          "35": {
            "source": "",
            "miss": false
          },
          "36": {
            "source": "        var defaults = {",
            "hits": 0,
            "miss": true
          },
          "37": {
            "source": "            method: 'DELETE',",
            "miss": false
          },
          "38": {
            "source": "            url: '/checkout/contract/' + Hoek.reach(data, 'checkout.contract.create.res.result.id') + '/associate-discount'",
            "miss": false
          },
          "39": {
            "source": "        };",
            "miss": false
          },
          "40": {
            "source": "",
            "miss": false
          },
          "41": {
            "source": "        options = Hoek.merge(defaults, options || {}, true);",
            "hits": 0,
            "miss": true
          },
          "42": {
            "source": "        server.inject(options, function (res) {",
            "hits": 0,
            "miss": true
          },
          "43": {
            "source": "",
            "miss": false
          },
          "44": {
            "source": "            var err = Tools.checkForError(res);",
            "hits": 0,
            "miss": true
          },
          "45": {
            "source": "",
            "miss": false
          },
          "46": {
            "source": "            data.checkout.discount.remove = { err: err, req: options, res: res };",
            "hits": 0,
            "miss": true
          },
          "47": {
            "source": "            next(err, server, data);",
            "hits": 0,
            "miss": true
          },
          "48": {
            "source": "        });",
            "miss": false
          },
          "49": {
            "source": "    };",
            "miss": false
          },
          "50": {
            "source": "};",
            "miss": false
          },
          "51": {
            "source": "",
            "miss": false
          }
        }
      },
      {
        "filename": "lib/checkout/index.js",
        "percent": 100,
        "hits": 5,
        "misses": 0,
        "sloc": 5,
        "source": {
          "1": {
            "source": "module.exports = {",
            "hits": 1,
            "miss": false
          },
          "2": {
            "source": "    contract: require('./contract'),",
            "miss": false
          },
          "3": {
            "source": "    discount: require('./discount'),",
            "miss": false
          },
          "4": {
            "source": "    pickupPeople: require('./pickupPeople')",
            "miss": false
          },
          "5": {
            "source": "};",
            "miss": false
          },
          "6": {
            "source": "",
            "miss": false
          }
        }
      },
      {
        "filename": "lib/checkout/pickupPeople.js",
        "percent": 59.375,
        "hits": 38,
        "misses": 26,
        "sloc": 64,
        "source": {
          "1": {
            "source": "// Load modules",
            "miss": false
          },
          "2": {
            "source": "",
            "miss": false
          },
          "3": {
            "source": "var Hoek = require('hoek');",
            "hits": 1,
            "miss": false
          },
          "4": {
            "source": "var Tools = require('../tools');",
            "hits": 1,
            "miss": false
          },
          "5": {
            "source": "",
            "miss": false
          },
          "6": {
            "source": "",
            "miss": false
          },
          "7": {
            "source": "module.exports.create = function (options) {",
            "hits": 1,
            "miss": false
          },
          "8": {
            "source": "",
            "miss": false
          },
          "9": {
            "source": "    return function (server, data, next) {",
            "hits": 0,
            "miss": true
          },
          "10": {
            "source": "",
            "miss": false
          },
          "11": {
            "source": "        var purchaseId = Hoek.reach(data, 'checkout.contract.create.res.result.id');",
            "hits": 0,
            "miss": true
          },
          "12": {
            "source": "",
            "miss": false
          },
          "13": {
            "source": "        var defaults = {",
            "hits": 0,
            "miss": true
          },
          "14": {
            "source": "            method: 'POST',",
            "miss": false
          },
          "15": {
            "source": "            url: '/checkout/contract/' + purchaseId + '/pickup-people',",
            "miss": false
          },
          "16": {
            "source": "            payload: {",
            "miss": false
          },
          "17": {
            "source": "                storeList: Tools.getStoreList()",
            "miss": false
          },
          "18": {
            "source": "            }",
            "miss": false
          },
          "19": {
            "source": "        };",
            "miss": false
          },
          "20": {
            "source": "",
            "miss": false
          },
          "21": {
            "source": "        options = Hoek.merge(defaults, options || {}, true);",
            "hits": 0,
            "miss": true
          },
          "22": {
            "source": "        server.inject(options, function (res) {",
            "hits": 0,
            "miss": true
          },
          "23": {
            "source": "",
            "miss": false
          },
          "24": {
            "source": "            var err = Tools.checkForError(res);",
            "hits": 0,
            "miss": true
          },
          "25": {
            "source": "",
            "miss": false
          },
          "26": {
            "source": "            data.checkout.pickupPeople.create = { err: err, req: options, res: res };",
            "hits": 0,
            "miss": true
          },
          "27": {
            "source": "            return next(err, server, data);",
            "hits": 0,
            "miss": true
          },
          "28": {
            "source": "        });",
            "miss": false
          },
          "29": {
            "source": "    };",
            "miss": false
          },
          "30": {
            "source": "};",
            "miss": false
          },
          "31": {
            "source": "",
            "miss": false
          },
          "32": {
            "source": "",
            "miss": false
          },
          "33": {
            "source": "module.exports.update = function (index, options) {",
            "hits": 1,
            "miss": false
          },
          "34": {
            "source": "",
            "miss": false
          },
          "35": {
            "source": "    return function (server, data, next) {",
            "hits": 0,
            "miss": true
          },
          "36": {
            "source": "",
            "miss": false
          },
          "37": {
            "source": "        var purchaseId = Hoek.reach(data, 'checkout.contract.create.res.result.id');",
            "hits": 0,
            "miss": true
          },
          "38": {
            "source": "        var personId = Hoek.reach(data, 'checkout.pickupPeople.create.res.result.pickupPeople.' + index + '.id');",
            "hits": 0,
            "miss": true
          },
          "39": {
            "source": "",
            "miss": false
          },
          "40": {
            "source": "        var defaults = {",
            "hits": 0,
            "miss": true
          },
          "41": {
            "source": "            method: 'PUT',",
            "miss": false
          },
          "42": {
            "source": "            url: '/checkout/contract/' + purchaseId + '/pickup-people/' + personId,",
            "miss": false
          },
          "43": {
            "source": "            payload: {",
            "miss": false
          },
          "44": {
            "source": "                firstName: 'Steve',",
            "miss": false
          },
          "45": {
            "source": "                lastName: 'Jones',",
            "miss": false
          },
          "46": {
            "source": "                email: 'steve@jones.com',",
            "miss": false
          },
          "47": {
            "source": "                phone: '',",
            "miss": false
          },
          "48": {
            "source": "                isPrimary: true,",
            "miss": false
          },
          "49": {
            "source": "                storeList: Tools.getStoreList()",
            "miss": false
          },
          "50": {
            "source": "            }",
            "miss": false
          },
          "51": {
            "source": "        };",
            "miss": false
          },
          "52": {
            "source": "",
            "miss": false
          },
          "53": {
            "source": "        options = Hoek.merge(defaults, options || {}, true);",
            "hits": 0,
            "miss": true
          },
          "54": {
            "source": "        server.inject(options, function (res) {",
            "hits": 0,
            "miss": true
          },
          "55": {
            "source": "",
            "miss": false
          },
          "56": {
            "source": "            var err = Tools.checkForError(res);",
            "hits": 0,
            "miss": true
          },
          "57": {
            "source": "",
            "miss": false
          },
          "58": {
            "source": "            data.checkout.pickupPeople.update = { err: err, req: options, res: res };",
            "hits": 0,
            "miss": true
          },
          "59": {
            "source": "            return next(err, server, data);",
            "hits": 0,
            "miss": true
          },
          "60": {
            "source": "        });",
            "miss": false
          },
          "61": {
            "source": "    };",
            "miss": false
          },
          "62": {
            "source": "};",
            "miss": false
          },
          "63": {
            "source": "",
            "miss": false
          },
          "64": {
            "source": "",
            "miss": false
          },
          "65": {
            "source": "module.exports.delete = function (index, options) {",
            "hits": 1,
            "miss": false
          },
          "66": {
            "source": "",
            "miss": false
          },
          "67": {
            "source": "    return function (server, data, next) {",
            "hits": 0,
            "miss": true
          },
          "68": {
            "source": "",
            "miss": false
          },
          "69": {
            "source": "        var purchaseId = Hoek.reach(data, 'checkout.contract.create.res.result.id');",
            "hits": 0,
            "miss": true
          },
          "70": {
            "source": "        var personId = Hoek.reach(data, 'checkout.pickupPeople.create.res.result.pickupPeople.' + index + '.id');",
            "hits": 0,
            "miss": true
          },
          "71": {
            "source": "",
            "miss": false
          },
          "72": {
            "source": "        var defaults = {",
            "hits": 0,
            "miss": true
          },
          "73": {
            "source": "            method: 'DELETE',",
            "miss": false
          },
          "74": {
            "source": "            url: '/checkout/contract/' + purchaseId + '/pickup-people/' + personId,",
            "miss": false
          },
          "75": {
            "source": "            payload: {",
            "miss": false
          },
          "76": {
            "source": "                storeList: Tools.getStoreList()",
            "miss": false
          },
          "77": {
            "source": "            }",
            "miss": false
          },
          "78": {
            "source": "        };",
            "miss": false
          },
          "79": {
            "source": "",
            "miss": false
          },
          "80": {
            "source": "        options = Hoek.merge(defaults, options || {}, true);",
            "hits": 0,
            "miss": true
          },
          "81": {
            "source": "        server.inject(options, function (res) {",
            "hits": 0,
            "miss": true
          },
          "82": {
            "source": "",
            "miss": false
          },
          "83": {
            "source": "            var err = Tools.checkForError(res);",
            "hits": 0,
            "miss": true
          },
          "84": {
            "source": "",
            "miss": false
          },
          "85": {
            "source": "            data.checkout.pickupPeople.delete = { err: err, req: options, res: res };",
            "hits": 0,
            "miss": true
          },
          "86": {
            "source": "            return next(err, server, data);",
            "hits": 0,
            "miss": true
          },
          "87": {
            "source": "        });",
            "miss": false
          },
          "88": {
            "source": "    };",
            "miss": false
          },
          "89": {
            "source": "};",
            "miss": false
          },
          "90": {
            "source": "",
            "miss": false
          }
        }
      },
      {
        "filename": "lib/customer/creditCard.js",
        "percent": 68.9922480620155,
        "hits": 89,
        "misses": 40,
        "sloc": 129,
        "source": {
          "1": {
            "source": "// Load modules",
            "miss": false
          },
          "2": {
            "source": "",
            "miss": false
          },
          "3": {
            "source": "var Hoek = require('hoek');",
            "hits": 1,
            "miss": false
          },
          "4": {
            "source": "var Encryption = require('../encryption');",
            "hits": 1,
            "miss": false
          },
          "5": {
            "source": "var Tools = require('../tools');",
            "hits": 1,
            "miss": false
          },
          "6": {
            "source": "",
            "miss": false
          },
          "7": {
            "source": "",
            "miss": false
          },
          "8": {
            "source": "// Declare internals",
            "miss": false
          },
          "9": {
            "source": "",
            "miss": false
          },
          "10": {
            "source": "var internals = {};",
            "hits": 1,
            "miss": false
          },
          "11": {
            "source": "",
            "miss": false
          },
          "12": {
            "source": "",
            "miss": false
          },
          "13": {
            "source": "module.exports.create = function (options) {",
            "hits": 1,
            "miss": false
          },
          "14": {
            "source": "",
            "miss": false
          },
          "15": {
            "source": "    return function (server, data, next) {",
            "hits": 3,
            "miss": false
          },
          "16": {
            "source": "",
            "miss": false
          },
          "17": {
            "source": "        var defaults = {",
            "hits": 3,
            "miss": false
          },
          "18": {
            "source": "            method: 'POST',",
            "miss": false
          },
          "19": {
            "source": "            url: '/customer/' + data.customer.create.res.result.id + '/credit-card',",
            "miss": false
          },
          "20": {
            "source": "            payload: {",
            "miss": false
          },
          "21": {
            "source": "                firstName: 'Mikasa',",
            "miss": false
          },
          "22": {
            "source": "                lastName: 'Ackerman',",
            "miss": false
          },
          "23": {
            "source": "                addressLineOne: '850 Cherry Avenue',",
            "miss": false
          },
          "24": {
            "source": "                city: 'San Bruno',",
            "miss": false
          },
          "25": {
            "source": "                state: 'CA',",
            "miss": false
          },
          "26": {
            "source": "                postalCode: '94066',",
            "miss": false
          },
          "27": {
            "source": "                phone: '555-555-5555',",
            "miss": false
          },
          "28": {
            "source": "                expiryMonth: 12,",
            "miss": false
          },
          "29": {
            "source": "                expiryYear: 2014,",
            "miss": false
          },
          "30": {
            "source": "                cardType: 'VISA',",
            "miss": false
          },
          "31": {
            "source": "                number: '4444444444444444',",
            "miss": false
          },
          "32": {
            "source": "                cvv: '033'",
            "miss": false
          },
          "33": {
            "source": "            }",
            "miss": false
          },
          "34": {
            "source": "        };",
            "miss": false
          },
          "35": {
            "source": "",
            "miss": false
          },
          "36": {
            "source": "        options = Hoek.merge(defaults, options || {}, true);",
            "hits": 3,
            "miss": false
          },
          "37": {
            "source": "        internals.adjustPayloadForEncryption(options.payload, data);",
            "hits": 3,
            "miss": false
          },
          "38": {
            "source": "        server.inject(options, function (res) {",
            "hits": 3,
            "miss": false
          },
          "39": {
            "source": "",
            "miss": false
          },
          "40": {
            "source": "            var err = Tools.checkForError(res);",
            "hits": 3,
            "miss": false
          },
          "41": {
            "source": "",
            "miss": false
          },
          "42": {
            "source": "            data.customer.creditCard.create = { err: err, req: options, res: res };",
            "hits": 3,
            "miss": false
          },
          "43": {
            "source": "            return next(err, server, data);",
            "hits": 3,
            "miss": false
          },
          "44": {
            "source": "        });",
            "miss": false
          },
          "45": {
            "source": "    };",
            "miss": false
          },
          "46": {
            "source": "};",
            "miss": false
          },
          "47": {
            "source": "",
            "miss": false
          },
          "48": {
            "source": "",
            "miss": false
          },
          "49": {
            "source": "module.exports.getAll = function (options) {",
            "hits": 1,
            "miss": false
          },
          "50": {
            "source": "",
            "miss": false
          },
          "51": {
            "source": "    return function (server, data, next) {",
            "hits": 0,
            "miss": true
          },
          "52": {
            "source": "",
            "miss": false
          },
          "53": {
            "source": "        var defaults = {",
            "hits": 0,
            "miss": true
          },
          "54": {
            "source": "            method: 'GET',",
            "miss": false
          },
          "55": {
            "source": "            url: '/customer/' + data.customer.create.res.result.id + '/credit-card'",
            "miss": false
          },
          "56": {
            "source": "        };",
            "miss": false
          },
          "57": {
            "source": "",
            "miss": false
          },
          "58": {
            "source": "        options = Hoek.merge(defaults, options || {}, true);",
            "hits": 0,
            "miss": true
          },
          "59": {
            "source": "        server.inject(options, function (res) {",
            "hits": 0,
            "miss": true
          },
          "60": {
            "source": "",
            "miss": false
          },
          "61": {
            "source": "            data.customer.creditCard.getAll = { req: options, res: res };",
            "hits": 0,
            "miss": true
          },
          "62": {
            "source": "            return next(null, server, data);",
            "hits": 0,
            "miss": true
          },
          "63": {
            "source": "        });",
            "miss": false
          },
          "64": {
            "source": "    };",
            "miss": false
          },
          "65": {
            "source": "};",
            "miss": false
          },
          "66": {
            "source": "",
            "miss": false
          },
          "67": {
            "source": "",
            "miss": false
          },
          "68": {
            "source": "module.exports.get = function (options) {",
            "hits": 1,
            "miss": false
          },
          "69": {
            "source": "",
            "miss": false
          },
          "70": {
            "source": "    return function (server, data, next) {",
            "hits": 1,
            "miss": false
          },
          "71": {
            "source": "",
            "miss": false
          },
          "72": {
            "source": "        var customerId = data.customer.create.res.result.id;",
            "hits": 0,
            "miss": true
          },
          "73": {
            "source": "        var creditCardId = data.customer.creditCard.create.res.result.id;",
            "hits": 0,
            "miss": true
          },
          "74": {
            "source": "",
            "miss": false
          },
          "75": {
            "source": "        var defaults = {",
            "hits": 0,
            "miss": true
          },
          "76": {
            "source": "            method: 'GET',",
            "miss": false
          },
          "77": {
            "source": "            url: '/customer/' + customerId + '/credit-card/' + creditCardId",
            "miss": false
          },
          "78": {
            "source": "        };",
            "miss": false
          },
          "79": {
            "source": "",
            "miss": false
          },
          "80": {
            "source": "        options = Hoek.merge(defaults, options || {}, true);",
            "hits": 0,
            "miss": true
          },
          "81": {
            "source": "        server.inject(options, function (res) {",
            "hits": 0,
            "miss": true
          },
          "82": {
            "source": "",
            "miss": false
          },
          "83": {
            "source": "            data.customer.creditCard.get = { req: options, res: res };",
            "hits": 0,
            "miss": true
          },
          "84": {
            "source": "            return next(null, server, data);",
            "hits": 0,
            "miss": true
          },
          "85": {
            "source": "        });",
            "miss": false
          },
          "86": {
            "source": "    };",
            "miss": false
          },
          "87": {
            "source": "};",
            "miss": false
          },
          "88": {
            "source": "",
            "miss": false
          },
          "89": {
            "source": "",
            "miss": false
          },
          "90": {
            "source": "module.exports.update = function (options) {",
            "hits": 1,
            "miss": false
          },
          "91": {
            "source": "",
            "miss": false
          },
          "92": {
            "source": "    return function (server, data, next) {",
            "hits": 1,
            "miss": false
          },
          "93": {
            "source": "",
            "miss": false
          },
          "94": {
            "source": "        var customerId = data.customer.create.res.result.id;",
            "hits": 0,
            "miss": true
          },
          "95": {
            "source": "        var creditCardId = data.customer.creditCard.create.res.result.id;",
            "hits": 0,
            "miss": true
          },
          "96": {
            "source": "",
            "miss": false
          },
          "97": {
            "source": "        var defaults = {",
            "hits": 0,
            "miss": true
          },
          "98": {
            "source": "            method: 'PUT',",
            "miss": false
          },
          "99": {
            "source": "            url: '/customer/' + customerId + '/credit-card/' + creditCardId",
            "miss": false
          },
          "100": {
            "source": "        };",
            "miss": false
          },
          "101": {
            "source": "",
            "miss": false
          },
          "102": {
            "source": "        options = Hoek.merge(defaults, options || {}, true);",
            "hits": 0,
            "miss": true
          },
          "103": {
            "source": "        internals.adjustPayloadForEncryption(options.payload, data);",
            "hits": 0,
            "miss": true
          },
          "104": {
            "source": "        server.inject(options, function (res) {",
            "hits": 0,
            "miss": true
          },
          "105": {
            "source": "",
            "miss": false
          },
          "106": {
            "source": "            data.customer.creditCard.update = { req: options, res: res };",
            "hits": 0,
            "miss": true
          },
          "107": {
            "source": "            return next(null, server, data);",
            "hits": 0,
            "miss": true
          },
          "108": {
            "source": "        });",
            "miss": false
          },
          "109": {
            "source": "    };",
            "miss": false
          },
          "110": {
            "source": "};",
            "miss": false
          },
          "111": {
            "source": "",
            "miss": false
          },
          "112": {
            "source": "",
            "miss": false
          },
          "113": {
            "source": "module.exports.patch = function (options) {",
            "hits": 1,
            "miss": false
          },
          "114": {
            "source": "",
            "miss": false
          },
          "115": {
            "source": "    return function (server, data, next) {",
            "hits": 0,
            "miss": true
          },
          "116": {
            "source": "",
            "miss": false
          },
          "117": {
            "source": "        var customerId = data.customer.create.res.result.id;",
            "hits": 0,
            "miss": true
          },
          "118": {
            "source": "        var creditCardId = data.customer.creditCard.create.res.result.id;",
            "hits": 0,
            "miss": true
          },
          "119": {
            "source": "",
            "miss": false
          },
          "120": {
            "source": "        var defaults = {",
            "hits": 0,
            "miss": true
          },
          "121": {
            "source": "            method: 'PATCH',",
            "miss": false
          },
          "122": {
            "source": "            url: '/customer/' + customerId + '/credit-card/' + creditCardId",
            "miss": false
          },
          "123": {
            "source": "        };",
            "miss": false
          },
          "124": {
            "source": "",
            "miss": false
          },
          "125": {
            "source": "        options = Hoek.merge(defaults, options || {}, true);",
            "hits": 0,
            "miss": true
          },
          "126": {
            "source": "        internals.adjustPayloadForEncryption(options.payload, data);",
            "hits": 0,
            "miss": true
          },
          "127": {
            "source": "        server.inject(options, function (res) {",
            "hits": 0,
            "miss": true
          },
          "128": {
            "source": "",
            "miss": false
          },
          "129": {
            "source": "            data.customer.creditCard.patch = { req: options, res: res };",
            "hits": 0,
            "miss": true
          },
          "130": {
            "source": "            return next(null, server, data);",
            "hits": 0,
            "miss": true
          },
          "131": {
            "source": "        });",
            "miss": false
          },
          "132": {
            "source": "    };",
            "miss": false
          },
          "133": {
            "source": "};",
            "miss": false
          },
          "134": {
            "source": "",
            "miss": false
          },
          "135": {
            "source": "",
            "miss": false
          },
          "136": {
            "source": "module.exports.delete = function (options) {",
            "hits": 1,
            "miss": false
          },
          "137": {
            "source": "",
            "miss": false
          },
          "138": {
            "source": "    return function (server, data, next) {",
            "hits": 1,
            "miss": false
          },
          "139": {
            "source": "",
            "miss": false
          },
          "140": {
            "source": "        var customerId = data.customer.create.res.result.id;",
            "hits": 0,
            "miss": true
          },
          "141": {
            "source": "        var creditCardId = data.customer.creditCard.create.res.result.id;",
            "hits": 0,
            "miss": true
          },
          "142": {
            "source": "",
            "miss": false
          },
          "143": {
            "source": "        var defaults = {",
            "hits": 0,
            "miss": true
          },
          "144": {
            "source": "            method: 'DELETE',",
            "miss": false
          },
          "145": {
            "source": "            url: '/customer/' + customerId + '/credit-card/' + creditCardId",
            "miss": false
          },
          "146": {
            "source": "        };",
            "miss": false
          },
          "147": {
            "source": "",
            "miss": false
          },
          "148": {
            "source": "        options = Hoek.merge(defaults, options || {}, true);",
            "hits": 0,
            "miss": true
          },
          "149": {
            "source": "        server.inject(options, function (res) {",
            "hits": 0,
            "miss": true
          },
          "150": {
            "source": "",
            "miss": false
          },
          "151": {
            "source": "            data.customer.creditCard.delete = { req: options, res: res };",
            "hits": 0,
            "miss": true
          },
          "152": {
            "source": "            return next(null, server, data);",
            "hits": 0,
            "miss": true
          },
          "153": {
            "source": "        });",
            "miss": false
          },
          "154": {
            "source": "    };",
            "miss": false
          },
          "155": {
            "source": "};",
            "miss": false
          },
          "156": {
            "source": "",
            "miss": false
          },
          "157": {
            "source": "",
            "miss": false
          },
          "158": {
            "source": "internals.adjustPayloadForEncryption = function (payload, data) {",
            "hits": 1,
            "miss": false
          },
          "159": {
            "source": "",
            "miss": false
          },
          "160": {
            "source": "    // if encrypted data has not been passed in then check for a card that",
            "miss": false
          },
          "161": {
            "source": "    // was previously encrypted. if one does not exist, then encrypt the ",
            "miss": false
          },
          "162": {
            "source": "    // cleartext inputs",
            "miss": false
          },
          "163": {
            "source": "    if (!payload.encryptedPan) {",
            "chunks": [
              {
                "source": "    if ("
              },
              {
                "source": "!payload.encryptedPan",
                "miss": "true"
              },
              {
                "source": ") {"
              }
            ],
            "hits": 3,
            "miss": true
          },
          "164": {
            "source": "        var encryptedCard = Hoek.reach(data, 'encryption.card.res');",
            "hits": 3,
            "miss": false
          },
          "165": {
            "source": "",
            "miss": false
          },
          "166": {
            "source": "        if (!encryptedCard && payload.number && payload.cvv && payload.cardType) {",
            "chunks": [
              {
                "source": "        if ("
              },
              {
                "source": "!encryptedCard",
                "miss": "true"
              },
              {
                "source": " && "
              },
              {
                "source": "payload.number",
                "miss": "true"
              },
              {
                "source": " && "
              },
              {
                "source": "payload.cvv",
                "miss": "true"
              },
              {
                "source": " && payload.cardType) {"
              }
            ],
            "hits": 3,
            "miss": true
          },
          "167": {
            "source": "            encryptedCard = Encryption.encryptCard({",
            "hits": 3,
            "miss": false
          },
          "168": {
            "source": "                account: payload.number,",
            "miss": false
          },
          "169": {
            "source": "                cvv: payload.cvv,",
            "miss": false
          },
          "170": {
            "source": "                pmId: payload.cardType",
            "miss": false
          },
          "171": {
            "source": "            });",
            "miss": false
          },
          "172": {
            "source": "        }",
            "miss": false
          },
          "173": {
            "source": "",
            "miss": false
          },
          "174": {
            "source": "        Hoek.merge(payload, encryptedCard || {});",
            "chunks": [
              {
                "source": "        Hoek.merge(payload, "
              },
              {
                "source": "encryptedCard",
                "miss": "true"
              },
              {
                "source": " || "
              },
              {
                "source": "{}",
                "miss": "never"
              },
              {
                "source": ");"
              }
            ],
            "hits": 3,
            "miss": true
          },
          "175": {
            "source": "    }",
            "miss": false
          },
          "176": {
            "source": "",
            "miss": false
          },
          "177": {
            "source": "    // make sure legacy cleartext credit card data is not submitted",
            "miss": false
          },
          "178": {
            "source": "    delete payload.number;",
            "hits": 3,
            "miss": false
          },
          "179": {
            "source": "    delete payload.cvv;",
            "hits": 3,
            "miss": false
          },
          "180": {
            "source": "};",
            "miss": false
          },
          "181": {
            "source": "",
            "miss": false
          }
        }
      },
      {
        "filename": "lib/customer/giftCard.js",
        "percent": 79.51807228915662,
        "hits": 66,
        "misses": 17,
        "sloc": 83,
        "source": {
          "1": {
            "source": "// Load modules",
            "miss": false
          },
          "2": {
            "source": "",
            "miss": false
          },
          "3": {
            "source": "var Hoek = require('hoek');",
            "hits": 1,
            "miss": false
          },
          "4": {
            "source": "var Tools = require('../tools');",
            "hits": 1,
            "miss": false
          },
          "5": {
            "source": "",
            "miss": false
          },
          "6": {
            "source": "",
            "miss": false
          },
          "7": {
            "source": "module.exports.create = function (options) {",
            "hits": 1,
            "miss": false
          },
          "8": {
            "source": "",
            "miss": false
          },
          "9": {
            "source": "    return function (server, data, next) {",
            "hits": 2,
            "miss": false
          },
          "10": {
            "source": "",
            "miss": false
          },
          "11": {
            "source": "        var defaults = {",
            "hits": 2,
            "miss": false
          },
          "12": {
            "source": "            method: 'POST',",
            "miss": false
          },
          "13": {
            "source": "            url: '/customer/' + data.customer.create.res.result.id + '/gift-card',",
            "miss": false
          },
          "14": {
            "source": "            payload: {",
            "miss": false
          },
          "15": {
            "source": "                number: Hoek.reach(data, 'payment.createGiftCard.res.result.account'),",
            "miss": false
          },
          "16": {
            "source": "                pin: Hoek.reach(data, 'payment.createGiftCard.res.result.pin')",
            "miss": false
          },
          "17": {
            "source": "            }",
            "miss": false
          },
          "18": {
            "source": "        };",
            "miss": false
          },
          "19": {
            "source": "",
            "miss": false
          },
          "20": {
            "source": "        options = Hoek.merge(defaults, options || {}, true);",
            "chunks": [
              {
                "source": "        options = Hoek.merge(defaults, "
              },
              {
                "source": "options",
                "miss": "true"
              },
              {
                "source": " || "
              },
              {
                "source": "{}",
                "miss": "never"
              },
              {
                "source": ", true);"
              }
            ],
            "hits": 2,
            "miss": true
          },
          "21": {
            "source": "        server.inject(options, function (res) {",
            "hits": 2,
            "miss": false
          },
          "22": {
            "source": "",
            "miss": false
          },
          "23": {
            "source": "            var err = Tools.checkForError(res);",
            "hits": 2,
            "miss": false
          },
          "24": {
            "source": "",
            "miss": false
          },
          "25": {
            "source": "            data.customer.giftCard.create = { err: err, req: options, res: res };",
            "hits": 2,
            "miss": false
          },
          "26": {
            "source": "            return next(err, server, data);",
            "hits": 2,
            "miss": false
          },
          "27": {
            "source": "        });",
            "miss": false
          },
          "28": {
            "source": "    };",
            "miss": false
          },
          "29": {
            "source": "};",
            "miss": false
          },
          "30": {
            "source": "",
            "miss": false
          },
          "31": {
            "source": "",
            "miss": false
          },
          "32": {
            "source": "module.exports.getAll = function (options) {",
            "hits": 1,
            "miss": false
          },
          "33": {
            "source": "",
            "miss": false
          },
          "34": {
            "source": "    return function (server, data, next) {",
            "hits": 0,
            "miss": true
          },
          "35": {
            "source": "",
            "miss": false
          },
          "36": {
            "source": "        var defaults = {",
            "hits": 0,
            "miss": true
          },
          "37": {
            "source": "            method: 'GET',",
            "miss": false
          },
          "38": {
            "source": "            url: '/customer/' + data.customer.create.res.result.id + '/gift-card'",
            "miss": false
          },
          "39": {
            "source": "        };",
            "miss": false
          },
          "40": {
            "source": "",
            "miss": false
          },
          "41": {
            "source": "        options = Hoek.merge(defaults, options || {}, true);",
            "hits": 0,
            "miss": true
          },
          "42": {
            "source": "        server.inject(options, function (res) {",
            "hits": 0,
            "miss": true
          },
          "43": {
            "source": "",
            "miss": false
          },
          "44": {
            "source": "            data.customer.giftCard.getAll = { req: options, res: res };",
            "hits": 0,
            "miss": true
          },
          "45": {
            "source": "            return next(null, server, data);",
            "hits": 0,
            "miss": true
          },
          "46": {
            "source": "        });",
            "miss": false
          },
          "47": {
            "source": "    };",
            "miss": false
          },
          "48": {
            "source": "};",
            "miss": false
          },
          "49": {
            "source": "",
            "miss": false
          },
          "50": {
            "source": "",
            "miss": false
          },
          "51": {
            "source": "module.exports.get = function (options) {",
            "hits": 1,
            "miss": false
          },
          "52": {
            "source": "",
            "miss": false
          },
          "53": {
            "source": "    return function (server, data, next) {",
            "hits": 1,
            "miss": false
          },
          "54": {
            "source": "",
            "miss": false
          },
          "55": {
            "source": "        var customerId = Hoek.reach(data, 'customer.create.res.result.id');",
            "hits": 1,
            "miss": false
          },
          "56": {
            "source": "        var giftCardId = Hoek.reach(data, 'customer.giftCard.create.res.result.id');",
            "hits": 1,
            "miss": false
          },
          "57": {
            "source": "",
            "miss": false
          },
          "58": {
            "source": "        var defaults = {",
            "hits": 1,
            "miss": false
          },
          "59": {
            "source": "            method: 'GET',",
            "miss": false
          },
          "60": {
            "source": "            url: '/customer/' + customerId + '/gift-card/' + giftCardId",
            "miss": false
          },
          "61": {
            "source": "        };",
            "miss": false
          },
          "62": {
            "source": "",
            "miss": false
          },
          "63": {
            "source": "        options = Hoek.merge(defaults, options || {}, true);",
            "chunks": [
              {
                "source": "        options = Hoek.merge(defaults, "
              },
              {
                "source": "options",
                "miss": "false"
              },
              {
                "source": " || {}, true);"
              }
            ],
            "hits": 1,
            "miss": true
          },
          "64": {
            "source": "        server.inject(options, function (res) {",
            "hits": 1,
            "miss": false
          },
          "65": {
            "source": "",
            "miss": false
          },
          "66": {
            "source": "            data.customer.giftCard.get = { req: options, res: res };",
            "hits": 1,
            "miss": false
          },
          "67": {
            "source": "            return next(null, server, data);",
            "hits": 1,
            "miss": false
          },
          "68": {
            "source": "        });",
            "miss": false
          },
          "69": {
            "source": "    };",
            "miss": false
          },
          "70": {
            "source": "};",
            "miss": false
          },
          "71": {
            "source": "",
            "miss": false
          },
          "72": {
            "source": "",
            "miss": false
          },
          "73": {
            "source": "module.exports.update = function (options) {",
            "hits": 1,
            "miss": false
          },
          "74": {
            "source": "",
            "miss": false
          },
          "75": {
            "source": "    return function (server, data, next) {",
            "hits": 0,
            "miss": true
          },
          "76": {
            "source": "",
            "miss": false
          },
          "77": {
            "source": "        var customerId = data.customer.create.res.result.id;",
            "hits": 0,
            "miss": true
          },
          "78": {
            "source": "        var giftCardId = data.customer.giftCard.create.res.result.id;",
            "hits": 0,
            "miss": true
          },
          "79": {
            "source": "",
            "miss": false
          },
          "80": {
            "source": "        var defaults = {",
            "hits": 0,
            "miss": true
          },
          "81": {
            "source": "            method: 'PUT',",
            "miss": false
          },
          "82": {
            "source": "            url: '/customer/' + customerId + '/gift-card/' + giftCardId,",
            "miss": false
          },
          "83": {
            "source": "            payload: {",
            "miss": false
          },
          "84": {
            "source": "                number: Hoek.reach(data, 'payment.createGiftCard.res.account'),",
            "miss": false
          },
          "85": {
            "source": "                pin: Hoek.reach(data, 'payment.createGiftCard.res.pin')",
            "miss": false
          },
          "86": {
            "source": "            }",
            "miss": false
          },
          "87": {
            "source": "        };",
            "miss": false
          },
          "88": {
            "source": "",
            "miss": false
          },
          "89": {
            "source": "        options = Hoek.merge(defaults, options || {}, true);",
            "hits": 0,
            "miss": true
          },
          "90": {
            "source": "        server.inject(options, function (res) {",
            "hits": 0,
            "miss": true
          },
          "91": {
            "source": "",
            "miss": false
          },
          "92": {
            "source": "            data.customer.giftCard.update = { req: options, res: res };",
            "hits": 0,
            "miss": true
          },
          "93": {
            "source": "            return next(null, server, data);",
            "hits": 0,
            "miss": true
          },
          "94": {
            "source": "        });",
            "miss": false
          },
          "95": {
            "source": "    };",
            "miss": false
          },
          "96": {
            "source": "};",
            "miss": false
          },
          "97": {
            "source": "",
            "miss": false
          },
          "98": {
            "source": "",
            "miss": false
          },
          "99": {
            "source": "module.exports.delete = function (options) {",
            "hits": 1,
            "miss": false
          },
          "100": {
            "source": "",
            "miss": false
          },
          "101": {
            "source": "    return function (server, data, next) {",
            "hits": 1,
            "miss": false
          },
          "102": {
            "source": "",
            "miss": false
          },
          "103": {
            "source": "        var customerId = Hoek.reach(data, 'customer.create.res.result.id');",
            "hits": 1,
            "miss": false
          },
          "104": {
            "source": "        var giftCardId = Hoek.reach(data, 'customer.giftCard.create.res.result.id');",
            "hits": 1,
            "miss": false
          },
          "105": {
            "source": "",
            "miss": false
          },
          "106": {
            "source": "        var defaults = {",
            "hits": 1,
            "miss": false
          },
          "107": {
            "source": "            method: 'DELETE',",
            "miss": false
          },
          "108": {
            "source": "            url: '/customer/' + customerId + '/gift-card/' + giftCardId",
            "miss": false
          },
          "109": {
            "source": "        };",
            "miss": false
          },
          "110": {
            "source": "",
            "miss": false
          },
          "111": {
            "source": "        options = Hoek.merge(defaults, options || {}, true);",
            "chunks": [
              {
                "source": "        options = Hoek.merge(defaults, "
              },
              {
                "source": "options",
                "miss": "false"
              },
              {
                "source": " || {}, true);"
              }
            ],
            "hits": 1,
            "miss": true
          },
          "112": {
            "source": "        server.inject(options, function (res) {",
            "hits": 1,
            "miss": false
          },
          "113": {
            "source": "",
            "miss": false
          },
          "114": {
            "source": "            data.customer.giftCard.delete = { req: options, res: res };",
            "hits": 1,
            "miss": false
          },
          "115": {
            "source": "            return next(null, server, data);",
            "hits": 1,
            "miss": false
          },
          "116": {
            "source": "        });",
            "miss": false
          },
          "117": {
            "source": "    };",
            "miss": false
          },
          "118": {
            "source": "};",
            "miss": false
          },
          "119": {
            "source": "",
            "miss": false
          }
        }
      },
      {
        "filename": "lib/customer/index.js",
        "percent": 87.56756756756758,
        "hits": 162,
        "misses": 23,
        "sloc": 185,
        "source": {
          "1": {
            "source": "// Load modules",
            "miss": false
          },
          "2": {
            "source": "",
            "miss": false
          },
          "3": {
            "source": "var Hoek = require('hoek');",
            "hits": 1,
            "miss": false
          },
          "4": {
            "source": "var Auth = require('../auth');",
            "hits": 1,
            "miss": false
          },
          "5": {
            "source": "",
            "miss": false
          },
          "6": {
            "source": "",
            "miss": false
          },
          "7": {
            "source": "module.exports.creditCard = require('./creditCard');",
            "hits": 1,
            "miss": false
          },
          "8": {
            "source": "module.exports.giftCard = require('./giftCard');",
            "hits": 1,
            "miss": false
          },
          "9": {
            "source": "module.exports.shippingAddress = require('./shippingAddress');",
            "hits": 1,
            "miss": false
          },
          "10": {
            "source": "",
            "miss": false
          },
          "11": {
            "source": "",
            "miss": false
          },
          "12": {
            "source": "module.exports.create = function (options) {",
            "hits": 1,
            "miss": false
          },
          "13": {
            "source": "",
            "miss": false
          },
          "14": {
            "source": "    return function (server, data, next) {",
            "hits": 12,
            "miss": false
          },
          "15": {
            "source": "",
            "miss": false
          },
          "16": {
            "source": "        var defaults = {",
            "hits": 12,
            "miss": false
          },
          "17": {
            "source": "            method: 'POST',",
            "miss": false
          },
          "18": {
            "source": "            url: '/customer',",
            "miss": false
          },
          "19": {
            "source": "            payload: {",
            "miss": false
          },
          "20": {
            "source": "                firstName: 'Mikasa',",
            "miss": false
          },
          "21": {
            "source": "                lastName: 'Ackerman',",
            "miss": false
          },
          "22": {
            "source": "                login: Auth.generateLogin(),",
            "miss": false
          },
          "23": {
            "source": "                isGuest: false",
            "miss": false
          },
          "24": {
            "source": "            }",
            "miss": false
          },
          "25": {
            "source": "        };",
            "miss": false
          },
          "26": {
            "source": "",
            "miss": false
          },
          "27": {
            "source": "        options = Hoek.merge(defaults, options || {}, true);",
            "hits": 12,
            "miss": false
          },
          "28": {
            "source": "        server.inject(options, function (res) {",
            "hits": 12,
            "miss": false
          },
          "29": {
            "source": "",
            "miss": false
          },
          "30": {
            "source": "            data.customer.create = { req: options, res: res };",
            "hits": 12,
            "miss": false
          },
          "31": {
            "source": "            return next(null, server, data);",
            "hits": 12,
            "miss": false
          },
          "32": {
            "source": "        });",
            "miss": false
          },
          "33": {
            "source": "    };",
            "miss": false
          },
          "34": {
            "source": "};",
            "miss": false
          },
          "35": {
            "source": "",
            "miss": false
          },
          "36": {
            "source": "",
            "miss": false
          },
          "37": {
            "source": "module.exports.get = function (options) {",
            "hits": 1,
            "miss": false
          },
          "38": {
            "source": "",
            "miss": false
          },
          "39": {
            "source": "    return function (server, data, next) {",
            "hits": 1,
            "miss": false
          },
          "40": {
            "source": "",
            "miss": false
          },
          "41": {
            "source": "        var defaults = {",
            "hits": 1,
            "miss": false
          },
          "42": {
            "source": "            method: 'GET',",
            "miss": false
          },
          "43": {
            "source": "            url: '/customer/' + data.customer.create.res.result.id",
            "miss": false
          },
          "44": {
            "source": "        };",
            "miss": false
          },
          "45": {
            "source": "",
            "miss": false
          },
          "46": {
            "source": "        options = Hoek.merge(defaults, options || {}, true);",
            "chunks": [
              {
                "source": "        options = Hoek.merge(defaults, "
              },
              {
                "source": "options",
                "miss": "false"
              },
              {
                "source": " || {}, true);"
              }
            ],
            "hits": 1,
            "miss": true
          },
          "47": {
            "source": "        server.inject(options, function (res) {",
            "hits": 1,
            "miss": false
          },
          "48": {
            "source": "",
            "miss": false
          },
          "49": {
            "source": "            data.customer.get = { req: options, res: res };",
            "hits": 1,
            "miss": false
          },
          "50": {
            "source": "            return next(null, server, data);",
            "hits": 1,
            "miss": false
          },
          "51": {
            "source": "        });",
            "miss": false
          },
          "52": {
            "source": "    };",
            "miss": false
          },
          "53": {
            "source": "};",
            "miss": false
          },
          "54": {
            "source": "",
            "miss": false
          },
          "55": {
            "source": "",
            "miss": false
          },
          "56": {
            "source": "module.exports.update = function (options) {",
            "hits": 1,
            "miss": false
          },
          "57": {
            "source": "",
            "miss": false
          },
          "58": {
            "source": "    return function (server, data, next) {",
            "hits": 1,
            "miss": false
          },
          "59": {
            "source": "",
            "miss": false
          },
          "60": {
            "source": "        var defaults = {",
            "hits": 1,
            "miss": false
          },
          "61": {
            "source": "            method: 'PUT',",
            "miss": false
          },
          "62": {
            "source": "            url: '/customer/' + data.customer.create.res.result.id,",
            "miss": false
          },
          "63": {
            "source": "            payload: {",
            "miss": false
          },
          "64": {
            "source": "                firstName: 'Peter'",
            "miss": false
          },
          "65": {
            "source": "            }",
            "miss": false
          },
          "66": {
            "source": "        };",
            "miss": false
          },
          "67": {
            "source": "",
            "miss": false
          },
          "68": {
            "source": "        options = Hoek.merge(defaults, options || {}, true);",
            "chunks": [
              {
                "source": "        options = Hoek.merge(defaults, "
              },
              {
                "source": "options",
                "miss": "false"
              },
              {
                "source": " || {}, true);"
              }
            ],
            "hits": 1,
            "miss": true
          },
          "69": {
            "source": "        server.inject(options, function (res) {",
            "hits": 1,
            "miss": false
          },
          "70": {
            "source": "",
            "miss": false
          },
          "71": {
            "source": "            data.customer.update = { req: options, res: res };",
            "hits": 1,
            "miss": false
          },
          "72": {
            "source": "            return next(null, server, data);",
            "hits": 1,
            "miss": false
          },
          "73": {
            "source": "        });",
            "miss": false
          },
          "74": {
            "source": "    };",
            "miss": false
          },
          "75": {
            "source": "};",
            "miss": false
          },
          "76": {
            "source": "",
            "miss": false
          },
          "77": {
            "source": "",
            "miss": false
          },
          "78": {
            "source": "module.exports.retrieveByEmail = function (options) {",
            "hits": 1,
            "miss": false
          },
          "79": {
            "source": "",
            "miss": false
          },
          "80": {
            "source": "    return function (server, data, next) {",
            "hits": 1,
            "miss": false
          },
          "81": {
            "source": "",
            "miss": false
          },
          "82": {
            "source": "        var defaults = {",
            "hits": 1,
            "miss": false
          },
          "83": {
            "source": "            email: Hoek.reach(data, 'customer.create.res.result.account.email') || 'notset@walmart.com'",
            "chunks": [
              {
                "source": "            email: "
              },
              {
                "source": "Hoek.reach(data, 'customer.create.res.result.account.email')",
                "miss": "false"
              },
              {
                "source": " || 'notset@walmart.com'"
              }
            ],
            "miss": true
          },
          "84": {
            "source": "        };",
            "miss": false
          },
          "85": {
            "source": "",
            "miss": false
          },
          "86": {
            "source": "        options = Hoek.merge(defaults, options || {}, true);",
            "chunks": [
              {
                "source": "        options = Hoek.merge(defaults, "
              },
              {
                "source": "options",
                "miss": "false"
              },
              {
                "source": " || {}, true);"
              }
            ],
            "hits": 1,
            "miss": true
          },
          "87": {
            "source": "        server.plugins.user.retrieveCustomerByEmail(options, function (err, res) {",
            "hits": 1,
            "miss": false
          },
          "88": {
            "source": "",
            "miss": false
          },
          "89": {
            "source": "            data.customer.retrieveByEmail = { req: options, res: res };",
            "hits": 1,
            "miss": false
          },
          "90": {
            "source": "            return next(err, server, data);",
            "hits": 1,
            "miss": false
          },
          "91": {
            "source": "        });",
            "miss": false
          },
          "92": {
            "source": "    };",
            "miss": false
          },
          "93": {
            "source": "};",
            "miss": false
          },
          "94": {
            "source": "",
            "miss": false
          },
          "95": {
            "source": "",
            "miss": false
          },
          "96": {
            "source": "module.exports.retrieveCustomer = function (options) {",
            "hits": 1,
            "miss": false
          },
          "97": {
            "source": "",
            "miss": false
          },
          "98": {
            "source": "    return function (server, data, next) {",
            "hits": 1,
            "miss": false
          },
          "99": {
            "source": "",
            "miss": false
          },
          "100": {
            "source": "        var defaults = {",
            "hits": 1,
            "miss": false
          },
          "101": {
            "source": "            customerId: Hoek.reach(data, 'customer.create.res.result.id') || ''",
            "chunks": [
              {
                "source": "            customerId: "
              },
              {
                "source": "Hoek.reach(data, 'customer.create.res.result.id')",
                "miss": "true"
              },
              {
                "source": " || "
              },
              {
                "source": "''",
                "miss": "never"
              }
            ],
            "miss": true
          },
          "102": {
            "source": "        };",
            "miss": false
          },
          "103": {
            "source": "",
            "miss": false
          },
          "104": {
            "source": "        options = Hoek.merge(defaults, options || {}, true);",
            "chunks": [
              {
                "source": "        options = Hoek.merge(defaults, "
              },
              {
                "source": "options",
                "miss": "false"
              },
              {
                "source": " || {}, true);"
              }
            ],
            "hits": 1,
            "miss": true
          },
          "105": {
            "source": "        server.plugins.user.retrieveCustomer(options, function (err, res) {",
            "hits": 1,
            "miss": false
          },
          "106": {
            "source": "",
            "miss": false
          },
          "107": {
            "source": "            data.customer.retrieveCustomer = { req: options, res: res };",
            "hits": 1,
            "miss": false
          },
          "108": {
            "source": "            return next(err, server, data);",
            "hits": 1,
            "miss": false
          },
          "109": {
            "source": "        });",
            "miss": false
          },
          "110": {
            "source": "    };",
            "miss": false
          },
          "111": {
            "source": "};",
            "miss": false
          },
          "112": {
            "source": "",
            "miss": false
          },
          "113": {
            "source": "",
            "miss": false
          },
          "114": {
            "source": "module.exports.validateDiscount = function (options) {",
            "hits": 1,
            "miss": false
          },
          "115": {
            "source": "",
            "miss": false
          },
          "116": {
            "source": "    return function (server, data, next) {",
            "hits": 1,
            "miss": false
          },
          "117": {
            "source": "",
            "miss": false
          },
          "118": {
            "source": "        var defaults = {",
            "hits": 1,
            "miss": false
          },
          "119": {
            "source": "            method: 'POST',",
            "miss": false
          },
          "120": {
            "source": "            url: '/customer/' + data.customer.create.res.result.id + '/associate-discount',",
            "miss": false
          },
          "121": {
            "source": "            payload: {",
            "miss": false
          },
          "122": {
            "source": "                walmartEmployeeId: '123',",
            "miss": false
          },
          "123": {
            "source": "                associateCardNumber: '456'",
            "miss": false
          },
          "124": {
            "source": "            }",
            "miss": false
          },
          "125": {
            "source": "        };",
            "miss": false
          },
          "126": {
            "source": "",
            "miss": false
          },
          "127": {
            "source": "        options = Hoek.merge(defaults, options || {}, true);",
            "chunks": [
              {
                "source": "        options = Hoek.merge(defaults, "
              },
              {
                "source": "options",
                "miss": "false"
              },
              {
                "source": " || {}, true);"
              }
            ],
            "hits": 1,
            "miss": true
          },
          "128": {
            "source": "        server.inject(options, function (res) {",
            "hits": 1,
            "miss": false
          },
          "129": {
            "source": "",
            "miss": false
          },
          "130": {
            "source": "            data.customer.validateDiscount = { req: options, res: res };",
            "hits": 1,
            "miss": false
          },
          "131": {
            "source": "            return next(null, server, data);",
            "hits": 1,
            "miss": false
          },
          "132": {
            "source": "        });",
            "miss": false
          },
          "133": {
            "source": "    };",
            "miss": false
          },
          "134": {
            "source": "};",
            "miss": false
          },
          "135": {
            "source": "",
            "miss": false
          },
          "136": {
            "source": "",
            "miss": false
          },
          "137": {
            "source": "module.exports.deleteDiscount = function (options) {",
            "hits": 1,
            "miss": false
          },
          "138": {
            "source": "",
            "miss": false
          },
          "139": {
            "source": "    return function (server, data, next) {",
            "hits": 1,
            "miss": false
          },
          "140": {
            "source": "",
            "miss": false
          },
          "141": {
            "source": "        var defaults = {",
            "hits": 1,
            "miss": false
          },
          "142": {
            "source": "            method: 'DELETE',",
            "miss": false
          },
          "143": {
            "source": "            url: '/customer/' + data.customer.create.res.result.id + '/associate-discount'",
            "miss": false
          },
          "144": {
            "source": "        };",
            "miss": false
          },
          "145": {
            "source": "",
            "miss": false
          },
          "146": {
            "source": "        options = Hoek.merge(defaults, options || {}, true);",
            "chunks": [
              {
                "source": "        options = Hoek.merge(defaults, "
              },
              {
                "source": "options",
                "miss": "false"
              },
              {
                "source": " || {}, true);"
              }
            ],
            "hits": 1,
            "miss": true
          },
          "147": {
            "source": "        server.inject(options, function (res) {",
            "hits": 1,
            "miss": false
          },
          "148": {
            "source": "",
            "miss": false
          },
          "149": {
            "source": "            data.customer.deleteDiscount = { req: options, res: res };",
            "hits": 1,
            "miss": false
          },
          "150": {
            "source": "            return next(null, server, data);",
            "hits": 1,
            "miss": false
          },
          "151": {
            "source": "        });",
            "miss": false
          },
          "152": {
            "source": "    };",
            "miss": false
          },
          "153": {
            "source": "};",
            "miss": false
          },
          "154": {
            "source": "",
            "miss": false
          },
          "155": {
            "source": "",
            "miss": false
          },
          "156": {
            "source": "module.exports.createPayment = function (options) {",
            "hits": 1,
            "miss": false
          },
          "157": {
            "source": "",
            "miss": false
          },
          "158": {
            "source": "    return function (server, data, next) {",
            "hits": 1,
            "miss": false
          },
          "159": {
            "source": "",
            "miss": false
          },
          "160": {
            "source": "        var defaults = {",
            "hits": 1,
            "miss": false
          },
          "161": {
            "source": "            customerId: Hoek.reach(data, 'customer.create.res.result.id'),",
            "miss": false
          },
          "162": {
            "source": "            payment: {",
            "miss": false
          },
          "163": {
            "source": "                paymentPreference: {",
            "miss": false
          },
          "164": {
            "source": "                    displayLabel: null,",
            "miss": false
          },
          "165": {
            "source": "                    displayString: null,",
            "miss": false
          },
          "166": {
            "source": "                    piHashId: Hoek.reach(data, 'payment.generatePiHash.res'),",
            "miss": false
          },
          "167": {
            "source": "                    defaultPreference: false,",
            "miss": false
          },
          "168": {
            "source": "                    inComplete: false",
            "miss": false
          },
          "169": {
            "source": "                }",
            "miss": false
          },
          "170": {
            "source": "            }",
            "miss": false
          },
          "171": {
            "source": "        };",
            "miss": false
          },
          "172": {
            "source": "",
            "miss": false
          },
          "173": {
            "source": "        options = Hoek.merge(defaults, options || {}, true);",
            "chunks": [
              {
                "source": "        options = Hoek.merge(defaults, "
              },
              {
                "source": "options",
                "miss": "false"
              },
              {
                "source": " || {}, true);"
              }
            ],
            "hits": 1,
            "miss": true
          },
          "174": {
            "source": "        server.plugins.user.createPayment(options, function (err, res) {",
            "hits": 1,
            "miss": false
          },
          "175": {
            "source": "",
            "miss": false
          },
          "176": {
            "source": "            data.customer.createPayment = { req: options, res: res };",
            "hits": 1,
            "miss": false
          },
          "177": {
            "source": "            next(err, server, data);",
            "hits": 1,
            "miss": false
          },
          "178": {
            "source": "        });",
            "miss": false
          },
          "179": {
            "source": "    };",
            "miss": false
          },
          "180": {
            "source": "};",
            "miss": false
          },
          "181": {
            "source": "",
            "miss": false
          },
          "182": {
            "source": "",
            "miss": false
          },
          "183": {
            "source": "module.exports.createAssociate = function (options) {",
            "hits": 1,
            "miss": false
          },
          "184": {
            "source": "",
            "miss": false
          },
          "185": {
            "source": "    return function (server, data, next) {",
            "hits": 0,
            "miss": true
          },
          "186": {
            "source": "",
            "miss": false
          },
          "187": {
            "source": "        var defaults = {",
            "hits": 0,
            "miss": true
          },
          "188": {
            "source": "            person: {",
            "miss": false
          },
          "189": {
            "source": "                walmartEmployeeId: '494708008',",
            "miss": false
          },
          "190": {
            "source": "                associateCardNumber: '6006430002512598',",
            "miss": false
          },
          "191": {
            "source": "                accounts: [",
            "miss": false
          },
          "192": {
            "source": "                    {",
            "miss": false
          },
          "193": {
            "source": "                        autoRenew: true,",
            "miss": false
          },
          "194": {
            "source": "                        primaryContactInformation: {",
            "miss": false
          },
          "195": {
            "source": "                            phone: {",
            "miss": false
          },
          "196": {
            "source": "                                completeNumber: '360-555-5555'",
            "miss": false
          },
          "197": {
            "source": "                            },",
            "miss": false
          },
          "198": {
            "source": "                            email: {",
            "miss": false
          },
          "199": {
            "source": "                                emailAddress: 'emailValue@ww.com'",
            "miss": false
          },
          "200": {
            "source": "                            },",
            "miss": false
          },
          "201": {
            "source": "                            addressZone: {",
            "miss": false
          },
          "202": {
            "source": "                                city: 'city',",
            "miss": false
          },
          "203": {
            "source": "                                postalCode: 'postalCode'",
            "miss": false
          },
          "204": {
            "source": "                            }",
            "miss": false
          },
          "205": {
            "source": "                        }",
            "miss": false
          },
          "206": {
            "source": "                    }",
            "miss": false
          },
          "207": {
            "source": "                ],",
            "miss": false
          },
          "208": {
            "source": "                names: [",
            "miss": false
          },
          "209": {
            "source": "                    {",
            "miss": false
          },
          "210": {
            "source": "                        personName: {",
            "miss": false
          },
          "211": {
            "source": "                            firstName: 'Tom',",
            "miss": false
          },
          "212": {
            "source": "                            lastName: 'Smith'",
            "miss": false
          },
          "213": {
            "source": "                        }",
            "miss": false
          },
          "214": {
            "source": "                    }",
            "miss": false
          },
          "215": {
            "source": "                ]",
            "miss": false
          },
          "216": {
            "source": "            }",
            "miss": false
          },
          "217": {
            "source": "        };",
            "miss": false
          },
          "218": {
            "source": "",
            "miss": false
          },
          "219": {
            "source": "        options = Hoek.merge(defaults, options || {}, true);",
            "hits": 0,
            "miss": true
          },
          "220": {
            "source": "        server.plugins.user.createCustomer(options, function (err, customer) {",
            "hits": 0,
            "miss": true
          },
          "221": {
            "source": "",
            "miss": false
          },
          "222": {
            "source": "            if (err) {",
            "hits": 0,
            "miss": true
          },
          "223": {
            "source": "                err = Boom.wrap(err);",
            "hits": 0,
            "miss": true
          },
          "224": {
            "source": "            }",
            "miss": false
          },
          "225": {
            "source": "",
            "miss": false
          },
          "226": {
            "source": "            data.customer.createAssociate = { err: err, req: options, res: { result: customer } };",
            "hits": 0,
            "miss": true
          },
          "227": {
            "source": "            next(err, server, data);",
            "hits": 0,
            "miss": true
          },
          "228": {
            "source": "        });",
            "miss": false
          },
          "229": {
            "source": "    };",
            "miss": false
          },
          "230": {
            "source": "};",
            "miss": false
          },
          "231": {
            "source": "",
            "miss": false
          },
          "232": {
            "source": "",
            "miss": false
          },
          "233": {
            "source": "module.exports.convert = function (options) {",
            "hits": 1,
            "miss": false
          },
          "234": {
            "source": "",
            "miss": false
          },
          "235": {
            "source": "    return function (server, data, next) {",
            "hits": 0,
            "miss": true
          },
          "236": {
            "source": "",
            "miss": false
          },
          "237": {
            "source": "        var defaults = {",
            "hits": 0,
            "miss": true
          },
          "238": {
            "source": "            customer: Hoek.reach(data, 'customer.retrieveCustomer.res') || {}",
            "chunks": [
              {
                "source": "            customer: "
              },
              {
                "source": "Hoek.reach(data, 'customer.retrieveCustomer.res')",
                "miss": "never"
              },
              {
                "source": " || "
              },
              {
                "source": "{}",
                "miss": "never"
              }
            ],
            "miss": true
          },
          "239": {
            "source": "        };",
            "miss": false
          },
          "240": {
            "source": "",
            "miss": false
          },
          "241": {
            "source": "        options = Hoek.merge(defaults, options || {}, true);",
            "hits": 0,
            "miss": true
          },
          "242": {
            "source": "        data.customer.convert = {",
            "hits": 0,
            "miss": true
          },
          "243": {
            "source": "            req: options,",
            "miss": false
          },
          "244": {
            "source": "            res: server.plugins.user.convert.customer(options.customer)",
            "miss": false
          },
          "245": {
            "source": "        };",
            "miss": false
          },
          "246": {
            "source": "        return next(null, server, data);",
            "hits": 0,
            "miss": true
          },
          "247": {
            "source": "    };",
            "miss": false
          },
          "248": {
            "source": "};",
            "miss": false
          },
          "249": {
            "source": "",
            "miss": false
          }
        }
      },
      {
        "filename": "lib/customer/shippingAddress.js",
        "percent": 55.00000000000001,
        "hits": 44,
        "misses": 36,
        "sloc": 80,
        "source": {
          "1": {
            "source": "// Load modules",
            "miss": false
          },
          "2": {
            "source": "",
            "miss": false
          },
          "3": {
            "source": "var Hoek = require('hoek');",
            "hits": 1,
            "miss": false
          },
          "4": {
            "source": "",
            "miss": false
          },
          "5": {
            "source": "",
            "miss": false
          },
          "6": {
            "source": "module.exports.create = function (options) {",
            "hits": 1,
            "miss": false
          },
          "7": {
            "source": "",
            "miss": false
          },
          "8": {
            "source": "    return function (server, data, next) {",
            "hits": 0,
            "miss": true
          },
          "9": {
            "source": "",
            "miss": false
          },
          "10": {
            "source": "        var defaults = {",
            "hits": 0,
            "miss": true
          },
          "11": {
            "source": "            method: 'POST',",
            "miss": false
          },
          "12": {
            "source": "            url: '/customer/' + data.customer.create.res.result.id + '/shipping-address',",
            "miss": false
          },
          "13": {
            "source": "            payload: {",
            "miss": false
          },
          "14": {
            "source": "                firstName: 'Mikasa',",
            "miss": false
          },
          "15": {
            "source": "                lastName: 'Ackerman',",
            "miss": false
          },
          "16": {
            "source": "                addressLineOne: '850 Cherry Avenue',",
            "miss": false
          },
          "17": {
            "source": "                postalCode: '94066',",
            "miss": false
          },
          "18": {
            "source": "                phone: '555-555-5555'",
            "miss": false
          },
          "19": {
            "source": "            }",
            "miss": false
          },
          "20": {
            "source": "        };",
            "miss": false
          },
          "21": {
            "source": "",
            "miss": false
          },
          "22": {
            "source": "        options = Hoek.merge(defaults, options || {}, true);",
            "hits": 0,
            "miss": true
          },
          "23": {
            "source": "        server.inject(options, function (res) {",
            "hits": 0,
            "miss": true
          },
          "24": {
            "source": "",
            "miss": false
          },
          "25": {
            "source": "            data.customer.shippingAddress.create = { req: options, res: res };",
            "hits": 0,
            "miss": true
          },
          "26": {
            "source": "            return next(null, server, data);",
            "hits": 0,
            "miss": true
          },
          "27": {
            "source": "        });",
            "miss": false
          },
          "28": {
            "source": "    };",
            "miss": false
          },
          "29": {
            "source": "};",
            "miss": false
          },
          "30": {
            "source": "",
            "miss": false
          },
          "31": {
            "source": "",
            "miss": false
          },
          "32": {
            "source": "module.exports.getAll = function (options) {",
            "hits": 1,
            "miss": false
          },
          "33": {
            "source": "",
            "miss": false
          },
          "34": {
            "source": "    return function (server, data, next) {",
            "hits": 0,
            "miss": true
          },
          "35": {
            "source": "",
            "miss": false
          },
          "36": {
            "source": "        var defaults = {",
            "hits": 0,
            "miss": true
          },
          "37": {
            "source": "            method: 'GET',",
            "miss": false
          },
          "38": {
            "source": "            url: '/customer/' + data.customer.create.res.result.id + '/shipping-address'",
            "miss": false
          },
          "39": {
            "source": "        };",
            "miss": false
          },
          "40": {
            "source": "",
            "miss": false
          },
          "41": {
            "source": "        options = Hoek.merge(defaults, options || {}, true);",
            "hits": 0,
            "miss": true
          },
          "42": {
            "source": "        server.inject(options, function (res) {",
            "hits": 0,
            "miss": true
          },
          "43": {
            "source": "",
            "miss": false
          },
          "44": {
            "source": "            data.customer.shippingAddress.getAll = { req: options, res: res };",
            "hits": 0,
            "miss": true
          },
          "45": {
            "source": "            return next(null, server, data);",
            "hits": 0,
            "miss": true
          },
          "46": {
            "source": "        });",
            "miss": false
          },
          "47": {
            "source": "    };",
            "miss": false
          },
          "48": {
            "source": "};",
            "miss": false
          },
          "49": {
            "source": "",
            "miss": false
          },
          "50": {
            "source": "",
            "miss": false
          },
          "51": {
            "source": "module.exports.get = function (options) {",
            "hits": 1,
            "miss": false
          },
          "52": {
            "source": "",
            "miss": false
          },
          "53": {
            "source": "    return function (server, data, next) {",
            "hits": 0,
            "miss": true
          },
          "54": {
            "source": "",
            "miss": false
          },
          "55": {
            "source": "        var customerId = data.customer.create.res.result.id;",
            "hits": 0,
            "miss": true
          },
          "56": {
            "source": "        var shippingAddressId = data.customer.shippingAddress.create.res.result.id;",
            "hits": 0,
            "miss": true
          },
          "57": {
            "source": "",
            "miss": false
          },
          "58": {
            "source": "        var defaults = {",
            "hits": 0,
            "miss": true
          },
          "59": {
            "source": "            method: 'GET',",
            "miss": false
          },
          "60": {
            "source": "            url: '/customer/' + customerId + '/shipping-address/' + shippingAddressId",
            "miss": false
          },
          "61": {
            "source": "        };",
            "miss": false
          },
          "62": {
            "source": "",
            "miss": false
          },
          "63": {
            "source": "        options = Hoek.merge(defaults, options || {}, true);",
            "hits": 0,
            "miss": true
          },
          "64": {
            "source": "        server.inject(options, function (res) {",
            "hits": 0,
            "miss": true
          },
          "65": {
            "source": "",
            "miss": false
          },
          "66": {
            "source": "            data.customer.shippingAddress.get = { req: options, res: res };",
            "hits": 0,
            "miss": true
          },
          "67": {
            "source": "            return next(null, server, data);",
            "hits": 0,
            "miss": true
          },
          "68": {
            "source": "        });",
            "miss": false
          },
          "69": {
            "source": "    };",
            "miss": false
          },
          "70": {
            "source": "};",
            "miss": false
          },
          "71": {
            "source": "",
            "miss": false
          },
          "72": {
            "source": "",
            "miss": false
          },
          "73": {
            "source": "module.exports.update = function (options) {",
            "hits": 1,
            "miss": false
          },
          "74": {
            "source": "",
            "miss": false
          },
          "75": {
            "source": "    return function (server, data, next) {",
            "hits": 0,
            "miss": true
          },
          "76": {
            "source": "",
            "miss": false
          },
          "77": {
            "source": "        var customerId = data.customer.create.res.result.id;",
            "hits": 0,
            "miss": true
          },
          "78": {
            "source": "        var shippingAddressId = data.customer.shippingAddress.create.res.result.id;",
            "hits": 0,
            "miss": true
          },
          "79": {
            "source": "",
            "miss": false
          },
          "80": {
            "source": "        var defaults = {",
            "hits": 0,
            "miss": true
          },
          "81": {
            "source": "            method: 'PUT',",
            "miss": false
          },
          "82": {
            "source": "            url: '/customer/' + customerId + '/shipping-address/' + shippingAddressId",
            "miss": false
          },
          "83": {
            "source": "        };",
            "miss": false
          },
          "84": {
            "source": "",
            "miss": false
          },
          "85": {
            "source": "        options = Hoek.merge(defaults, options || {}, true);",
            "hits": 0,
            "miss": true
          },
          "86": {
            "source": "        server.inject(options, function (res) {",
            "hits": 0,
            "miss": true
          },
          "87": {
            "source": "",
            "miss": false
          },
          "88": {
            "source": "            data.customer.shippingAddress.update = { req: options, res: res };",
            "hits": 0,
            "miss": true
          },
          "89": {
            "source": "            return next(null, server, data);",
            "hits": 0,
            "miss": true
          },
          "90": {
            "source": "        });",
            "miss": false
          },
          "91": {
            "source": "    };",
            "miss": false
          },
          "92": {
            "source": "};",
            "miss": false
          },
          "93": {
            "source": "",
            "miss": false
          },
          "94": {
            "source": "",
            "miss": false
          },
          "95": {
            "source": "module.exports.delete = function (options) {",
            "hits": 1,
            "miss": false
          },
          "96": {
            "source": "",
            "miss": false
          },
          "97": {
            "source": "    return function (server, data, next) {",
            "hits": 0,
            "miss": true
          },
          "98": {
            "source": "",
            "miss": false
          },
          "99": {
            "source": "        var customerId = data.customer.create.res.result.id;",
            "hits": 0,
            "miss": true
          },
          "100": {
            "source": "        var shippingAddressId = data.customer.shippingAddress.create.res.result.id;",
            "hits": 0,
            "miss": true
          },
          "101": {
            "source": "",
            "miss": false
          },
          "102": {
            "source": "        var defaults = {",
            "hits": 0,
            "miss": true
          },
          "103": {
            "source": "            method: 'DELETE',",
            "miss": false
          },
          "104": {
            "source": "            url: '/customer/' + customerId + '/shipping-address/' + shippingAddressId",
            "miss": false
          },
          "105": {
            "source": "        };",
            "miss": false
          },
          "106": {
            "source": "",
            "miss": false
          },
          "107": {
            "source": "        options = Hoek.merge(defaults, options || {}, true);",
            "hits": 0,
            "miss": true
          },
          "108": {
            "source": "        server.inject(options, function (res) {",
            "hits": 0,
            "miss": true
          },
          "109": {
            "source": "",
            "miss": false
          },
          "110": {
            "source": "            data.customer.shippingAddress.delete = { req: options, res: res };",
            "hits": 0,
            "miss": true
          },
          "111": {
            "source": "            return next(null, server, data);",
            "hits": 0,
            "miss": true
          },
          "112": {
            "source": "        });",
            "miss": false
          },
          "113": {
            "source": "    };",
            "miss": false
          },
          "114": {
            "source": "};",
            "miss": false
          },
          "115": {
            "source": "",
            "miss": false
          }
        }
      },
      {
        "filename": "lib/encryption/index.js",
        "percent": 93.58974358974359,
        "hits": 73,
        "misses": 5,
        "sloc": 78,
        "source": {
          "1": {
            "source": "// Load modules",
            "miss": false
          },
          "2": {
            "source": "",
            "miss": false
          },
          "3": {
            "source": "var Async = require('async');",
            "hits": 1,
            "miss": false
          },
          "4": {
            "source": "var Hoek = require('hoek');",
            "hits": 1,
            "miss": false
          },
          "5": {
            "source": "var Nipple = require('nipple');",
            "hits": 1,
            "miss": false
          },
          "6": {
            "source": "var Vm = require('vm');",
            "hits": 1,
            "miss": false
          },
          "7": {
            "source": "",
            "miss": false
          },
          "8": {
            "source": "",
            "miss": false
          },
          "9": {
            "source": "// Declare internals",
            "miss": false
          },
          "10": {
            "source": "",
            "miss": false
          },
          "11": {
            "source": "var internals = {",
            "hits": 1,
            "miss": false
          },
          "12": {
            "source": "    host: 'https://securedataweb.qa.walmart.com',",
            "miss": false
          },
          "13": {
            "source": "    keyPath: '/pie/v1/wwwus_pie_wml_qa/getkey.js',",
            "miss": false
          },
          "14": {
            "source": "    encPath: '/pie/v1/encryption.js',",
            "miss": false
          },
          "15": {
            "source": "    encContext: Vm.createContext()",
            "miss": false
          },
          "16": {
            "source": "};",
            "miss": false
          },
          "17": {
            "source": "",
            "miss": false
          },
          "18": {
            "source": "",
            "miss": false
          },
          "19": {
            "source": "module.exports.init = function () {",
            "hits": 1,
            "miss": false
          },
          "20": {
            "source": "",
            "miss": false
          },
          "21": {
            "source": "    return function (done) {",
            "hits": 33,
            "miss": false
          },
          "22": {
            "source": "",
            "miss": false
          },
          "23": {
            "source": "        var setupKey = function (next) {",
            "hits": 33,
            "miss": false
          },
          "24": {
            "source": "",
            "miss": false
          },
          "25": {
            "source": "            Nipple.get(internals.host + internals.keyPath, function (err, res, payload) {",
            "hits": 3,
            "miss": false
          },
          "26": {
            "source": "",
            "miss": false
          },
          "27": {
            "source": "                if (err) {",
            "chunks": [
              {
                "source": "                if ("
              },
              {
                "source": "err",
                "miss": "false"
              },
              {
                "source": ") {"
              }
            ],
            "hits": 3,
            "miss": true
          },
          "28": {
            "source": "                    return next(err);",
            "hits": 0,
            "miss": true
          },
          "29": {
            "source": "                }",
            "miss": false
          },
          "30": {
            "source": "",
            "miss": false
          },
          "31": {
            "source": "                if (Hoek.reach(internals, 'encContext.PIE')) {",
            "hits": 3,
            "miss": false
          },
          "32": {
            "source": "                    return next();",
            "hits": 2,
            "miss": false
          },
          "33": {
            "source": "                }",
            "miss": false
          },
          "34": {
            "source": "",
            "miss": false
          },
          "35": {
            "source": "                Vm.runInContext(payload, internals.encContext, 'setupKey.vm');",
            "hits": 1,
            "miss": false
          },
          "36": {
            "source": "                next();",
            "hits": 1,
            "miss": false
          },
          "37": {
            "source": "            });",
            "miss": false
          },
          "38": {
            "source": "        };",
            "miss": false
          },
          "39": {
            "source": "",
            "miss": false
          },
          "40": {
            "source": "        var setupEncryption = function (next) {",
            "hits": 33,
            "miss": false
          },
          "41": {
            "source": "",
            "miss": false
          },
          "42": {
            "source": "            Nipple.get(internals.host + internals.encPath, function (err, res, payload) {",
            "hits": 3,
            "miss": false
          },
          "43": {
            "source": "",
            "miss": false
          },
          "44": {
            "source": "                if (err) {",
            "chunks": [
              {
                "source": "                if ("
              },
              {
                "source": "err",
                "miss": "false"
              },
              {
                "source": ") {"
              }
            ],
            "hits": 3,
            "miss": true
          },
          "45": {
            "source": "                    return next(err);",
            "hits": 0,
            "miss": true
          },
          "46": {
            "source": "                }",
            "miss": false
          },
          "47": {
            "source": "",
            "miss": false
          },
          "48": {
            "source": "                if (Hoek.reach(internals, 'encContext.ProtectPANandCVV')) {",
            "hits": 3,
            "miss": false
          },
          "49": {
            "source": "                    return next();",
            "hits": 2,
            "miss": false
          },
          "50": {
            "source": "                }",
            "miss": false
          },
          "51": {
            "source": "",
            "miss": false
          },
          "52": {
            "source": "                Vm.runInContext(payload, internals.encContext, 'setupEncryption.vm');",
            "hits": 1,
            "miss": false
          },
          "53": {
            "source": "                next();",
            "hits": 1,
            "miss": false
          },
          "54": {
            "source": "            });",
            "miss": false
          },
          "55": {
            "source": "        };",
            "miss": false
          },
          "56": {
            "source": "",
            "miss": false
          },
          "57": {
            "source": "        // Try to avoid downloading again",
            "miss": false
          },
          "58": {
            "source": "        if (Hoek.reach(internals, 'encContext.ProtectPANandCVV')) {",
            "hits": 33,
            "miss": false
          },
          "59": {
            "source": "            return done();",
            "hits": 30,
            "miss": false
          },
          "60": {
            "source": "        }",
            "miss": false
          },
          "61": {
            "source": "",
            "miss": false
          },
          "62": {
            "source": "        Async.series([",
            "hits": 3,
            "miss": false
          },
          "63": {
            "source": "            setupKey,",
            "miss": false
          },
          "64": {
            "source": "            setupEncryption",
            "miss": false
          },
          "65": {
            "source": "        ], function (err, results) {",
            "miss": false
          },
          "66": {
            "source": "",
            "miss": false
          },
          "67": {
            "source": "            done(err);",
            "hits": 3,
            "miss": false
          },
          "68": {
            "source": "        });",
            "miss": false
          },
          "69": {
            "source": "    };",
            "miss": false
          },
          "70": {
            "source": "};",
            "miss": false
          },
          "71": {
            "source": "",
            "miss": false
          },
          "72": {
            "source": "module.exports.card = function (options) {",
            "hits": 1,
            "miss": false
          },
          "73": {
            "source": "",
            "miss": false
          },
          "74": {
            "source": "    return function (server, data, next) {",
            "hits": 1,
            "miss": false
          },
          "75": {
            "source": "",
            "miss": false
          },
          "76": {
            "source": "        var defaults = {",
            "hits": 1,
            "miss": false
          },
          "77": {
            "source": "            account: '4716118355162725',",
            "miss": false
          },
          "78": {
            "source": "            cvv: '123',",
            "miss": false
          },
          "79": {
            "source": "            pmId: 'VISA'",
            "miss": false
          },
          "80": {
            "source": "        };",
            "miss": false
          },
          "81": {
            "source": "",
            "miss": false
          },
          "82": {
            "source": "        options = Hoek.merge(defaults, options || {}, true);",
            "chunks": [
              {
                "source": "        options = Hoek.merge(defaults, "
              },
              {
                "source": "options",
                "miss": "false"
              },
              {
                "source": " || {}, true);"
              }
            ],
            "hits": 1,
            "miss": true
          },
          "83": {
            "source": "        data.encryption.card = {",
            "hits": 1,
            "miss": false
          },
          "84": {
            "source": "            req: options,",
            "miss": false
          },
          "85": {
            "source": "            res: exports.encryptCard(options)",
            "miss": false
          },
          "86": {
            "source": "        };",
            "miss": false
          },
          "87": {
            "source": "",
            "miss": false
          },
          "88": {
            "source": "        return next(null, server, data);",
            "hits": 1,
            "miss": false
          },
          "89": {
            "source": "    };",
            "miss": false
          },
          "90": {
            "source": "};",
            "miss": false
          },
          "91": {
            "source": "",
            "miss": false
          },
          "92": {
            "source": "module.exports.encryptCard = function (options) {",
            "hits": 1,
            "miss": false
          },
          "93": {
            "source": "",
            "miss": false
          },
          "94": {
            "source": "    var results = internals.encContext.ProtectPANandCVV(options.account, options.cvv, true);",
            "hits": 4,
            "miss": false
          },
          "95": {
            "source": "    var PIE = internals.encContext.PIE;",
            "hits": 4,
            "miss": false
          },
          "96": {
            "source": "",
            "miss": false
          },
          "97": {
            "source": "    var data = {",
            "hits": 4,
            "miss": false
          },
          "98": {
            "source": "        cardType: options.pmId,",
            "miss": false
          },
          "99": {
            "source": "        phase: PIE.phase + '',",
            "miss": false
          },
          "100": {
            "source": "        encryptedPan: results[0],",
            "miss": false
          },
          "101": {
            "source": "        encryptedCvv: results[1],",
            "miss": false
          },
          "102": {
            "source": "        keyId: PIE.key_id,",
            "miss": false
          },
          "103": {
            "source": "        integrityCheck: results[2]",
            "miss": false
          },
          "104": {
            "source": "    };",
            "miss": false
          },
          "105": {
            "source": "",
            "miss": false
          },
          "106": {
            "source": "    return data;",
            "hits": 4,
            "miss": false
          },
          "107": {
            "source": "};",
            "miss": false
          },
          "108": {
            "source": "",
            "miss": false
          }
        }
      },
      {
        "filename": "lib/groupings/index.js",
        "percent": 77.77777777777779,
        "hits": 21,
        "misses": 6,
        "sloc": 27,
        "source": {
          "1": {
            "source": "// Load modules",
            "miss": false
          },
          "2": {
            "source": "",
            "miss": false
          },
          "3": {
            "source": "var Hoek = require('hoek');",
            "hits": 1,
            "miss": false
          },
          "4": {
            "source": "var Tools = require('../tools');",
            "hits": 1,
            "miss": false
          },
          "5": {
            "source": "",
            "miss": false
          },
          "6": {
            "source": "",
            "miss": false
          },
          "7": {
            "source": "module.exports.getBundle = function (options) {",
            "hits": 1,
            "miss": false
          },
          "8": {
            "source": "",
            "miss": false
          },
          "9": {
            "source": "    return function (server, data, next) {",
            "hits": 0,
            "miss": true
          },
          "10": {
            "source": "",
            "miss": false
          },
          "11": {
            "source": "        var defaults = {",
            "hits": 0,
            "miss": true
          },
          "12": {
            "source": "            id: '24358924'",
            "miss": false
          },
          "13": {
            "source": "        };",
            "miss": false
          },
          "14": {
            "source": "",
            "miss": false
          },
          "15": {
            "source": "        options = Hoek.merge(defaults, options || {}, true);",
            "hits": 0,
            "miss": true
          },
          "16": {
            "source": "        server.plugins.groupings.getBundle(options, function (err, res) {",
            "hits": 0,
            "miss": true
          },
          "17": {
            "source": "",
            "miss": false
          },
          "18": {
            "source": "            data.groupings.getBundle = { req: options, res: res };",
            "hits": 0,
            "miss": true
          },
          "19": {
            "source": "            return next(err, server, data);",
            "hits": 0,
            "miss": true
          },
          "20": {
            "source": "        });",
            "miss": false
          },
          "21": {
            "source": "    };",
            "miss": false
          },
          "22": {
            "source": "};",
            "miss": false
          },
          "23": {
            "source": "",
            "miss": false
          },
          "24": {
            "source": "",
            "miss": false
          },
          "25": {
            "source": "module.exports.getEligibleCarePlans = function (options) {",
            "hits": 1,
            "miss": false
          },
          "26": {
            "source": "",
            "miss": false
          },
          "27": {
            "source": "    return function (server, data, next) {",
            "hits": 2,
            "miss": false
          },
          "28": {
            "source": "",
            "miss": false
          },
          "29": {
            "source": "        var defaults = {",
            "hits": 2,
            "miss": false
          },
          "30": {
            "source": "            itemId: '24516217'",
            "miss": false
          },
          "31": {
            "source": "        };",
            "miss": false
          },
          "32": {
            "source": "",
            "miss": false
          },
          "33": {
            "source": "        options = Hoek.merge(defaults, options || {}, true);",
            "hits": 2,
            "miss": false
          },
          "34": {
            "source": "        server.plugins.groupings.getEligibleCarePlans(options, function (err, res) {",
            "hits": 2,
            "miss": false
          },
          "35": {
            "source": "",
            "miss": false
          },
          "36": {
            "source": "            data.groupings.getEligibleCarePlans = { req: options, res: res };",
            "hits": 2,
            "miss": false
          },
          "37": {
            "source": "            return next(err, server, data);",
            "hits": 2,
            "miss": false
          },
          "38": {
            "source": "        });",
            "miss": false
          },
          "39": {
            "source": "    };",
            "miss": false
          },
          "40": {
            "source": "};",
            "miss": false
          },
          "41": {
            "source": "",
            "miss": false
          }
        }
      },
      {
        "filename": "lib/health/index.js",
        "percent": 60,
        "hits": 9,
        "misses": 6,
        "sloc": 15,
        "source": {
          "1": {
            "source": "// Load modules",
            "miss": false
          },
          "2": {
            "source": "",
            "miss": false
          },
          "3": {
            "source": "var Hoek = require('hoek');",
            "hits": 1,
            "miss": false
          },
          "4": {
            "source": "",
            "miss": false
          },
          "5": {
            "source": "",
            "miss": false
          },
          "6": {
            "source": "module.exports.get = function (options) {",
            "hits": 1,
            "miss": false
          },
          "7": {
            "source": "",
            "miss": false
          },
          "8": {
            "source": "    return function (server, data, next) {",
            "hits": 0,
            "miss": true
          },
          "9": {
            "source": "",
            "miss": false
          },
          "10": {
            "source": "        var defaults = {",
            "hits": 0,
            "miss": true
          },
          "11": {
            "source": "            method: 'GET',",
            "miss": false
          },
          "12": {
            "source": "            url: '/health'",
            "miss": false
          },
          "13": {
            "source": "        };",
            "miss": false
          },
          "14": {
            "source": "",
            "miss": false
          },
          "15": {
            "source": "        options = Hoek.merge(defaults, options || {}, true);",
            "hits": 0,
            "miss": true
          },
          "16": {
            "source": "        server.inject(options, function (res) {",
            "hits": 0,
            "miss": true
          },
          "17": {
            "source": "",
            "miss": false
          },
          "18": {
            "source": "            data.health.get = { req: options, res: res };",
            "hits": 0,
            "miss": true
          },
          "19": {
            "source": "            return next(null, server, data);",
            "hits": 0,
            "miss": true
          },
          "20": {
            "source": "        });",
            "miss": false
          },
          "21": {
            "source": "    };",
            "miss": false
          },
          "22": {
            "source": "};",
            "miss": false
          }
        }
      },
      {
        "filename": "lib/idml/index.js",
        "percent": 57.14285714285714,
        "hits": 8,
        "misses": 6,
        "sloc": 14,
        "source": {
          "1": {
            "source": "// Load modules",
            "miss": false
          },
          "2": {
            "source": "",
            "miss": false
          },
          "3": {
            "source": "var Hoek = require('hoek');",
            "hits": 1,
            "miss": false
          },
          "4": {
            "source": "",
            "miss": false
          },
          "5": {
            "source": "",
            "miss": false
          },
          "6": {
            "source": "module.exports.retrieve = function (options) {",
            "hits": 1,
            "miss": false
          },
          "7": {
            "source": "",
            "miss": false
          },
          "8": {
            "source": "    return function (server, data, next) {",
            "hits": 0,
            "miss": true
          },
          "9": {
            "source": "",
            "miss": false
          },
          "10": {
            "source": "        var defaults = {",
            "hits": 0,
            "miss": true
          },
          "11": {
            "source": "            id: '10450115'",
            "miss": false
          },
          "12": {
            "source": "        };",
            "miss": false
          },
          "13": {
            "source": "",
            "miss": false
          },
          "14": {
            "source": "        options = Hoek.merge(defaults, options || {}, true);",
            "hits": 0,
            "miss": true
          },
          "15": {
            "source": "        server.plugins.idml.get(options, function (err, res) {",
            "hits": 0,
            "miss": true
          },
          "16": {
            "source": "",
            "miss": false
          },
          "17": {
            "source": "            data.idml.retrieve = { req: options, res: res };",
            "hits": 0,
            "miss": true
          },
          "18": {
            "source": "            return next(err, server, data);",
            "hits": 0,
            "miss": true
          },
          "19": {
            "source": "        });",
            "miss": false
          },
          "20": {
            "source": "    };",
            "miss": false
          },
          "21": {
            "source": "};",
            "miss": false
          },
          "22": {
            "source": "",
            "miss": false
          }
        }
      },
      {
        "filename": "lib/isd/index.js",
        "percent": 90,
        "hits": 18,
        "misses": 2,
        "sloc": 20,
        "source": {
          "1": {
            "source": "// Load modules",
            "miss": false
          },
          "2": {
            "source": "",
            "miss": false
          },
          "3": {
            "source": "var Hoek = require('hoek');",
            "hits": 1,
            "miss": false
          },
          "4": {
            "source": "",
            "miss": false
          },
          "5": {
            "source": "",
            "miss": false
          },
          "6": {
            "source": "module.exports.getAssociateDiscount = function (options) {",
            "hits": 1,
            "miss": false
          },
          "7": {
            "source": "",
            "miss": false
          },
          "8": {
            "source": "    return function (server, data, next) {",
            "hits": 0,
            "miss": true
          },
          "9": {
            "source": "",
            "miss": false
          },
          "10": {
            "source": "        return next(null, server, data);",
            "hits": 0,
            "miss": true
          },
          "11": {
            "source": "/*",
            "miss": false
          },
          "12": {
            "source": "        var defaults = {",
            "miss": false
          },
          "13": {
            "source": "            payload: {",
            "miss": false
          },
          "14": {
            "source": "                walmartEmployeeId: '494708008',",
            "miss": false
          },
          "15": {
            "source": "                associateCardNumber: '6006430002512598'",
            "miss": false
          },
          "16": {
            "source": "            }",
            "miss": false
          },
          "17": {
            "source": "        };",
            "miss": false
          },
          "18": {
            "source": "",
            "miss": false
          },
          "19": {
            "source": "        options = Hoek.merge(defaults, options || {}, true);",
            "miss": false
          },
          "20": {
            "source": "        server.plugins.isd.getAssociateDiscount(options, function (err, res) {",
            "miss": false
          },
          "21": {
            "source": "",
            "miss": false
          },
          "22": {
            "source": "            data.isd.getAssociateDiscount = { req: options, res: res };",
            "miss": false
          },
          "23": {
            "source": "            return next(err, server, data);",
            "miss": false
          },
          "24": {
            "source": "        });",
            "miss": false
          },
          "25": {
            "source": "*/",
            "miss": false
          },
          "26": {
            "source": "    };",
            "miss": false
          },
          "27": {
            "source": "};",
            "miss": false
          },
          "28": {
            "source": "",
            "miss": false
          }
        }
      },
      {
        "filename": "lib/lists/index.js",
        "percent": 59.25925925925925,
        "hits": 128,
        "misses": 88,
        "sloc": 216,
        "source": {
          "1": {
            "source": "// Load modules",
            "miss": false
          },
          "2": {
            "source": "",
            "miss": false
          },
          "3": {
            "source": "var Hoek = require('hoek');",
            "hits": 1,
            "miss": false
          },
          "4": {
            "source": "var QS = require('querystring');",
            "hits": 1,
            "miss": false
          },
          "5": {
            "source": "var Uuid = require('node-uuid');",
            "hits": 1,
            "miss": false
          },
          "6": {
            "source": "var Tools = require('../tools');",
            "hits": 1,
            "miss": false
          },
          "7": {
            "source": "",
            "miss": false
          },
          "8": {
            "source": "",
            "miss": false
          },
          "9": {
            "source": "module.exports.items = require('./items');",
            "hits": 1,
            "miss": false
          },
          "10": {
            "source": "",
            "miss": false
          },
          "11": {
            "source": "",
            "miss": false
          },
          "12": {
            "source": "module.exports.create = function (options) {",
            "hits": 1,
            "miss": false
          },
          "13": {
            "source": "",
            "miss": false
          },
          "14": {
            "source": "    options = options || {};",
            "hits": 0,
            "miss": true
          },
          "15": {
            "source": "    var cookie = Hoek.reach(options, 'headers.Cookie');",
            "hits": 0,
            "miss": true
          },
          "16": {
            "source": "",
            "miss": false
          },
          "17": {
            "source": "    return function (server, data, next) {",
            "hits": 0,
            "miss": true
          },
          "18": {
            "source": "",
            "miss": false
          },
          "19": {
            "source": "        if (options.cid === undefined && !cookie) {",
            "hits": 0,
            "miss": true
          },
          "20": {
            "source": "            options.cid = Hoek.reach(data, 'customer.create.res.result.id') || Uuid.v4();",
            "hits": 0,
            "miss": true
          },
          "21": {
            "source": "        }",
            "miss": false
          },
          "22": {
            "source": "",
            "miss": false
          },
          "23": {
            "source": "        var defaults = {",
            "hits": 0,
            "miss": true
          },
          "24": {
            "source": "            method: 'POST',",
            "miss": false
          },
          "25": {
            "source": "            url: '/lists?' + QS.stringify({ cid: options.cid }),",
            "miss": false
          },
          "26": {
            "source": "            payload: {",
            "miss": false
          },
          "27": {
            "source": "                name: 'Wish List Registry',",
            "miss": false
          },
          "28": {
            "source": "                eventDate: new Date().getTime() / 1000,",
            "miss": false
          },
          "29": {
            "source": "                listType: 'WL',",
            "miss": false
          },
          "30": {
            "source": "                registrant: {",
            "miss": false
          },
          "31": {
            "source": "                    firstName: 'Edward',",
            "miss": false
          },
          "32": {
            "source": "                    lastName: 'Elric',",
            "miss": false
          },
          "33": {
            "source": "                    address: {",
            "miss": false
          },
          "34": {
            "source": "                        addressLineOne: '850 Cherry Ave',",
            "miss": false
          },
          "35": {
            "source": "                        addressLineTwo: 'c/o Alchemy',",
            "miss": false
          },
          "36": {
            "source": "                        city: 'San Bruno',",
            "miss": false
          },
          "37": {
            "source": "                        state: 'CA',",
            "miss": false
          },
          "38": {
            "source": "                        postalCode: '94066',",
            "miss": false
          },
          "39": {
            "source": "                        country: 'USA'",
            "miss": false
          },
          "40": {
            "source": "                    }",
            "miss": false
          },
          "41": {
            "source": "                }",
            "miss": false
          },
          "42": {
            "source": "            }",
            "miss": false
          },
          "43": {
            "source": "        };",
            "miss": false
          },
          "44": {
            "source": "",
            "miss": false
          },
          "45": {
            "source": "        options = Hoek.merge(defaults, options || {}, true);",
            "hits": 0,
            "miss": true
          },
          "46": {
            "source": "        server.inject(options, function (res) {",
            "hits": 0,
            "miss": true
          },
          "47": {
            "source": "",
            "miss": false
          },
          "48": {
            "source": "            var err = Tools.checkForError(res);",
            "hits": 0,
            "miss": true
          },
          "49": {
            "source": "",
            "miss": false
          },
          "50": {
            "source": "            data.lists.create = { err: err, req: options, res: res };",
            "hits": 0,
            "miss": true
          },
          "51": {
            "source": "            return next(err, server, data);",
            "hits": 0,
            "miss": true
          },
          "52": {
            "source": "        });",
            "miss": false
          },
          "53": {
            "source": "    };",
            "miss": false
          },
          "54": {
            "source": "};",
            "miss": false
          },
          "55": {
            "source": "",
            "miss": false
          },
          "56": {
            "source": "",
            "miss": false
          },
          "57": {
            "source": "module.exports.getAll = function (options) {",
            "hits": 1,
            "miss": false
          },
          "58": {
            "source": "",
            "miss": false
          },
          "59": {
            "source": "    options = options || {};",
            "hits": 0,
            "miss": true
          },
          "60": {
            "source": "",
            "miss": false
          },
          "61": {
            "source": "    return function (server, data, next) {",
            "hits": 0,
            "miss": true
          },
          "62": {
            "source": "",
            "miss": false
          },
          "63": {
            "source": "        if (options.cid === undefined) {",
            "hits": 0,
            "miss": true
          },
          "64": {
            "source": "            options.cid = Uuid.v4();",
            "hits": 0,
            "miss": true
          },
          "65": {
            "source": "        }",
            "miss": false
          },
          "66": {
            "source": "",
            "miss": false
          },
          "67": {
            "source": "        var defaults = {",
            "hits": 0,
            "miss": true
          },
          "68": {
            "source": "            method: 'GET',",
            "miss": false
          },
          "69": {
            "source": "            url: '/lists?' + QS.stringify({ cid: options.cid })",
            "miss": false
          },
          "70": {
            "source": "        };",
            "miss": false
          },
          "71": {
            "source": "",
            "miss": false
          },
          "72": {
            "source": "        options = Hoek.merge(defaults, options || {}, true);",
            "hits": 0,
            "miss": true
          },
          "73": {
            "source": "        server.inject(options, function (res) {",
            "hits": 0,
            "miss": true
          },
          "74": {
            "source": "",
            "miss": false
          },
          "75": {
            "source": "            var err = Tools.checkForError(res);",
            "hits": 0,
            "miss": true
          },
          "76": {
            "source": "",
            "miss": false
          },
          "77": {
            "source": "            data.lists.getAll = { err: err, req: options, res: res };",
            "hits": 0,
            "miss": true
          },
          "78": {
            "source": "            return next(err, server, data);",
            "hits": 0,
            "miss": true
          },
          "79": {
            "source": "        });",
            "miss": false
          },
          "80": {
            "source": "    };",
            "miss": false
          },
          "81": {
            "source": "};",
            "miss": false
          },
          "82": {
            "source": "",
            "miss": false
          },
          "83": {
            "source": "",
            "miss": false
          },
          "84": {
            "source": "module.exports.get = function (options) {",
            "hits": 1,
            "miss": false
          },
          "85": {
            "source": "",
            "miss": false
          },
          "86": {
            "source": "    return function (server, data, next) {",
            "hits": 0,
            "miss": true
          },
          "87": {
            "source": "",
            "miss": false
          },
          "88": {
            "source": "        var listId = Hoek.reach(data, 'lists.create.res.result.id');",
            "hits": 0,
            "miss": true
          },
          "89": {
            "source": "        var listType = Hoek.reach(data, 'lists.create.res.result.type');",
            "hits": 0,
            "miss": true
          },
          "90": {
            "source": "",
            "miss": false
          },
          "91": {
            "source": "        var defaults = {",
            "hits": 0,
            "miss": true
          },
          "92": {
            "source": "            method: 'GET',",
            "miss": false
          },
          "93": {
            "source": "            url: '/lists/' + listId + '?' + QS.stringify({ listType: listType, cid: options.cid })",
            "miss": false
          },
          "94": {
            "source": "        };",
            "miss": false
          },
          "95": {
            "source": "",
            "miss": false
          },
          "96": {
            "source": "        options = Hoek.merge(defaults, options || {}, true);",
            "hits": 0,
            "miss": true
          },
          "97": {
            "source": "        server.inject(options, function (res) {",
            "hits": 0,
            "miss": true
          },
          "98": {
            "source": "",
            "miss": false
          },
          "99": {
            "source": "            var err = Tools.checkForError(res);",
            "hits": 0,
            "miss": true
          },
          "100": {
            "source": "",
            "miss": false
          },
          "101": {
            "source": "            data.lists.get = { err: err, req: options, res: res };",
            "hits": 0,
            "miss": true
          },
          "102": {
            "source": "            return next(err, server, data);",
            "hits": 0,
            "miss": true
          },
          "103": {
            "source": "        });",
            "miss": false
          },
          "104": {
            "source": "    };",
            "miss": false
          },
          "105": {
            "source": "};",
            "miss": false
          },
          "106": {
            "source": "",
            "miss": false
          },
          "107": {
            "source": "",
            "miss": false
          },
          "108": {
            "source": "module.exports.find = function (options) {",
            "hits": 1,
            "miss": false
          },
          "109": {
            "source": "",
            "miss": false
          },
          "110": {
            "source": "    return function (server, data, next) {",
            "hits": 0,
            "miss": true
          },
          "111": {
            "source": "",
            "miss": false
          },
          "112": {
            "source": "        var defaults = {",
            "hits": 0,
            "miss": true
          },
          "113": {
            "source": "            method: 'GET',",
            "miss": false
          },
          "114": {
            "source": "            url: '/lists/find'",
            "miss": false
          },
          "115": {
            "source": "        };",
            "miss": false
          },
          "116": {
            "source": "",
            "miss": false
          },
          "117": {
            "source": "        options = Hoek.merge(defaults, options || {}, true);",
            "hits": 0,
            "miss": true
          },
          "118": {
            "source": "        server.inject(options, function (res) {",
            "hits": 0,
            "miss": true
          },
          "119": {
            "source": "",
            "miss": false
          },
          "120": {
            "source": "            var err = Tools.checkForError(res);",
            "hits": 0,
            "miss": true
          },
          "121": {
            "source": "",
            "miss": false
          },
          "122": {
            "source": "            data.lists.find = { err: err, req: options, res: res };",
            "hits": 0,
            "miss": true
          },
          "123": {
            "source": "            return next(err, server, data);",
            "hits": 0,
            "miss": true
          },
          "124": {
            "source": "        });",
            "miss": false
          },
          "125": {
            "source": "    };",
            "miss": false
          },
          "126": {
            "source": "};",
            "miss": false
          },
          "127": {
            "source": "",
            "miss": false
          },
          "128": {
            "source": "",
            "miss": false
          },
          "129": {
            "source": "module.exports.getActive = function (listType, options) {",
            "hits": 1,
            "miss": false
          },
          "130": {
            "source": "",
            "miss": false
          },
          "131": {
            "source": "    options = options || {};",
            "hits": 0,
            "miss": true
          },
          "132": {
            "source": "",
            "miss": false
          },
          "133": {
            "source": "    return function (server, data, next) {",
            "hits": 0,
            "miss": true
          },
          "134": {
            "source": "",
            "miss": false
          },
          "135": {
            "source": "        var cid = options.cid || Uuid.v4();",
            "hits": 0,
            "miss": true
          },
          "136": {
            "source": "",
            "miss": false
          },
          "137": {
            "source": "        var defaults = {",
            "hits": 0,
            "miss": true
          },
          "138": {
            "source": "            method: 'GET',",
            "miss": false
          },
          "139": {
            "source": "            url: '/lists/active/' + listType + '?cid=' + cid",
            "miss": false
          },
          "140": {
            "source": "        };",
            "miss": false
          },
          "141": {
            "source": "",
            "miss": false
          },
          "142": {
            "source": "        options = Hoek.merge(defaults, options || {}, true);",
            "hits": 0,
            "miss": true
          },
          "143": {
            "source": "        server.inject(options, function (res) {",
            "hits": 0,
            "miss": true
          },
          "144": {
            "source": "",
            "miss": false
          },
          "145": {
            "source": "            var err = Tools.checkForError(res);",
            "hits": 0,
            "miss": true
          },
          "146": {
            "source": "",
            "miss": false
          },
          "147": {
            "source": "            data.lists.getActive = { err: err, req: options, res: res };",
            "hits": 0,
            "miss": true
          },
          "148": {
            "source": "            return next(err, server, data);",
            "hits": 0,
            "miss": true
          },
          "149": {
            "source": "        });",
            "miss": false
          },
          "150": {
            "source": "    };",
            "miss": false
          },
          "151": {
            "source": "};",
            "miss": false
          },
          "152": {
            "source": "",
            "miss": false
          },
          "153": {
            "source": "",
            "miss": false
          },
          "154": {
            "source": "module.exports.update = function (options) {",
            "hits": 1,
            "miss": false
          },
          "155": {
            "source": "",
            "miss": false
          },
          "156": {
            "source": "    return function (server, data, next) {",
            "hits": 0,
            "miss": true
          },
          "157": {
            "source": "",
            "miss": false
          },
          "158": {
            "source": "        var listId = Hoek.reach(data, 'lists.create.res.result.id');",
            "hits": 0,
            "miss": true
          },
          "159": {
            "source": "",
            "miss": false
          },
          "160": {
            "source": "        var defaults = {",
            "hits": 0,
            "miss": true
          },
          "161": {
            "source": "            method: 'PUT',",
            "miss": false
          },
          "162": {
            "source": "            url: '/lists/' + listId + '?' + QS.stringify(options.query),",
            "miss": false
          },
          "163": {
            "source": "            payload: {",
            "miss": false
          },
          "164": {
            "source": "                name: 'Updated Wish List',",
            "miss": false
          },
          "165": {
            "source": "                eventDate: new Date().getTime() / 1000,",
            "miss": false
          },
          "166": {
            "source": "                registrant: {",
            "miss": false
          },
          "167": {
            "source": "                    firstName: 'Alphonse',",
            "miss": false
          },
          "168": {
            "source": "                    lastName: 'Elric',",
            "miss": false
          },
          "169": {
            "source": "                    address: {",
            "miss": false
          },
          "170": {
            "source": "                        addressLineOne: '1 Liberty Ave',",
            "miss": false
          },
          "171": {
            "source": "                        city: 'Philly',",
            "miss": false
          },
          "172": {
            "source": "                        country: 'USA',",
            "miss": false
          },
          "173": {
            "source": "                        postalCode: '12345',",
            "miss": false
          },
          "174": {
            "source": "                        state: 'CA'",
            "miss": false
          },
          "175": {
            "source": "                    }",
            "miss": false
          },
          "176": {
            "source": "                }",
            "miss": false
          },
          "177": {
            "source": "            }",
            "miss": false
          },
          "178": {
            "source": "        };",
            "miss": false
          },
          "179": {
            "source": "",
            "miss": false
          },
          "180": {
            "source": "        options = Hoek.merge(defaults, options || {}, true);",
            "hits": 0,
            "miss": true
          },
          "181": {
            "source": "        server.inject(options, function (res) {",
            "hits": 0,
            "miss": true
          },
          "182": {
            "source": "",
            "miss": false
          },
          "183": {
            "source": "            var err = Tools.checkForError(res);",
            "hits": 0,
            "miss": true
          },
          "184": {
            "source": "",
            "miss": false
          },
          "185": {
            "source": "            data.lists.update = { err: err, req: options, res: res };",
            "hits": 0,
            "miss": true
          },
          "186": {
            "source": "            return next(err, server, data);",
            "hits": 0,
            "miss": true
          },
          "187": {
            "source": "        });",
            "miss": false
          },
          "188": {
            "source": "    };",
            "miss": false
          },
          "189": {
            "source": "};",
            "miss": false
          },
          "190": {
            "source": "",
            "miss": false
          },
          "191": {
            "source": "",
            "miss": false
          },
          "192": {
            "source": "module.exports.merge = function (listType, options) {",
            "hits": 1,
            "miss": false
          },
          "193": {
            "source": "",
            "miss": false
          },
          "194": {
            "source": "    return function (server, data, next) {",
            "hits": 0,
            "miss": true
          },
          "195": {
            "source": "",
            "miss": false
          },
          "196": {
            "source": "        var defaults = {",
            "hits": 0,
            "miss": true
          },
          "197": {
            "source": "            method: 'PUT',",
            "miss": false
          },
          "198": {
            "source": "            url: '/lists/merge?' + QS.stringify({ listType: listType, cid: options.cid }),",
            "miss": false
          },
          "199": {
            "source": "            payload: {",
            "miss": false
          },
          "200": {
            "source": "                merge: data.lists.merge.source,",
            "miss": false
          },
          "201": {
            "source": "                with: data.lists.merge.target",
            "miss": false
          },
          "202": {
            "source": "            }",
            "miss": false
          },
          "203": {
            "source": "        };",
            "miss": false
          },
          "204": {
            "source": "",
            "miss": false
          },
          "205": {
            "source": "        options = Hoek.merge(defaults, options || {}, true);",
            "hits": 0,
            "miss": true
          },
          "206": {
            "source": "        server.inject(options, function (res) {",
            "hits": 0,
            "miss": true
          },
          "207": {
            "source": "",
            "miss": false
          },
          "208": {
            "source": "            var err = Tools.checkForError(res);",
            "hits": 0,
            "miss": true
          },
          "209": {
            "source": "",
            "miss": false
          },
          "210": {
            "source": "            data.lists.merge = { err: err, req: options, res: res };",
            "hits": 0,
            "miss": true
          },
          "211": {
            "source": "            return next(err, server, data);",
            "hits": 0,
            "miss": true
          },
          "212": {
            "source": "        });",
            "miss": false
          },
          "213": {
            "source": "    };",
            "miss": false
          },
          "214": {
            "source": "};",
            "miss": false
          },
          "215": {
            "source": "",
            "miss": false
          },
          "216": {
            "source": "",
            "miss": false
          },
          "217": {
            "source": "module.exports.delete = function (options) {",
            "hits": 1,
            "miss": false
          },
          "218": {
            "source": "",
            "miss": false
          },
          "219": {
            "source": "    return function (server, data, next) {",
            "hits": 0,
            "miss": true
          },
          "220": {
            "source": "",
            "miss": false
          },
          "221": {
            "source": "        var listId = Hoek.reach(data, 'lists.create.res.result.id');",
            "hits": 0,
            "miss": true
          },
          "222": {
            "source": "        var listType = Hoek.reach(data, 'lists.create.res.result.type');",
            "hits": 0,
            "miss": true
          },
          "223": {
            "source": "",
            "miss": false
          },
          "224": {
            "source": "        var defaults = {",
            "hits": 0,
            "miss": true
          },
          "225": {
            "source": "            method: 'DELETE',",
            "miss": false
          },
          "226": {
            "source": "            url: '/lists/' + listId + '?' + QS.stringify({ listType: listType, cid: options.cid })",
            "miss": false
          },
          "227": {
            "source": "        };",
            "miss": false
          },
          "228": {
            "source": "",
            "miss": false
          },
          "229": {
            "source": "        options = Hoek.merge(defaults, options || {}, true);",
            "hits": 0,
            "miss": true
          },
          "230": {
            "source": "        server.inject(options, function (res) {",
            "hits": 0,
            "miss": true
          },
          "231": {
            "source": "",
            "miss": false
          },
          "232": {
            "source": "            var err = Tools.checkForError(res);",
            "hits": 0,
            "miss": true
          },
          "233": {
            "source": "",
            "miss": false
          },
          "234": {
            "source": "            data.lists.delete = { err: err, req: options, res: res };",
            "hits": 0,
            "miss": true
          },
          "235": {
            "source": "            return next(err, server, data);",
            "hits": 0,
            "miss": true
          },
          "236": {
            "source": "        });",
            "miss": false
          },
          "237": {
            "source": "    };",
            "miss": false
          },
          "238": {
            "source": "};",
            "miss": false
          },
          "239": {
            "source": "",
            "miss": false
          },
          "240": {
            "source": "",
            "miss": false
          },
          "241": {
            "source": "module.exports.chown = function (options) {",
            "hits": 1,
            "miss": false
          },
          "242": {
            "source": "",
            "miss": false
          },
          "243": {
            "source": "    return function (server, data, next) {",
            "hits": 0,
            "miss": true
          },
          "244": {
            "source": "",
            "miss": false
          },
          "245": {
            "source": "        var defaults = {",
            "hits": 0,
            "miss": true
          },
          "246": {
            "source": "            method: 'POST',",
            "miss": false
          },
          "247": {
            "source": "            url: '/lists/chown',",
            "miss": false
          },
          "248": {
            "source": "            payload: {",
            "miss": false
          },
          "249": {
            "source": "                from: Uuid.v4(),",
            "miss": false
          },
          "250": {
            "source": "                to: Uuid.v4()",
            "miss": false
          },
          "251": {
            "source": "            }",
            "miss": false
          },
          "252": {
            "source": "        };",
            "miss": false
          },
          "253": {
            "source": "",
            "miss": false
          },
          "254": {
            "source": "        options = Hoek.merge(defaults, options || {}, true);",
            "hits": 0,
            "miss": true
          },
          "255": {
            "source": "        server.inject(options, function (res) {",
            "hits": 0,
            "miss": true
          },
          "256": {
            "source": "",
            "miss": false
          },
          "257": {
            "source": "            var err = Tools.checkForError(res);",
            "hits": 0,
            "miss": true
          },
          "258": {
            "source": "",
            "miss": false
          },
          "259": {
            "source": "            data.lists.chown = { err: err, req: options, res: res };",
            "hits": 0,
            "miss": true
          },
          "260": {
            "source": "            return next(err, server, data);",
            "hits": 0,
            "miss": true
          },
          "261": {
            "source": "        });",
            "miss": false
          },
          "262": {
            "source": "    };",
            "miss": false
          },
          "263": {
            "source": "};",
            "miss": false
          },
          "264": {
            "source": "",
            "miss": false
          },
          "265": {
            "source": "",
            "miss": false
          },
          "266": {
            "source": "// Used by checkout, not by lists",
            "miss": false
          },
          "267": {
            "source": "exports.addItem = function (options) {",
            "hits": 1,
            "miss": false
          },
          "268": {
            "source": "",
            "miss": false
          },
          "269": {
            "source": "    options = options || {};",
            "hits": 0,
            "miss": true
          },
          "270": {
            "source": "    return function (server, data, next) {",
            "hits": 0,
            "miss": true
          },
          "271": {
            "source": "",
            "miss": false
          },
          "272": {
            "source": "        var customerId = options.customerId || Hoek.reach(data, 'customer.create.res.result.id');",
            "hits": 0,
            "miss": true
          },
          "273": {
            "source": "        var listsId = options.listsId || Hoek.reach(data, 'lists.create.res.result.id');",
            "hits": 0,
            "miss": true
          },
          "274": {
            "source": "",
            "miss": false
          },
          "275": {
            "source": "        var defaultQuerystring = {",
            "hits": 0,
            "miss": true
          },
          "276": {
            "source": "            listType: Hoek.reach(data, 'lists.create.res.result.type'),",
            "miss": false
          },
          "277": {
            "source": "            cid: customerId",
            "miss": false
          },
          "278": {
            "source": "        }",
            "miss": false
          },
          "279": {
            "source": "",
            "miss": false
          },
          "280": {
            "source": "        var defaults = {",
            "hits": 0,
            "miss": true
          },
          "281": {
            "source": "            method: 'POST',",
            "miss": false
          },
          "282": {
            "source": "            url: '/lists/' + listsId + '/items?' + QS.stringify(defaultQuerystring),",
            "miss": false
          },
          "283": {
            "source": "            payload: {",
            "miss": false
          },
          "284": {
            "source": "                offerId: '29277C2649884C2DAEEEF3B5EFC680D1',",
            "miss": false
          },
          "285": {
            "source": "                price: 22.97,",
            "miss": false
          },
          "286": {
            "source": "                listType: Hoek.reach(data, 'lists.create.res.result.type'),",
            "miss": false
          },
          "287": {
            "source": "                quantity: 1",
            "miss": false
          },
          "288": {
            "source": "            }",
            "miss": false
          },
          "289": {
            "source": "        };",
            "miss": false
          },
          "290": {
            "source": "",
            "miss": false
          },
          "291": {
            "source": "        options = Hoek.merge(defaults, options, true);",
            "hits": 0,
            "miss": true
          },
          "292": {
            "source": "        server.inject(options, function (res) {",
            "hits": 0,
            "miss": true
          },
          "293": {
            "source": "",
            "miss": false
          },
          "294": {
            "source": "            var err = Tools.checkForError(res);",
            "hits": 0,
            "miss": true
          },
          "295": {
            "source": "",
            "miss": false
          },
          "296": {
            "source": "            data.lists.addItem = { err: err, req: options, res: res };",
            "hits": 0,
            "miss": true
          },
          "297": {
            "source": "            return next(err, server, data);",
            "hits": 0,
            "miss": true
          },
          "298": {
            "source": "        });",
            "miss": false
          },
          "299": {
            "source": "    };",
            "miss": false
          },
          "300": {
            "source": "};",
            "miss": false
          },
          "301": {
            "source": "",
            "miss": false
          }
        }
      },
      {
        "filename": "lib/lists/items.js",
        "percent": 52.69461077844312,
        "hits": 88,
        "misses": 79,
        "sloc": 167,
        "source": {
          "1": {
            "source": "",
            "miss": false
          },
          "2": {
            "source": "// Load modules",
            "miss": false
          },
          "3": {
            "source": "",
            "miss": false
          },
          "4": {
            "source": "var Hoek = require('hoek');",
            "hits": 1,
            "miss": false
          },
          "5": {
            "source": "var Uuid = require('node-uuid');",
            "hits": 1,
            "miss": false
          },
          "6": {
            "source": "var QS = require('querystring');",
            "hits": 1,
            "miss": false
          },
          "7": {
            "source": "var Tools = require('../tools');",
            "hits": 1,
            "miss": false
          },
          "8": {
            "source": "",
            "miss": false
          },
          "9": {
            "source": "",
            "miss": false
          },
          "10": {
            "source": "module.exports.add = function (options) {",
            "hits": 1,
            "miss": false
          },
          "11": {
            "source": "",
            "miss": false
          },
          "12": {
            "source": "    options = options || {};",
            "hits": 0,
            "miss": true
          },
          "13": {
            "source": "",
            "miss": false
          },
          "14": {
            "source": "    return function (server, data, next) {",
            "hits": 0,
            "miss": true
          },
          "15": {
            "source": "",
            "miss": false
          },
          "16": {
            "source": "        if (options.cid === undefined) {",
            "hits": 0,
            "miss": true
          },
          "17": {
            "source": "            options.cid = Uuid.v4();",
            "hits": 0,
            "miss": true
          },
          "18": {
            "source": "        }",
            "miss": false
          },
          "19": {
            "source": "",
            "miss": false
          },
          "20": {
            "source": "        var listId = Hoek.reach(data, 'lists.create.res.result.id');",
            "hits": 0,
            "miss": true
          },
          "21": {
            "source": "",
            "miss": false
          },
          "22": {
            "source": "        var defaults = {",
            "hits": 0,
            "miss": true
          },
          "23": {
            "source": "            method: 'POST',",
            "miss": false
          },
          "24": {
            "source": "            url: '/lists/' + listId + '/items?' + QS.stringify(options.query),",
            "miss": false
          },
          "25": {
            "source": "            payload: {",
            "miss": false
          },
          "26": {
            "source": "                offerId: '222E9CAA92994147A63EB4F12A572CF5',",
            "miss": false
          },
          "27": {
            "source": "                quantity: '3',",
            "miss": false
          },
          "28": {
            "source": "                price: '21.99'",
            "miss": false
          },
          "29": {
            "source": "            }",
            "miss": false
          },
          "30": {
            "source": "        };",
            "miss": false
          },
          "31": {
            "source": "",
            "miss": false
          },
          "32": {
            "source": "        options = Hoek.merge(defaults, options || {}, true);",
            "hits": 0,
            "miss": true
          },
          "33": {
            "source": "        server.inject(options, function (res) {",
            "hits": 0,
            "miss": true
          },
          "34": {
            "source": "",
            "miss": false
          },
          "35": {
            "source": "            var err = Tools.checkForError(res);",
            "hits": 0,
            "miss": true
          },
          "36": {
            "source": "",
            "miss": false
          },
          "37": {
            "source": "            data.lists.items.add = { err: err, req: options, res: res };",
            "hits": 0,
            "miss": true
          },
          "38": {
            "source": "            return next(err, server, data);",
            "hits": 0,
            "miss": true
          },
          "39": {
            "source": "        });",
            "miss": false
          },
          "40": {
            "source": "    };",
            "miss": false
          },
          "41": {
            "source": "};",
            "miss": false
          },
          "42": {
            "source": "",
            "miss": false
          },
          "43": {
            "source": "",
            "miss": false
          },
          "44": {
            "source": "module.exports.addActive = function (listType, options) {",
            "hits": 1,
            "miss": false
          },
          "45": {
            "source": "",
            "miss": false
          },
          "46": {
            "source": "    options = options || {};",
            "hits": 0,
            "miss": true
          },
          "47": {
            "source": "",
            "miss": false
          },
          "48": {
            "source": "    return function (server, data, next) {",
            "hits": 0,
            "miss": true
          },
          "49": {
            "source": "",
            "miss": false
          },
          "50": {
            "source": "        if (options.cid === undefined) {",
            "hits": 0,
            "miss": true
          },
          "51": {
            "source": "            options.cid = Uuid.v4();",
            "hits": 0,
            "miss": true
          },
          "52": {
            "source": "        }",
            "miss": false
          },
          "53": {
            "source": "",
            "miss": false
          },
          "54": {
            "source": "        var defaults = {",
            "hits": 0,
            "miss": true
          },
          "55": {
            "source": "            method: 'POST',",
            "miss": false
          },
          "56": {
            "source": "            url: '/lists/active/' + listType + '/items?cid=' + options.cid,",
            "miss": false
          },
          "57": {
            "source": "            payload: {",
            "miss": false
          },
          "58": {
            "source": "                offerId: '222E9CAA92994147A63EB4F12A572CF5',",
            "miss": false
          },
          "59": {
            "source": "                quantity: '3',",
            "miss": false
          },
          "60": {
            "source": "                price: '21.99'",
            "miss": false
          },
          "61": {
            "source": "            }",
            "miss": false
          },
          "62": {
            "source": "        };",
            "miss": false
          },
          "63": {
            "source": "",
            "miss": false
          },
          "64": {
            "source": "        options = Hoek.merge(defaults, options || {}, true);",
            "hits": 0,
            "miss": true
          },
          "65": {
            "source": "        server.inject(options, function (res) {",
            "hits": 0,
            "miss": true
          },
          "66": {
            "source": "",
            "miss": false
          },
          "67": {
            "source": "            var err = Tools.checkForError(res);",
            "hits": 0,
            "miss": true
          },
          "68": {
            "source": "",
            "miss": false
          },
          "69": {
            "source": "            data.lists.items.addActive = { err: err, req: options, res: res };",
            "hits": 0,
            "miss": true
          },
          "70": {
            "source": "            return next(err, server, data);",
            "hits": 0,
            "miss": true
          },
          "71": {
            "source": "        });",
            "miss": false
          },
          "72": {
            "source": "    };",
            "miss": false
          },
          "73": {
            "source": "};",
            "miss": false
          },
          "74": {
            "source": "",
            "miss": false
          },
          "75": {
            "source": "",
            "miss": false
          },
          "76": {
            "source": "module.exports.get = function (listType, options) {",
            "hits": 1,
            "miss": false
          },
          "77": {
            "source": "",
            "miss": false
          },
          "78": {
            "source": "    options = options || {};",
            "hits": 0,
            "miss": true
          },
          "79": {
            "source": "",
            "miss": false
          },
          "80": {
            "source": "    return function (server, data, next) {",
            "hits": 0,
            "miss": true
          },
          "81": {
            "source": "",
            "miss": false
          },
          "82": {
            "source": "        if (options.cid === undefined) {",
            "hits": 0,
            "miss": true
          },
          "83": {
            "source": "            options.cid = Uuid.v4();",
            "hits": 0,
            "miss": true
          },
          "84": {
            "source": "        }",
            "miss": false
          },
          "85": {
            "source": "",
            "miss": false
          },
          "86": {
            "source": "        var listId = Hoek.reach(data, 'lists.create.res.result.id');",
            "hits": 0,
            "miss": true
          },
          "87": {
            "source": "        var listType = Hoek.reach(data, 'lists.create.res.result.type');",
            "hits": 0,
            "miss": true
          },
          "88": {
            "source": "",
            "miss": false
          },
          "89": {
            "source": "        var queryParams = {",
            "hits": 0,
            "miss": true
          },
          "90": {
            "source": "            listType: listType,",
            "miss": false
          },
          "91": {
            "source": "            cid: options.cid",
            "miss": false
          },
          "92": {
            "source": "        };",
            "miss": false
          },
          "93": {
            "source": "",
            "miss": false
          },
          "94": {
            "source": "        if (options.sort) {",
            "hits": 0,
            "miss": true
          },
          "95": {
            "source": "            queryParams.sort = options.sort;",
            "hits": 0,
            "miss": true
          },
          "96": {
            "source": "        }",
            "miss": false
          },
          "97": {
            "source": "",
            "miss": false
          },
          "98": {
            "source": "        var defaults = {",
            "hits": 0,
            "miss": true
          },
          "99": {
            "source": "            method: 'GET',",
            "miss": false
          },
          "100": {
            "source": "            url: '/lists/' + listId + '/items?' + QS.stringify(queryParams)",
            "miss": false
          },
          "101": {
            "source": "        };",
            "miss": false
          },
          "102": {
            "source": "",
            "miss": false
          },
          "103": {
            "source": "        options = Hoek.merge(defaults, options || {}, true);",
            "hits": 0,
            "miss": true
          },
          "104": {
            "source": "        server.inject(options, function (res) {",
            "hits": 0,
            "miss": true
          },
          "105": {
            "source": "",
            "miss": false
          },
          "106": {
            "source": "            var err = Tools.checkForError(res);",
            "hits": 0,
            "miss": true
          },
          "107": {
            "source": "",
            "miss": false
          },
          "108": {
            "source": "            data.lists.items.get = { err: err, req: options, res: res };",
            "hits": 0,
            "miss": true
          },
          "109": {
            "source": "            return next(err, server, data);",
            "hits": 0,
            "miss": true
          },
          "110": {
            "source": "        });",
            "miss": false
          },
          "111": {
            "source": "    };",
            "miss": false
          },
          "112": {
            "source": "};",
            "miss": false
          },
          "113": {
            "source": "",
            "miss": false
          },
          "114": {
            "source": "",
            "miss": false
          },
          "115": {
            "source": "module.exports.getActive = function (listType, options) {",
            "hits": 1,
            "miss": false
          },
          "116": {
            "source": "",
            "miss": false
          },
          "117": {
            "source": "    options = options || {};",
            "hits": 0,
            "miss": true
          },
          "118": {
            "source": "",
            "miss": false
          },
          "119": {
            "source": "    return function (server, data, next) {",
            "hits": 0,
            "miss": true
          },
          "120": {
            "source": "",
            "miss": false
          },
          "121": {
            "source": "        if (options.cid === undefined) {",
            "hits": 0,
            "miss": true
          },
          "122": {
            "source": "            options.cid = Uuid.v4();",
            "hits": 0,
            "miss": true
          },
          "123": {
            "source": "        }",
            "miss": false
          },
          "124": {
            "source": "",
            "miss": false
          },
          "125": {
            "source": "        var defaults = {",
            "hits": 0,
            "miss": true
          },
          "126": {
            "source": "            method: 'GET',",
            "miss": false
          },
          "127": {
            "source": "            url: '/lists/active/' + listType + '/items?cid=' + options.cid",
            "miss": false
          },
          "128": {
            "source": "        };",
            "miss": false
          },
          "129": {
            "source": "",
            "miss": false
          },
          "130": {
            "source": "        options = Hoek.merge(defaults, options || {}, true);",
            "hits": 0,
            "miss": true
          },
          "131": {
            "source": "        server.inject(options, function (res) {",
            "hits": 0,
            "miss": true
          },
          "132": {
            "source": "",
            "miss": false
          },
          "133": {
            "source": "            var err = Tools.checkForError(res);",
            "hits": 0,
            "miss": true
          },
          "134": {
            "source": "",
            "miss": false
          },
          "135": {
            "source": "            data.lists.items.getActive = { err: err, req: options, res: res };",
            "hits": 0,
            "miss": true
          },
          "136": {
            "source": "            return next(err, server, data);",
            "hits": 0,
            "miss": true
          },
          "137": {
            "source": "        });",
            "miss": false
          },
          "138": {
            "source": "    };",
            "miss": false
          },
          "139": {
            "source": "};",
            "miss": false
          },
          "140": {
            "source": "",
            "miss": false
          },
          "141": {
            "source": "",
            "miss": false
          },
          "142": {
            "source": "module.exports.update = function (options) {",
            "hits": 1,
            "miss": false
          },
          "143": {
            "source": "",
            "miss": false
          },
          "144": {
            "source": "    options = options || {};",
            "hits": 0,
            "miss": true
          },
          "145": {
            "source": "",
            "miss": false
          },
          "146": {
            "source": "    return function (server, data, next) {",
            "hits": 0,
            "miss": true
          },
          "147": {
            "source": "",
            "miss": false
          },
          "148": {
            "source": "        if (options.cid === undefined) {",
            "hits": 0,
            "miss": true
          },
          "149": {
            "source": "            options.cid = Uuid.v4();",
            "hits": 0,
            "miss": true
          },
          "150": {
            "source": "        }",
            "miss": false
          },
          "151": {
            "source": "",
            "miss": false
          },
          "152": {
            "source": "        var listId = Hoek.reach(data, 'lists.create.res.result.id');",
            "hits": 0,
            "miss": true
          },
          "153": {
            "source": "        var listType = Hoek.reach(data, 'lists.create.res.result.type');",
            "hits": 0,
            "miss": true
          },
          "154": {
            "source": "        var itemId = Hoek.reach(data, 'lists.items.add.res.result.id');",
            "hits": 0,
            "miss": true
          },
          "155": {
            "source": "",
            "miss": false
          },
          "156": {
            "source": "        var defaults = {",
            "hits": 0,
            "miss": true
          },
          "157": {
            "source": "            method: 'PUT',",
            "miss": false
          },
          "158": {
            "source": "            url: '/lists/' + listId + '/items/' + itemId + '?' + QS.stringify({ cid: options.cid, listType: listType }),",
            "miss": false
          },
          "159": {
            "source": "            payload: {",
            "miss": false
          },
          "160": {
            "source": "                quantity: 99,",
            "miss": false
          },
          "161": {
            "source": "                priority: 'must_have',",
            "miss": false
          },
          "162": {
            "source": "                received: 42",
            "miss": false
          },
          "163": {
            "source": "            }",
            "miss": false
          },
          "164": {
            "source": "        };",
            "miss": false
          },
          "165": {
            "source": "",
            "miss": false
          },
          "166": {
            "source": "        options = Hoek.merge(defaults, options || {}, true);",
            "hits": 0,
            "miss": true
          },
          "167": {
            "source": "        server.inject(options, function (res) {",
            "hits": 0,
            "miss": true
          },
          "168": {
            "source": "",
            "miss": false
          },
          "169": {
            "source": "            var err = Tools.checkForError(res);",
            "hits": 0,
            "miss": true
          },
          "170": {
            "source": "",
            "miss": false
          },
          "171": {
            "source": "            data.lists.items.update = { err: err, req: options, res: res };",
            "hits": 0,
            "miss": true
          },
          "172": {
            "source": "            return next(err, server, data);",
            "hits": 0,
            "miss": true
          },
          "173": {
            "source": "        });",
            "miss": false
          },
          "174": {
            "source": "    };",
            "miss": false
          },
          "175": {
            "source": "};",
            "miss": false
          },
          "176": {
            "source": "",
            "miss": false
          },
          "177": {
            "source": "",
            "miss": false
          },
          "178": {
            "source": "module.exports.delete = function (options) {",
            "hits": 1,
            "miss": false
          },
          "179": {
            "source": "",
            "miss": false
          },
          "180": {
            "source": "    options = options || {};",
            "hits": 0,
            "miss": true
          },
          "181": {
            "source": "",
            "miss": false
          },
          "182": {
            "source": "    return function (server, data, next) {",
            "hits": 0,
            "miss": true
          },
          "183": {
            "source": "",
            "miss": false
          },
          "184": {
            "source": "        var listId = Hoek.reach(data, 'lists.create.res.result.id');",
            "hits": 0,
            "miss": true
          },
          "185": {
            "source": "        var listType = Hoek.reach(data, 'lists.create.res.result.type');",
            "hits": 0,
            "miss": true
          },
          "186": {
            "source": "        var itemId = Hoek.reach(data, 'lists.items.add.res.result.id');",
            "hits": 0,
            "miss": true
          },
          "187": {
            "source": "",
            "miss": false
          },
          "188": {
            "source": "        var defaults = {",
            "hits": 0,
            "miss": true
          },
          "189": {
            "source": "            method: 'DELETE',",
            "miss": false
          },
          "190": {
            "source": "            url: '/lists/' + listId + '/items/' + itemId + '?' + QS.stringify({",
            "miss": false
          },
          "191": {
            "source": "                listType: listType,",
            "miss": false
          },
          "192": {
            "source": "                cid: options.cid",
            "miss": false
          },
          "193": {
            "source": "            }),",
            "miss": false
          },
          "194": {
            "source": "            payload: {",
            "miss": false
          },
          "195": {
            "source": "                listType: listType",
            "miss": false
          },
          "196": {
            "source": "            }",
            "miss": false
          },
          "197": {
            "source": "        };",
            "miss": false
          },
          "198": {
            "source": "",
            "miss": false
          },
          "199": {
            "source": "        options = Hoek.merge(defaults, options || {}, true);",
            "hits": 0,
            "miss": true
          },
          "200": {
            "source": "        server.inject(options, function (res) {",
            "hits": 0,
            "miss": true
          },
          "201": {
            "source": "",
            "miss": false
          },
          "202": {
            "source": "            var err = Tools.checkForError(res);",
            "hits": 0,
            "miss": true
          },
          "203": {
            "source": "",
            "miss": false
          },
          "204": {
            "source": "            data.lists.items.delete = { err: err, req: options, res: res };",
            "hits": 0,
            "miss": true
          },
          "205": {
            "source": "            return next(err, server, data);",
            "hits": 0,
            "miss": true
          },
          "206": {
            "source": "        });",
            "miss": false
          },
          "207": {
            "source": "    };",
            "miss": false
          },
          "208": {
            "source": "};",
            "miss": false
          },
          "209": {
            "source": "",
            "miss": false
          },
          "210": {
            "source": "",
            "miss": false
          },
          "211": {
            "source": "module.exports.createPurchaseInfo = function (options) {",
            "hits": 1,
            "miss": false
          },
          "212": {
            "source": "",
            "miss": false
          },
          "213": {
            "source": "    return function (server, data, next) {",
            "hits": 0,
            "miss": true
          },
          "214": {
            "source": "",
            "miss": false
          },
          "215": {
            "source": "        var listId = Hoek.reach(data, 'lists.create.res.result.id');",
            "hits": 0,
            "miss": true
          },
          "216": {
            "source": "        var itemId = Hoek.reach(data, 'lists.items.add.res.result.id');",
            "hits": 0,
            "miss": true
          },
          "217": {
            "source": "",
            "miss": false
          },
          "218": {
            "source": "        var defaults = {",
            "hits": 0,
            "miss": true
          },
          "219": {
            "source": "            method: 'POST',",
            "miss": false
          },
          "220": {
            "source": "            url: '/lists/' + listId + '/items/' + itemId + '/purchaseInfo?cid=' + options.cid,",
            "miss": false
          },
          "221": {
            "source": "            payload: {",
            "miss": false
          },
          "222": {
            "source": "                offerId: '5511DDCDDF944656A9258D98266AC486',",
            "miss": false
          },
          "223": {
            "source": "                price: '21.99'",
            "miss": false
          },
          "224": {
            "source": "            }",
            "miss": false
          },
          "225": {
            "source": "        };",
            "miss": false
          },
          "226": {
            "source": "",
            "miss": false
          },
          "227": {
            "source": "        options = Hoek.merge(defaults, options || {}, true);",
            "hits": 0,
            "miss": true
          },
          "228": {
            "source": "        server.inject(options, function (res) {",
            "hits": 0,
            "miss": true
          },
          "229": {
            "source": "",
            "miss": false
          },
          "230": {
            "source": "            var err = Tools.checkForError(res);",
            "hits": 0,
            "miss": true
          },
          "231": {
            "source": "",
            "miss": false
          },
          "232": {
            "source": "            data.lists.items.createPurchaseInfo = { err: err, req: options, res: res };",
            "hits": 0,
            "miss": true
          },
          "233": {
            "source": "            return next(err, server, data);",
            "hits": 0,
            "miss": true
          },
          "234": {
            "source": "        });",
            "miss": false
          },
          "235": {
            "source": "    };",
            "miss": false
          },
          "236": {
            "source": "};",
            "miss": false
          },
          "237": {
            "source": "",
            "miss": false
          }
        }
      },
      {
        "filename": "lib/order/index.js",
        "percent": 55.55555555555556,
        "hits": 20,
        "misses": 16,
        "sloc": 36,
        "source": {
          "1": {
            "source": "// Load modules",
            "miss": false
          },
          "2": {
            "source": "",
            "miss": false
          },
          "3": {
            "source": "var Hoek = require('hoek');",
            "hits": 1,
            "miss": false
          },
          "4": {
            "source": "var Url = require('url');",
            "hits": 1,
            "miss": false
          },
          "5": {
            "source": "",
            "miss": false
          },
          "6": {
            "source": "",
            "miss": false
          },
          "7": {
            "source": "module.exports.get = function (options) {",
            "hits": 1,
            "miss": false
          },
          "8": {
            "source": "",
            "miss": false
          },
          "9": {
            "source": "    options = options || {};",
            "hits": 0,
            "miss": true
          },
          "10": {
            "source": "    return function (server, data, next) {",
            "hits": 0,
            "miss": true
          },
          "11": {
            "source": "",
            "miss": false
          },
          "12": {
            "source": "        var orderId = options.orderId || Hoek.reach(data, 'checkout.submitOrder.res.result.order.groupOrderId');",
            "hits": 0,
            "miss": true
          },
          "13": {
            "source": "        var defaults = {",
            "hits": 0,
            "miss": true
          },
          "14": {
            "source": "            method: 'GET',",
            "miss": false
          },
          "15": {
            "source": "            url: '/order/' + orderId",
            "miss": false
          },
          "16": {
            "source": "        };",
            "miss": false
          },
          "17": {
            "source": "",
            "miss": false
          },
          "18": {
            "source": "        options = Hoek.merge(defaults, options, true);",
            "hits": 0,
            "miss": true
          },
          "19": {
            "source": "        server.inject(options, function (res) {",
            "hits": 0,
            "miss": true
          },
          "20": {
            "source": "",
            "miss": false
          },
          "21": {
            "source": "            data.order.get = { req: options, res: res };",
            "hits": 0,
            "miss": true
          },
          "22": {
            "source": "            return next(null, server, data);",
            "hits": 0,
            "miss": true
          },
          "23": {
            "source": "        });",
            "miss": false
          },
          "24": {
            "source": "    };",
            "miss": false
          },
          "25": {
            "source": "};",
            "miss": false
          },
          "26": {
            "source": "",
            "miss": false
          },
          "27": {
            "source": "",
            "miss": false
          },
          "28": {
            "source": "module.exports.getHistory = function (options) {",
            "hits": 1,
            "miss": false
          },
          "29": {
            "source": "",
            "miss": false
          },
          "30": {
            "source": "    options = options || {};",
            "hits": 0,
            "miss": true
          },
          "31": {
            "source": "    return function (server, data, next) {",
            "hits": 0,
            "miss": true
          },
          "32": {
            "source": "",
            "miss": false
          },
          "33": {
            "source": "        var customerId = options.customerId || Hoek.reach(data, 'customer.create.res.result.id');",
            "hits": 0,
            "miss": true
          },
          "34": {
            "source": "        var defaults = {",
            "hits": 0,
            "miss": true
          },
          "35": {
            "source": "            method: 'GET',",
            "miss": false
          },
          "36": {
            "source": "            url: Url.format({",
            "miss": false
          },
          "37": {
            "source": "                pathname: '/order/history/' + customerId,",
            "miss": false
          },
          "38": {
            "source": "                query: options.query",
            "miss": false
          },
          "39": {
            "source": "            })",
            "miss": false
          },
          "40": {
            "source": "        };",
            "miss": false
          },
          "41": {
            "source": "",
            "miss": false
          },
          "42": {
            "source": "        options = Hoek.merge(defaults, options, true);",
            "hits": 0,
            "miss": true
          },
          "43": {
            "source": "        server.inject(options, function (res) {",
            "hits": 0,
            "miss": true
          },
          "44": {
            "source": "",
            "miss": false
          },
          "45": {
            "source": "            data.order.getHistory = { req: options, res: res };",
            "hits": 0,
            "miss": true
          },
          "46": {
            "source": "            return next(null, server, data);",
            "hits": 0,
            "miss": true
          },
          "47": {
            "source": "        });",
            "miss": false
          },
          "48": {
            "source": "    };",
            "miss": false
          },
          "49": {
            "source": "};",
            "miss": false
          },
          "50": {
            "source": "",
            "miss": false
          }
        }
      },
      {
        "filename": "lib/payment/index.js",
        "percent": 77.27272727272727,
        "hits": 119,
        "misses": 35,
        "sloc": 154,
        "source": {
          "1": {
            "source": "// Load modules",
            "miss": false
          },
          "2": {
            "source": "",
            "miss": false
          },
          "3": {
            "source": "var Hoek = require('hoek');",
            "hits": 1,
            "miss": false
          },
          "4": {
            "source": "",
            "miss": false
          },
          "5": {
            "source": "",
            "miss": false
          },
          "6": {
            "source": "// Declare internals",
            "miss": false
          },
          "7": {
            "source": "",
            "miss": false
          },
          "8": {
            "source": "var internals = {",
            "hits": 1,
            "miss": false
          },
          "9": {
            "source": "    giftCards: [",
            "miss": false
          },
          "10": {
            "source": "        { account: '7777079673893875', pin: '5524', pmId: 'FDCGC'},",
            "miss": false
          },
          "11": {
            "source": "        { account: '7777079673911124', pin: '6724', pmId: 'FDCGC'},",
            "miss": false
          },
          "12": {
            "source": "        //{ account: '7777079673953760', pin: '2639', pmId: 'FDCGC'},   // Reserved to test $0 balance",
            "miss": false
          },
          "13": {
            "source": "        { account: '7777079673960874', pin: '3311', pmId: 'FDCGC'},",
            "miss": false
          },
          "14": {
            "source": "        { account: '7777079673882263', pin: '8931', pmId: 'FDCGC'},",
            "miss": false
          },
          "15": {
            "source": "        { account: '7777079673977106', pin: '8138', pmId: 'FDCGC'},",
            "miss": false
          },
          "16": {
            "source": "        { account: '7777061939848501', pin: '3604', pmId: 'FDCGC'},",
            "miss": false
          },
          "17": {
            "source": "        { account: '7777061939858501', pin: '4942', pmId: 'FDCGC'},",
            "miss": false
          },
          "18": {
            "source": "        { account: '7777061944649800', pin: '4028', pmId: 'FDCGC'}",
            "miss": false
          },
          "19": {
            "source": "    ]",
            "miss": false
          },
          "20": {
            "source": "};",
            "miss": false
          },
          "21": {
            "source": "",
            "miss": false
          },
          "22": {
            "source": "",
            "miss": false
          },
          "23": {
            "source": "module.exports.giftCardMinimum = '1000';",
            "hits": 1,
            "miss": false
          },
          "24": {
            "source": "",
            "miss": false
          },
          "25": {
            "source": "",
            "miss": false
          },
          "26": {
            "source": "module.exports.generatePiHash = function (options) {",
            "hits": 1,
            "miss": false
          },
          "27": {
            "source": "",
            "miss": false
          },
          "28": {
            "source": "    return function (server, data, next) {",
            "hits": 6,
            "miss": false
          },
          "29": {
            "source": "",
            "miss": false
          },
          "30": {
            "source": "        var defaults = {",
            "hits": 6,
            "miss": false
          },
          "31": {
            "source": "            account: '4716118355162725',",
            "miss": false
          },
          "32": {
            "source": "            pmId: 'VISA'",
            "miss": false
          },
          "33": {
            "source": "        };",
            "miss": false
          },
          "34": {
            "source": "",
            "miss": false
          },
          "35": {
            "source": "        options = Hoek.merge(defaults, options || {}, true);",
            "hits": 6,
            "miss": false
          },
          "36": {
            "source": "        server.plugins.payment.generatePiHash(options, function (err, piHash) {",
            "hits": 6,
            "miss": false
          },
          "37": {
            "source": "",
            "miss": false
          },
          "38": {
            "source": "            data.payment.generatePiHash = { req: options, res: piHash };",
            "hits": 6,
            "miss": false
          },
          "39": {
            "source": "            return next(err, server, data);",
            "hits": 6,
            "miss": false
          },
          "40": {
            "source": "        });",
            "miss": false
          },
          "41": {
            "source": "    };",
            "miss": false
          },
          "42": {
            "source": "};",
            "miss": false
          },
          "43": {
            "source": "",
            "miss": false
          },
          "44": {
            "source": "",
            "miss": false
          },
          "45": {
            "source": "module.exports.voltagePiHash = function (options) {",
            "hits": 1,
            "miss": false
          },
          "46": {
            "source": "",
            "miss": false
          },
          "47": {
            "source": "    return function (server, data, next) {",
            "hits": 2,
            "miss": false
          },
          "48": {
            "source": "",
            "miss": false
          },
          "49": {
            "source": "        var encryptedCard = Hoek.reach(data, 'encryption.card.res') || {};",
            "hits": 2,
            "miss": false
          },
          "50": {
            "source": "        var defaults = {",
            "hits": 2,
            "miss": false
          },
          "51": {
            "source": "            pmId: encryptedCard.cardType,",
            "miss": false
          },
          "52": {
            "source": "            phase: encryptedCard.phase,",
            "miss": false
          },
          "53": {
            "source": "            cypherTextPan: encryptedCard.encryptedPan,",
            "miss": false
          },
          "54": {
            "source": "            cypherTextCvv: encryptedCard.encryptedCvv,",
            "miss": false
          },
          "55": {
            "source": "            keyId: encryptedCard.keyId,",
            "miss": false
          },
          "56": {
            "source": "            integrityCheck: encryptedCard.integrityCheck",
            "miss": false
          },
          "57": {
            "source": "        };",
            "miss": false
          },
          "58": {
            "source": "",
            "miss": false
          },
          "59": {
            "source": "        options = Hoek.merge(defaults, options || {}, true);",
            "hits": 2,
            "miss": false
          },
          "60": {
            "source": "        server.plugins.payment.voltagePiHash(options, function (err, piHash) {",
            "hits": 2,
            "miss": false
          },
          "61": {
            "source": "",
            "miss": false
          },
          "62": {
            "source": "            data.payment.voltagePiHash = { req: options, res: piHash };",
            "hits": 2,
            "miss": false
          },
          "63": {
            "source": "            return next(err, server, data);",
            "hits": 2,
            "miss": false
          },
          "64": {
            "source": "        });",
            "miss": false
          },
          "65": {
            "source": "    };",
            "miss": false
          },
          "66": {
            "source": "};",
            "miss": false
          },
          "67": {
            "source": "",
            "miss": false
          },
          "68": {
            "source": "",
            "miss": false
          },
          "69": {
            "source": "module.exports.initiateIdentity = function (options) {",
            "hits": 1,
            "miss": false
          },
          "70": {
            "source": "",
            "miss": false
          },
          "71": {
            "source": "    return function (server, data, next) {",
            "hits": 0,
            "miss": true
          },
          "72": {
            "source": "",
            "miss": false
          },
          "73": {
            "source": "        var defaults = {",
            "hits": 0,
            "miss": true
          },
          "74": {
            "source": "            currencyAmount: '45',",
            "miss": false
          },
          "75": {
            "source": "            pmId: 'Paypal'",
            "miss": false
          },
          "76": {
            "source": "        };",
            "miss": false
          },
          "77": {
            "source": "",
            "miss": false
          },
          "78": {
            "source": "        options = Hoek.merge(defaults, options || {}, true);",
            "hits": 0,
            "miss": true
          },
          "79": {
            "source": "        server.plugins.payment.initiateIdentity(options, function (err, res) {",
            "hits": 0,
            "miss": true
          },
          "80": {
            "source": "",
            "miss": false
          },
          "81": {
            "source": "            data.payment.initiateIdentity = { req: options, res: res };",
            "hits": 0,
            "miss": true
          },
          "82": {
            "source": "            return next(err, server, data);",
            "hits": 0,
            "miss": true
          },
          "83": {
            "source": "        });",
            "miss": false
          },
          "84": {
            "source": "    };",
            "miss": false
          },
          "85": {
            "source": "};",
            "miss": false
          },
          "86": {
            "source": "",
            "miss": false
          },
          "87": {
            "source": "",
            "miss": false
          },
          "88": {
            "source": "module.exports.confirmIdentity = function (options) {",
            "hits": 1,
            "miss": false
          },
          "89": {
            "source": "",
            "miss": false
          },
          "90": {
            "source": "    return function (server, data, next) {",
            "hits": 0,
            "miss": true
          },
          "91": {
            "source": "",
            "miss": false
          },
          "92": {
            "source": "        var defaults = {",
            "hits": 0,
            "miss": true
          },
          "93": {
            "source": "            paymentHandle: Hoek.reach(data, 'payment.initiateIdentity.res.paymenthandle') || '',",
            "chunks": [
              {
                "source": "            paymentHandle: "
              },
              {
                "source": "Hoek.reach(data, 'payment.initiateIdentity.res.paymenthandle')",
                "miss": "never"
              },
              {
                "source": " || "
              },
              {
                "source": "''",
                "miss": "never"
              },
              {
                "source": ","
              }
            ],
            "miss": true
          },
          "94": {
            "source": "            pmId: 'Paypal'",
            "miss": false
          },
          "95": {
            "source": "        };",
            "miss": false
          },
          "96": {
            "source": "",
            "miss": false
          },
          "97": {
            "source": "        options = Hoek.merge(defaults, options || {}, true);",
            "hits": 0,
            "miss": true
          },
          "98": {
            "source": "        server.plugins.payment.confirmIdentity(options, function (err, res) {",
            "hits": 0,
            "miss": true
          },
          "99": {
            "source": "",
            "miss": false
          },
          "100": {
            "source": "            data.payment.confirmIdentity = { req: options, res: res };",
            "hits": 0,
            "miss": true
          },
          "101": {
            "source": "            return next(err, server, data);",
            "hits": 0,
            "miss": true
          },
          "102": {
            "source": "        });",
            "miss": false
          },
          "103": {
            "source": "    };",
            "miss": false
          },
          "104": {
            "source": "};",
            "miss": false
          },
          "105": {
            "source": "",
            "miss": false
          },
          "106": {
            "source": "",
            "miss": false
          },
          "107": {
            "source": "module.exports.giftCardBalance = function (options) {",
            "hits": 1,
            "miss": false
          },
          "108": {
            "source": "",
            "miss": false
          },
          "109": {
            "source": "    return function (server, data, next) {",
            "hits": 3,
            "miss": false
          },
          "110": {
            "source": "",
            "miss": false
          },
          "111": {
            "source": "        var defaults = {",
            "hits": 3,
            "miss": false
          },
          "112": {
            "source": "            piHash: Hoek.reach(data, 'payment.generatePiHash.res') || ''",
            "chunks": [
              {
                "source": "            piHash: "
              },
              {
                "source": "Hoek.reach(data, 'payment.generatePiHash.res')",
                "miss": "true"
              },
              {
                "source": " || "
              },
              {
                "source": "''",
                "miss": "never"
              }
            ],
            "miss": true
          },
          "113": {
            "source": "        };",
            "miss": false
          },
          "114": {
            "source": "",
            "miss": false
          },
          "115": {
            "source": "        options = Hoek.merge(defaults, options || {}, true);",
            "chunks": [
              {
                "source": "        options = Hoek.merge(defaults, "
              },
              {
                "source": "options",
                "miss": "false"
              },
              {
                "source": " || {}, true);"
              }
            ],
            "hits": 3,
            "miss": true
          },
          "116": {
            "source": "        server.plugins.payment.giftCardBalance(options, function (err, res) {",
            "hits": 3,
            "miss": false
          },
          "117": {
            "source": "",
            "miss": false
          },
          "118": {
            "source": "            data.payment.giftCardBalance = { req: options, res: res };",
            "hits": 3,
            "miss": false
          },
          "119": {
            "source": "            return next(err, server, data);",
            "hits": 3,
            "miss": false
          },
          "120": {
            "source": "        });",
            "miss": false
          },
          "121": {
            "source": "    };",
            "miss": false
          },
          "122": {
            "source": "};",
            "miss": false
          },
          "123": {
            "source": "",
            "miss": false
          },
          "124": {
            "source": "",
            "miss": false
          },
          "125": {
            "source": "module.exports.createGiftCard = function (options) {",
            "hits": 1,
            "miss": false
          },
          "126": {
            "source": "",
            "miss": false
          },
          "127": {
            "source": "    return function (server, data, next) {",
            "hits": 0,
            "miss": true
          },
          "128": {
            "source": "",
            "miss": false
          },
          "129": {
            "source": "        var defaults = {",
            "hits": 0,
            "miss": true
          },
          "130": {
            "source": "            startingBalance: 500",
            "miss": false
          },
          "131": {
            "source": "        };",
            "miss": false
          },
          "132": {
            "source": "",
            "miss": false
          },
          "133": {
            "source": "        options = Hoek.merge(defaults, options || {}, true);",
            "hits": 0,
            "miss": true
          },
          "134": {
            "source": "        server.plugins.payment.createGiftCard(options, function (err, res) {",
            "hits": 0,
            "miss": true
          },
          "135": {
            "source": "",
            "miss": false
          },
          "136": {
            "source": "            data.payment.createGiftCard = { req: options, res: res };",
            "hits": 0,
            "miss": true
          },
          "137": {
            "source": "            return next(err, server, data);",
            "hits": 0,
            "miss": true
          },
          "138": {
            "source": "        });",
            "miss": false
          },
          "139": {
            "source": "    };",
            "miss": false
          },
          "140": {
            "source": "};",
            "miss": false
          },
          "141": {
            "source": "",
            "miss": false
          },
          "142": {
            "source": "",
            "miss": false
          },
          "143": {
            "source": "module.exports.addGiftCardBalance = function (options) {",
            "hits": 1,
            "miss": false
          },
          "144": {
            "source": "",
            "miss": false
          },
          "145": {
            "source": "    return function (server, data, next) {",
            "hits": 2,
            "miss": false
          },
          "146": {
            "source": "",
            "miss": false
          },
          "147": {
            "source": "        var card = Hoek.reach(data, 'payment.giftCardBalance.res');",
            "hits": 2,
            "miss": false
          },
          "148": {
            "source": "",
            "miss": false
          },
          "149": {
            "source": "        var defaults = {",
            "hits": 2,
            "miss": false
          },
          "150": {
            "source": "            piHash: Hoek.reach(data, 'payment.generatePiHash.res') || '',",
            "chunks": [
              {
                "source": "            piHash: "
              },
              {
                "source": "Hoek.reach(data, 'payment.generatePiHash.res')",
                "miss": "true"
              },
              {
                "source": " || "
              },
              {
                "source": "''",
                "miss": "never"
              },
              {
                "source": ","
              }
            ],
            "miss": true
          },
          "151": {
            "source": "            pin: Hoek.reach(data, 'payment.generatePiHash.req.pin') || '',",
            "chunks": [
              {
                "source": "            pin: "
              },
              {
                "source": "Hoek.reach(data, 'payment.generatePiHash.req.pin')",
                "miss": "true"
              },
              {
                "source": " || "
              },
              {
                "source": "''",
                "miss": "never"
              },
              {
                "source": ","
              }
            ],
            "miss": true
          },
          "152": {
            "source": "            amount: Math.round((module.exports.giftCardMinimum - card.balance) * 100) / 100",
            "miss": false
          },
          "153": {
            "source": "        };",
            "miss": false
          },
          "154": {
            "source": "",
            "miss": false
          },
          "155": {
            "source": "        options = Hoek.merge(defaults, options || {}, true);",
            "hits": 2,
            "miss": false
          },
          "156": {
            "source": "",
            "miss": false
          },
          "157": {
            "source": "        if (card.balance >= module.exports.giftCardMinimum) {",
            "hits": 2,
            "miss": false
          },
          "158": {
            "source": "            var res = { balance: card.balance, currency: 'USD' };",
            "hits": 1,
            "miss": false
          },
          "159": {
            "source": "            data.payment.addGiftCardBalance = { req: options, res: res };",
            "hits": 1,
            "miss": false
          },
          "160": {
            "source": "            return next(null, server, data);",
            "hits": 1,
            "miss": false
          },
          "161": {
            "source": "        }",
            "miss": false
          },
          "162": {
            "source": "",
            "miss": false
          },
          "163": {
            "source": "        server.plugins.payment.addGiftCardBalance(options, function (err, res) {",
            "hits": 1,
            "miss": false
          },
          "164": {
            "source": "",
            "miss": false
          },
          "165": {
            "source": "            data.payment.addGiftCardBalance = { req: options, res: res };",
            "hits": 1,
            "miss": false
          },
          "166": {
            "source": "            return next(err, server, data);",
            "hits": 1,
            "miss": false
          },
          "167": {
            "source": "        });",
            "miss": false
          },
          "168": {
            "source": "    };",
            "miss": false
          },
          "169": {
            "source": "};",
            "miss": false
          },
          "170": {
            "source": "",
            "miss": false
          },
          "171": {
            "source": "",
            "miss": false
          },
          "172": {
            "source": "module.exports.createPiHash = function (options) {",
            "hits": 1,
            "miss": false
          },
          "173": {
            "source": "",
            "miss": false
          },
          "174": {
            "source": "    return function (server, data, next) {",
            "hits": 0,
            "miss": true
          },
          "175": {
            "source": "",
            "miss": false
          },
          "176": {
            "source": "        var defaults = {",
            "hits": 0,
            "miss": true
          },
          "177": {
            "source": "            method: 'POST',",
            "miss": false
          },
          "178": {
            "source": "            url: '/payment/pihash',",
            "miss": false
          },
          "179": {
            "source": "            payload: {",
            "miss": false
          },
          "180": {
            "source": "                number: '4716118355162725',",
            "miss": false
          },
          "181": {
            "source": "                pmId: 'VISA'",
            "miss": false
          },
          "182": {
            "source": "            }",
            "miss": false
          },
          "183": {
            "source": "        };",
            "miss": false
          },
          "184": {
            "source": "",
            "miss": false
          },
          "185": {
            "source": "        options = Hoek.merge(defaults, options || {}, true);",
            "hits": 0,
            "miss": true
          },
          "186": {
            "source": "        server.inject(options, function (res) {",
            "hits": 0,
            "miss": true
          },
          "187": {
            "source": "",
            "miss": false
          },
          "188": {
            "source": "            data.payment.createPiHash = { req: options, res: res };",
            "hits": 0,
            "miss": true
          },
          "189": {
            "source": "            return next(null, server, data);",
            "hits": 0,
            "miss": true
          },
          "190": {
            "source": "        });",
            "miss": false
          },
          "191": {
            "source": "    };",
            "miss": false
          },
          "192": {
            "source": "};",
            "miss": false
          },
          "193": {
            "source": "",
            "miss": false
          },
          "194": {
            "source": "",
            "miss": false
          },
          "195": {
            "source": "module.exports.getGiftCardBalance = function (options) {",
            "hits": 1,
            "miss": false
          },
          "196": {
            "source": "",
            "miss": false
          },
          "197": {
            "source": "    return function (server, data, next) {",
            "hits": 0,
            "miss": true
          },
          "198": {
            "source": "",
            "miss": false
          },
          "199": {
            "source": "        var defaults = {",
            "hits": 0,
            "miss": true
          },
          "200": {
            "source": "            method: 'GET',",
            "miss": false
          },
          "201": {
            "source": "            url: '/giftcard/' + Hoek.reach(data, 'payment.generatePiHash.res')",
            "miss": false
          },
          "202": {
            "source": "        };",
            "miss": false
          },
          "203": {
            "source": "",
            "miss": false
          },
          "204": {
            "source": "        options = Hoek.merge(defaults, options || {}, true);",
            "hits": 0,
            "miss": true
          },
          "205": {
            "source": "        server.inject(options, function (res) {",
            "hits": 0,
            "miss": true
          },
          "206": {
            "source": "",
            "miss": false
          },
          "207": {
            "source": "            data.payment.getGiftCardBalance = { req: options, res: res };",
            "hits": 0,
            "miss": true
          },
          "208": {
            "source": "            return next(null, server, data);",
            "hits": 0,
            "miss": true
          },
          "209": {
            "source": "        });",
            "miss": false
          },
          "210": {
            "source": "    };",
            "miss": false
          },
          "211": {
            "source": "};",
            "miss": false
          },
          "212": {
            "source": "",
            "miss": false
          },
          "213": {
            "source": "",
            "miss": false
          },
          "214": {
            "source": "module.exports.getStaticGiftCard = function () {",
            "hits": 1,
            "miss": false
          },
          "215": {
            "source": "",
            "miss": false
          },
          "216": {
            "source": "    // Use the static gift cards in a round robin fashion",
            "miss": false
          },
          "217": {
            "source": "    var gc = internals.giftCards.shift();",
            "hits": 4,
            "miss": false
          },
          "218": {
            "source": "",
            "miss": false
          },
          "219": {
            "source": "    internals.giftCards.push(gc);",
            "hits": 4,
            "miss": false
          },
          "220": {
            "source": "    return gc;",
            "hits": 4,
            "miss": false
          },
          "221": {
            "source": "};",
            "miss": false
          },
          "222": {
            "source": "",
            "miss": false
          }
        }
      },
      {
        "filename": "lib/store/index.js",
        "percent": 61.29032258064516,
        "hits": 19,
        "misses": 12,
        "sloc": 31,
        "source": {
          "1": {
            "source": "// Load modules",
            "miss": false
          },
          "2": {
            "source": "",
            "miss": false
          },
          "3": {
            "source": "var Url = require('url');",
            "hits": 1,
            "miss": false
          },
          "4": {
            "source": "var Hoek = require('hoek');",
            "hits": 1,
            "miss": false
          },
          "5": {
            "source": "",
            "miss": false
          },
          "6": {
            "source": "",
            "miss": false
          },
          "7": {
            "source": "module.exports.get = function (query, options) {",
            "hits": 1,
            "miss": false
          },
          "8": {
            "source": "",
            "miss": false
          },
          "9": {
            "source": "    return function (server, data, next) {",
            "hits": 0,
            "miss": true
          },
          "10": {
            "source": "",
            "miss": false
          },
          "11": {
            "source": "        var defaults = {",
            "hits": 0,
            "miss": true
          },
          "12": {
            "source": "            method: 'GET',",
            "miss": false
          },
          "13": {
            "source": "            url: Url.format({",
            "miss": false
          },
          "14": {
            "source": "                pathname: '/stores',",
            "miss": false
          },
          "15": {
            "source": "                query: query",
            "miss": false
          },
          "16": {
            "source": "            })",
            "miss": false
          },
          "17": {
            "source": "        };",
            "miss": false
          },
          "18": {
            "source": "",
            "miss": false
          },
          "19": {
            "source": "        options = Hoek.merge(defaults, options || {}, true);",
            "hits": 0,
            "miss": true
          },
          "20": {
            "source": "        server.inject(options, function (res) {",
            "hits": 0,
            "miss": true
          },
          "21": {
            "source": "",
            "miss": false
          },
          "22": {
            "source": "            data.store.get = { req: options, res: res };",
            "hits": 0,
            "miss": true
          },
          "23": {
            "source": "            return next(null, server, data);",
            "hits": 0,
            "miss": true
          },
          "24": {
            "source": "        });",
            "miss": false
          },
          "25": {
            "source": "    };",
            "miss": false
          },
          "26": {
            "source": "};",
            "miss": false
          },
          "27": {
            "source": "",
            "miss": false
          },
          "28": {
            "source": "",
            "miss": false
          },
          "29": {
            "source": "module.exports.retrieve = function (options) {",
            "hits": 1,
            "miss": false
          },
          "30": {
            "source": "",
            "miss": false
          },
          "31": {
            "source": "    return function (server, data, next) {",
            "hits": 0,
            "miss": true
          },
          "32": {
            "source": "",
            "miss": false
          },
          "33": {
            "source": "        var defaults = {",
            "hits": 0,
            "miss": true
          },
          "34": {
            "source": "            distance: 50",
            "miss": false
          },
          "35": {
            "source": "        };",
            "miss": false
          },
          "36": {
            "source": "",
            "miss": false
          },
          "37": {
            "source": "        options = Hoek.merge(defaults, options || {}, true);",
            "hits": 0,
            "miss": true
          },
          "38": {
            "source": "        server.plugins.store.retrieve(options, function (err, res) {",
            "hits": 0,
            "miss": true
          },
          "39": {
            "source": "",
            "miss": false
          },
          "40": {
            "source": "            data.store.retrieve = { req: options, res: res };",
            "hits": 0,
            "miss": true
          },
          "41": {
            "source": "            return next(null, server, data);",
            "hits": 0,
            "miss": true
          },
          "42": {
            "source": "        });",
            "miss": false
          },
          "43": {
            "source": "    };",
            "miss": false
          },
          "44": {
            "source": "};",
            "miss": false
          },
          "45": {
            "source": "",
            "miss": false
          }
        }
      }
    ],
    "tests": [
      {
        "title": "Authentication creates a new user",
        "duration": 2381
      },
      {
        "title": "Authentication authenticates a valid user",
        "duration": 2923
      },
      {
        "title": "Authentication returns success for an authenticated user",
        "duration": 3463
      },
      {
        "title": "Authentication Scheme returns success for an authenticated user",
        "duration": 1708
      },
      {
        "title": "Password PUT /auth/password succesfully changes a password",
        "duration": 1724
      },
      {
        "title": "Password POST /auth/password/reset succesfully obtains token",
        "duration": 1163
      },
      {
        "title": "Password PUT /auth/password/reset succesfully resets password",
        "duration": 2246
      },
      {
        "title": "AVS POST /avs returns invalid when presented with address missing apartment info",
        "duration": 21480,
        "error": {
          "message": "Expected status code 500 to equal 400. /avs returned { statusCode: 500,\n  error: 'Internal Server Error',\n  message: 'An internal server error occurred',\n  pangaeaErrors: \n   [ { code: '502.ADDRESS_VALIDATION.201',\n       field: '',\n       description: 'PBS service is unavailable: ConnectException invoking http://avs.stg-cdc.ca.services.qa.walmart.com/rest/ValidateAddress/results.json?Data.AddressLine1=1480+64th+St.&Data.City=Emeryville&Data.StateProvince=CA&Data.PostalCode=94608&Data.Country=USA&Option.PerformUSProcessing=Y&Option.Database.US=UAM_USA&Option.MaximumResults=10&Option.OutputFormattedOnFail=N&Option.KeepMultimatch=Y&Option.OutputFieldLevelReturnCodes=Y: Connection timed out',\n       info: 'PBS service is unavailable: ConnectException invoking http://avs.stg-cdc.ca.services.qa.walmart.com/rest/ValidateAddress/results.json?Data.AddressLine1=1480+64th+St.&Data.City=Emeryville&Data.StateProvince=CA&Data.PostalCode=94608&Data.Country=USA&Option.PerformUSProcessing=Y&Option.Database.US=UAM_USA&Option.MaximumResults=10&Option.OutputFormattedOnFail=N&Option.KeepMultimatch=Y&Option.OutputFieldLevelReturnCodes=Y: Connection timed out',\n       severity: 'ERROR',\n       category: 'APPLICATION' } ] }",
          "stack": "Error: Expected status code 500 to equal 400. /avs returned { statusCode: 500,\n  error: 'Internal Server Error',\n  message: 'An internal server error occurred',\n  pangaeaErrors: \n   [ { code: '502.ADDRESS_VALIDATION.201',\n       field: '',\n       description: 'PBS service is unavailable: ConnectException invoking http://avs.stg-cdc.ca.services.qa.walmart.com/rest/ValidateAddress/results.json?Data.AddressLine1=1480+64th+St.&Data.City=Emeryville&Data.StateProvince=CA&Data.PostalCode=94608&Data.Country=USA&Option.PerformUSProcessing=Y&Option.Database.US=UAM_USA&Option.MaximumResults=10&Option.OutputFormattedOnFail=N&Option.KeepMultimatch=Y&Option.OutputFieldLevelReturnCodes=Y: Connection timed out',\n       info: 'PBS service is unavailable: ConnectException invoking http://avs.stg-cdc.ca.services.qa.walmart.com/rest/ValidateAddress/results.json?Data.AddressLine1=1480+64th+St.&Data.City=Emeryville&Data.StateProvince=CA&Data.PostalCode=94608&Data.Country=USA&Option.PerformUSProcessing=Y&Option.Database.US=UAM_USA&Option.MaximumResults=10&Option.OutputFormattedOnFail=N&Option.KeepMultimatch=Y&Option.OutputFieldLevelReturnCodes=Y: Connection timed out',\n       severity: 'ERROR',\n       category: 'APPLICATION' } ] }\n    at Object.module.exports.checkStatus (/Users/lbenson/scm/lapetus/test-helpers/lib/tools.js:261:86)\n    at /Users/lbenson/scm/lapetus/test-helpers/test/avs.js:58:24\n    at /Users/lbenson/scm/lapetus/test-helpers/lib/avs/index.js:85:95\n    at /Users/lbenson/scm/lapetus/test-helpers/node_modules/hapi/lib/server.js:519:16\n    at /Users/lbenson/scm/lapetus/test-helpers/node_modules/hapi/node_modules/shot/lib/index.js:191:13\n    at process._tickDomainCallback (node.js:463:13)"
        }
      },
      {
        "title": "AVS POST /avs returns valid when presented with valid address",
        "duration": 21483,
        "error": {
          "message": "expected [Error: Expected 500 to match /2\\d\\d/\n\n\t{\"statusCode\":500,\"error\":\"Internal Server Error\",\"message\":\"An internal server error occurred\",\"pangaeaErrors\":[{\"code\":\"502.ADDRESS_VALIDATION.201\",\"field\":\"\",\"description\":\"PBS service is unavailable: ConnectException invoking http://avs.stg-cdc.ca.services.qa.walmart.com/rest/ValidateAddress/results.json?Data.AddressLine1=420+N+Weber+Rd&Data.City=romeoville&Data.StateProvince=IL&Data.PostalCode=60446-4945&Data.Country=USA&Option.PerformUSProcessing=Y&Option.Database.US=UAM_USA&Option.MaximumResults=10&Option.OutputFormattedOnFail=N&Option.KeepMultimatch=Y&Option.OutputFieldLevelReturnCodes=Y: Connection timed out\",\"info\":\"PBS service is unavailable: ConnectException invoking http://avs.stg-cdc.ca.services.qa.walmart.com/rest/ValidateAddress/results.json?Data.AddressLine1=420+N+Weber+Rd&Data.City=romeoville&Data.StateProvince=IL&Data.PostalCode=60446-4945&Data.Country=USA&Option.PerformUSProcessing=Y&Option.Database.US=UAM_USA&Option.MaximumResults=10&Option.OutputFormattedOnFail=N&Option.KeepMultimatch=Y&Option.OutputFieldLevelReturnCodes=Y: Connection timed out\",\"severity\":\"ERROR\",\"category\":\"APPLICATION\"}]}] to not exist",
          "stack": "AssertionError: expected [Error: Expected 500 to match /2\\d\\d/\n\n\t{\"statusCode\":500,\"error\":\"Internal Server Error\",\"message\":\"An internal server error occurred\",\"pangaeaErrors\":[{\"code\":\"502.ADDRESS_VALIDATION.201\",\"field\":\"\",\"description\":\"PBS service is unavailable: ConnectException invoking http://avs.stg-cdc.ca.services.qa.walmart.com/rest/ValidateAddress/results.json?Data.AddressLine1=420+N+Weber+Rd&Data.City=romeoville&Data.StateProvince=IL&Data.PostalCode=60446-4945&Data.Country=USA&Option.PerformUSProcessing=Y&Option.Database.US=UAM_USA&Option.MaximumResults=10&Option.OutputFormattedOnFail=N&Option.KeepMultimatch=Y&Option.OutputFieldLevelReturnCodes=Y: Connection timed out\",\"info\":\"PBS service is unavailable: ConnectException invoking http://avs.stg-cdc.ca.services.qa.walmart.com/rest/ValidateAddress/results.json?Data.AddressLine1=420+N+Weber+Rd&Data.City=romeoville&Data.StateProvince=IL&Data.PostalCode=60446-4945&Data.Country=USA&Option.PerformUSProcessing=Y&Option.Database.US=UAM_USA&Option.MaximumResults=10&Option.OutputFormattedOnFail=N&Option.KeepMultimatch=Y&Option.OutputFieldLevelReturnCodes=Y: Connection timed out\",\"severity\":\"ERROR\",\"category\":\"APPLICATION\"}]}] to not exist\n    at Assertion.<anonymous> (/Users/lbenson/scm/lapetus/test-helpers/node_modules/lab/node_modules/chai/lib/chai/core/assertions.js:300:10)\n    at Assertion.Object.defineProperty.get (/Users/lbenson/scm/lapetus/test-helpers/node_modules/lab/node_modules/chai/lib/chai/utils/addProperty.js:35:29)\n    at /Users/lbenson/scm/lapetus/test-helpers/test/avs.js:26:35\n    at /Users/lbenson/scm/lapetus/test-helpers/lib/avs/index.js:85:95\n    at /Users/lbenson/scm/lapetus/test-helpers/node_modules/hapi/lib/server.js:519:16\n    at /Users/lbenson/scm/lapetus/test-helpers/node_modules/hapi/node_modules/shot/lib/index.js:191:13\n    at process._tickDomainCallback (node.js:463:13)",
          "actual": {
            "isBoom": true,
            "data": null,
            "output": {
              "statusCode": 500,
              "payload": {
                "statusCode": 500,
                "error": "Internal Server Error",
                "message": "An internal server error occurred"
              },
              "headers": {}
            }
          }
        }
      },
      {
        "title": "Cart creates new cart",
        "duration": 2684
      },
      {
        "title": "Customer GET /customer/{customerId} gets a customer",
        "duration": 2079,
        "error": {
          "message": "Expected status code 500 to equal 200. /customer/a5dcb2a5-e1cf-438d-b189-718c3d228dd5 returned { statusCode: 500,\n  error: 'Internal Server Error',\n  message: 'An internal server error occurred' }",
          "stack": "Error: Expected status code 500 to equal 200. /customer/a5dcb2a5-e1cf-438d-b189-718c3d228dd5 returned { statusCode: 500,\n  error: 'Internal Server Error',\n  message: 'An internal server error occurred' }\n    at Object.module.exports.checkStatus (/Users/lbenson/scm/lapetus/test-helpers/lib/tools.js:261:86)\n    at /Users/lbenson/scm/lapetus/test-helpers/test/customer.js:32:24\n    at /Users/lbenson/scm/lapetus/test-helpers/lib/customer/index.js:310:100\n    at /Users/lbenson/scm/lapetus/test-helpers/node_modules/hapi/lib/server.js:519:16\n    at /Users/lbenson/scm/lapetus/test-helpers/node_modules/hapi/node_modules/shot/lib/index.js:191:13\n    at process._tickDomainCallback (node.js:463:13)"
        }
      },
      {
        "title": "Customer PUT /customer/{customerId} successfully updates a customer",
        "duration": 4271
      },
      {
        "title": "Customer POST /customer/{customerId}/associate-discount returns true for valid associate discount",
        "duration": 2307
      },
      {
        "title": "Customer DELETE /customer/{customerId}/associate-discount removes associate discount",
        "duration": 339,
        "error": {
          "message": "Expected status code 400 to equal 200. /customer/undefined/associate-discount returned { statusCode: 400,\n  error: 'Bad Request',\n  message: 'customerId must be a valid GUID',\n  validation: { source: 'params', keys: [ 'customerId' ] } }",
          "stack": "Error: Expected status code 400 to equal 200. /customer/undefined/associate-discount returned { statusCode: 400,\n  error: 'Bad Request',\n  message: 'customerId must be a valid GUID',\n  validation: { source: 'params', keys: [ 'customerId' ] } }\n    at Object.module.exports.checkStatus (/Users/lbenson/scm/lapetus/test-helpers/lib/tools.js:261:86)\n    at /Users/lbenson/scm/lapetus/test-helpers/test/customer.js:114:24\n    at /Users/lbenson/scm/lapetus/test-helpers/lib/customer/index.js:410:101\n    at /Users/lbenson/scm/lapetus/test-helpers/node_modules/hapi/lib/server.js:519:16\n    at /Users/lbenson/scm/lapetus/test-helpers/node_modules/hapi/node_modules/shot/lib/index.js:191:13\n    at process._tickDomainCallback (node.js:463:13)"
        }
      },
      {
        "title": "Customer #retrieveCustomer returns customer information",
        "duration": 2202
      },
      {
        "title": "Customer #retrieveByEmail returns customer information",
        "duration": 1160,
        "error": {
          "message": "expected 'e34a2778-eb45-46a1-b0bc-5435fd4fdeca' to equal undefined",
          "stack": "AssertionError: expected 'e34a2778-eb45-46a1-b0bc-5435fd4fdeca' to equal undefined\n    at Assertion.assertEqual (/Users/lbenson/scm/lapetus/test-helpers/node_modules/lab/node_modules/chai/lib/chai/core/assertions.js:395:12)\n    at Assertion.ctx.(anonymous function) [as equal] (/Users/lbenson/scm/lapetus/test-helpers/node_modules/lab/node_modules/chai/lib/chai/utils/addMethod.js:40:25)\n    at /Users/lbenson/scm/lapetus/test-helpers/test/customer.js:167:61\n    at /Users/lbenson/scm/lapetus/test-helpers/lib/customer/index.js:350:100\n    at /Users/lbenson/scm/lapetus/test-helpers/node_modules/user/node_modules/fetch/lib/index.js:135:20\n    at /Users/lbenson/scm/lapetus/test-helpers/node_modules/nipple/lib/index.js:418:20\n    at finish (/Users/lbenson/scm/lapetus/test-helpers/node_modules/nipple/lib/index.js:224:20)\n    at wrapped (/Users/lbenson/scm/lapetus/test-helpers/node_modules/hoek/lib/index.js:560:20)\n    at onReaderFinish (/Users/lbenson/scm/lapetus/test-helpers/node_modules/nipple/lib/index.js:277:16)\n    at g (events.js:180:16)\n    at emit (events.js:117:20)\n    at finishMaybe (_stream_writable.js:359:12)\n    at endWritable (_stream_writable.js:366:3)\n    at Writable.end (_stream_writable.js:344:5)\n    at IncomingMessage.onend (_stream_readable.js:501:10)\n    at IncomingMessage.g (events.js:180:16)\n    at IncomingMessage.emit (events.js:117:20)\n    at _stream_readable.js:938:16\n    at process._tickDomainCallback (node.js:463:13)",
          "actual": "e34a2778-eb45-46a1-b0bc-5435fd4fdeca"
        }
      },
      {
        "title": "Customer Credit Card GET /customer/{customerId}/credit-card/{creditCardId} gets a credit card preference for a customer",
        "duration": 1853,
        "error": {
          "message": "Cannot read property 'res' of undefined",
          "stack": "TypeError: Cannot read property 'res' of undefined\n    at /Users/lbenson/scm/lapetus/test-helpers/test/customer.js:189:55\n    at /Users/lbenson/scm/lapetus/test-helpers/node_modules/async/lib/async.js:544:30\n    at /Users/lbenson/scm/lapetus/test-helpers/lib/customer/creditCard.js:235:105\n    at /Users/lbenson/scm/lapetus/test-helpers/node_modules/hapi/lib/server.js:519:16\n    at /Users/lbenson/scm/lapetus/test-helpers/node_modules/hapi/node_modules/shot/lib/index.js:191:13\n    at process._tickDomainCallback (node.js:463:13)"
        }
      },
      {
        "title": "Customer Credit Card PUT /customer/{customerId}/credit-card/{creditCardId} updates a credit card entry for a customer",
        "duration": 3230,
        "error": {
          "message": "Cannot read property 'res' of undefined",
          "stack": "TypeError: Cannot read property 'res' of undefined\n    at /Users/lbenson/scm/lapetus/test-helpers/test/customer.js:237:58\n    at /Users/lbenson/scm/lapetus/test-helpers/node_modules/async/lib/async.js:544:30\n    at /Users/lbenson/scm/lapetus/test-helpers/lib/customer/creditCard.js:235:105\n    at /Users/lbenson/scm/lapetus/test-helpers/node_modules/hapi/lib/server.js:519:16\n    at /Users/lbenson/scm/lapetus/test-helpers/node_modules/hapi/node_modules/shot/lib/index.js:191:13\n    at process._tickDomainCallback (node.js:463:13)"
        }
      },
      {
        "title": "Customer Credit Card DELETE /customer/{customerId}/credit-card/{creditCardId} deletes a credit card entry for a customer",
        "duration": 331,
        "error": {
          "message": "Cannot read property 'res' of undefined",
          "stack": "TypeError: Cannot read property 'res' of undefined\n    at /Users/lbenson/scm/lapetus/test-helpers/test/customer.js:268:58\n    at /Users/lbenson/scm/lapetus/test-helpers/node_modules/async/lib/async.js:544:30\n    at /Users/lbenson/scm/lapetus/test-helpers/lib/customer/creditCard.js:235:105\n    at /Users/lbenson/scm/lapetus/test-helpers/node_modules/hapi/lib/server.js:519:16\n    at /Users/lbenson/scm/lapetus/test-helpers/node_modules/hapi/node_modules/shot/lib/index.js:191:13\n    at process._tickDomainCallback (node.js:463:13)"
        }
      },
      {
        "title": "Customer Credit Card #createPayment Adds credit card via exposed function",
        "duration": 3396
      },
      {
        "title": "Customer Gift Card GET /customer/{customerId}/gift-card/{giftCardId} gets a gift card preference for a customer",
        "duration": 5638
      },
      {
        "title": "Customer Gift Card DELETE /customer/{customerId}/gift-card/{giftCardId} deletes a gift card entry for a customer",
        "duration": 7237
      },
      {
        "title": "Group Read Service gets eligible care plans for an item by USItemId",
        "duration": 2895
      },
      {
        "title": "Group Read Service gets eligible care plans for an item by product Id",
        "duration": 2896
      },
      {
        "title": "Payments generates a cleartext piHash for a credit card",
        "duration": 948
      },
      {
        "title": "Payments returns with an error when the encrypted request is bad",
        "duration": 970
      },
      {
        "title": "Payments returns with an error when the cleartext request is bad",
        "duration": 1134
      },
      {
        "title": "Payments generates an encrypted piHash for a credit card",
        "duration": 1150
      },
      {
        "title": "Payments successfully adds money to a gift card",
        "duration": 2566
      },
      {
        "title": "Payments gets a balance for a gift card",
        "duration": 3337
      },
      {
        "title": "Payments rejects an invalid pin while attempting to add money to gift card",
        "duration": 4248
      },
      {
        "title": "Prepare Server mock is enabled",
        "duration": 81
      },
      {
        "title": "Prepare Server mock is set according to environment variable",
        "duration": 133
      }
    ],
    "failures": [
      {
        "title": "AVS POST /avs returns invalid when presented with address missing apartment info",
        "duration": 21480,
        "error": {
          "message": "Expected status code 500 to equal 400. /avs returned { statusCode: 500,\n  error: 'Internal Server Error',\n  message: 'An internal server error occurred',\n  pangaeaErrors: \n   [ { code: '502.ADDRESS_VALIDATION.201',\n       field: '',\n       description: 'PBS service is unavailable: ConnectException invoking http://avs.stg-cdc.ca.services.qa.walmart.com/rest/ValidateAddress/results.json?Data.AddressLine1=1480+64th+St.&Data.City=Emeryville&Data.StateProvince=CA&Data.PostalCode=94608&Data.Country=USA&Option.PerformUSProcessing=Y&Option.Database.US=UAM_USA&Option.MaximumResults=10&Option.OutputFormattedOnFail=N&Option.KeepMultimatch=Y&Option.OutputFieldLevelReturnCodes=Y: Connection timed out',\n       info: 'PBS service is unavailable: ConnectException invoking http://avs.stg-cdc.ca.services.qa.walmart.com/rest/ValidateAddress/results.json?Data.AddressLine1=1480+64th+St.&Data.City=Emeryville&Data.StateProvince=CA&Data.PostalCode=94608&Data.Country=USA&Option.PerformUSProcessing=Y&Option.Database.US=UAM_USA&Option.MaximumResults=10&Option.OutputFormattedOnFail=N&Option.KeepMultimatch=Y&Option.OutputFieldLevelReturnCodes=Y: Connection timed out',\n       severity: 'ERROR',\n       category: 'APPLICATION' } ] }",
          "stack": "Error: Expected status code 500 to equal 400. /avs returned { statusCode: 500,\n  error: 'Internal Server Error',\n  message: 'An internal server error occurred',\n  pangaeaErrors: \n   [ { code: '502.ADDRESS_VALIDATION.201',\n       field: '',\n       description: 'PBS service is unavailable: ConnectException invoking http://avs.stg-cdc.ca.services.qa.walmart.com/rest/ValidateAddress/results.json?Data.AddressLine1=1480+64th+St.&Data.City=Emeryville&Data.StateProvince=CA&Data.PostalCode=94608&Data.Country=USA&Option.PerformUSProcessing=Y&Option.Database.US=UAM_USA&Option.MaximumResults=10&Option.OutputFormattedOnFail=N&Option.KeepMultimatch=Y&Option.OutputFieldLevelReturnCodes=Y: Connection timed out',\n       info: 'PBS service is unavailable: ConnectException invoking http://avs.stg-cdc.ca.services.qa.walmart.com/rest/ValidateAddress/results.json?Data.AddressLine1=1480+64th+St.&Data.City=Emeryville&Data.StateProvince=CA&Data.PostalCode=94608&Data.Country=USA&Option.PerformUSProcessing=Y&Option.Database.US=UAM_USA&Option.MaximumResults=10&Option.OutputFormattedOnFail=N&Option.KeepMultimatch=Y&Option.OutputFieldLevelReturnCodes=Y: Connection timed out',\n       severity: 'ERROR',\n       category: 'APPLICATION' } ] }\n    at Object.module.exports.checkStatus (/Users/lbenson/scm/lapetus/test-helpers/lib/tools.js:261:86)\n    at /Users/lbenson/scm/lapetus/test-helpers/test/avs.js:58:24\n    at /Users/lbenson/scm/lapetus/test-helpers/lib/avs/index.js:85:95\n    at /Users/lbenson/scm/lapetus/test-helpers/node_modules/hapi/lib/server.js:519:16\n    at /Users/lbenson/scm/lapetus/test-helpers/node_modules/hapi/node_modules/shot/lib/index.js:191:13\n    at process._tickDomainCallback (node.js:463:13)"
        }
      },
      {
        "title": "AVS POST /avs returns valid when presented with valid address",
        "duration": 21483,
        "error": {
          "message": "expected [Error: Expected 500 to match /2\\d\\d/\n\n\t{\"statusCode\":500,\"error\":\"Internal Server Error\",\"message\":\"An internal server error occurred\",\"pangaeaErrors\":[{\"code\":\"502.ADDRESS_VALIDATION.201\",\"field\":\"\",\"description\":\"PBS service is unavailable: ConnectException invoking http://avs.stg-cdc.ca.services.qa.walmart.com/rest/ValidateAddress/results.json?Data.AddressLine1=420+N+Weber+Rd&Data.City=romeoville&Data.StateProvince=IL&Data.PostalCode=60446-4945&Data.Country=USA&Option.PerformUSProcessing=Y&Option.Database.US=UAM_USA&Option.MaximumResults=10&Option.OutputFormattedOnFail=N&Option.KeepMultimatch=Y&Option.OutputFieldLevelReturnCodes=Y: Connection timed out\",\"info\":\"PBS service is unavailable: ConnectException invoking http://avs.stg-cdc.ca.services.qa.walmart.com/rest/ValidateAddress/results.json?Data.AddressLine1=420+N+Weber+Rd&Data.City=romeoville&Data.StateProvince=IL&Data.PostalCode=60446-4945&Data.Country=USA&Option.PerformUSProcessing=Y&Option.Database.US=UAM_USA&Option.MaximumResults=10&Option.OutputFormattedOnFail=N&Option.KeepMultimatch=Y&Option.OutputFieldLevelReturnCodes=Y: Connection timed out\",\"severity\":\"ERROR\",\"category\":\"APPLICATION\"}]}] to not exist",
          "stack": "AssertionError: expected [Error: Expected 500 to match /2\\d\\d/\n\n\t{\"statusCode\":500,\"error\":\"Internal Server Error\",\"message\":\"An internal server error occurred\",\"pangaeaErrors\":[{\"code\":\"502.ADDRESS_VALIDATION.201\",\"field\":\"\",\"description\":\"PBS service is unavailable: ConnectException invoking http://avs.stg-cdc.ca.services.qa.walmart.com/rest/ValidateAddress/results.json?Data.AddressLine1=420+N+Weber+Rd&Data.City=romeoville&Data.StateProvince=IL&Data.PostalCode=60446-4945&Data.Country=USA&Option.PerformUSProcessing=Y&Option.Database.US=UAM_USA&Option.MaximumResults=10&Option.OutputFormattedOnFail=N&Option.KeepMultimatch=Y&Option.OutputFieldLevelReturnCodes=Y: Connection timed out\",\"info\":\"PBS service is unavailable: ConnectException invoking http://avs.stg-cdc.ca.services.qa.walmart.com/rest/ValidateAddress/results.json?Data.AddressLine1=420+N+Weber+Rd&Data.City=romeoville&Data.StateProvince=IL&Data.PostalCode=60446-4945&Data.Country=USA&Option.PerformUSProcessing=Y&Option.Database.US=UAM_USA&Option.MaximumResults=10&Option.OutputFormattedOnFail=N&Option.KeepMultimatch=Y&Option.OutputFieldLevelReturnCodes=Y: Connection timed out\",\"severity\":\"ERROR\",\"category\":\"APPLICATION\"}]}] to not exist\n    at Assertion.<anonymous> (/Users/lbenson/scm/lapetus/test-helpers/node_modules/lab/node_modules/chai/lib/chai/core/assertions.js:300:10)\n    at Assertion.Object.defineProperty.get (/Users/lbenson/scm/lapetus/test-helpers/node_modules/lab/node_modules/chai/lib/chai/utils/addProperty.js:35:29)\n    at /Users/lbenson/scm/lapetus/test-helpers/test/avs.js:26:35\n    at /Users/lbenson/scm/lapetus/test-helpers/lib/avs/index.js:85:95\n    at /Users/lbenson/scm/lapetus/test-helpers/node_modules/hapi/lib/server.js:519:16\n    at /Users/lbenson/scm/lapetus/test-helpers/node_modules/hapi/node_modules/shot/lib/index.js:191:13\n    at process._tickDomainCallback (node.js:463:13)",
          "actual": {
            "isBoom": true,
            "data": null,
            "output": {
              "statusCode": 500,
              "payload": {
                "statusCode": 500,
                "error": "Internal Server Error",
                "message": "An internal server error occurred"
              },
              "headers": {}
            }
          }
        }
      },
      {
        "title": "Customer GET /customer/{customerId} gets a customer",
        "duration": 2079,
        "error": {
          "message": "Expected status code 500 to equal 200. /customer/a5dcb2a5-e1cf-438d-b189-718c3d228dd5 returned { statusCode: 500,\n  error: 'Internal Server Error',\n  message: 'An internal server error occurred' }",
          "stack": "Error: Expected status code 500 to equal 200. /customer/a5dcb2a5-e1cf-438d-b189-718c3d228dd5 returned { statusCode: 500,\n  error: 'Internal Server Error',\n  message: 'An internal server error occurred' }\n    at Object.module.exports.checkStatus (/Users/lbenson/scm/lapetus/test-helpers/lib/tools.js:261:86)\n    at /Users/lbenson/scm/lapetus/test-helpers/test/customer.js:32:24\n    at /Users/lbenson/scm/lapetus/test-helpers/lib/customer/index.js:310:100\n    at /Users/lbenson/scm/lapetus/test-helpers/node_modules/hapi/lib/server.js:519:16\n    at /Users/lbenson/scm/lapetus/test-helpers/node_modules/hapi/node_modules/shot/lib/index.js:191:13\n    at process._tickDomainCallback (node.js:463:13)"
        }
      },
      {
        "title": "Customer DELETE /customer/{customerId}/associate-discount removes associate discount",
        "duration": 339,
        "error": {
          "message": "Expected status code 400 to equal 200. /customer/undefined/associate-discount returned { statusCode: 400,\n  error: 'Bad Request',\n  message: 'customerId must be a valid GUID',\n  validation: { source: 'params', keys: [ 'customerId' ] } }",
          "stack": "Error: Expected status code 400 to equal 200. /customer/undefined/associate-discount returned { statusCode: 400,\n  error: 'Bad Request',\n  message: 'customerId must be a valid GUID',\n  validation: { source: 'params', keys: [ 'customerId' ] } }\n    at Object.module.exports.checkStatus (/Users/lbenson/scm/lapetus/test-helpers/lib/tools.js:261:86)\n    at /Users/lbenson/scm/lapetus/test-helpers/test/customer.js:114:24\n    at /Users/lbenson/scm/lapetus/test-helpers/lib/customer/index.js:410:101\n    at /Users/lbenson/scm/lapetus/test-helpers/node_modules/hapi/lib/server.js:519:16\n    at /Users/lbenson/scm/lapetus/test-helpers/node_modules/hapi/node_modules/shot/lib/index.js:191:13\n    at process._tickDomainCallback (node.js:463:13)"
        }
      },
      {
        "title": "Customer #retrieveByEmail returns customer information",
        "duration": 1160,
        "error": {
          "message": "expected 'e34a2778-eb45-46a1-b0bc-5435fd4fdeca' to equal undefined",
          "stack": "AssertionError: expected 'e34a2778-eb45-46a1-b0bc-5435fd4fdeca' to equal undefined\n    at Assertion.assertEqual (/Users/lbenson/scm/lapetus/test-helpers/node_modules/lab/node_modules/chai/lib/chai/core/assertions.js:395:12)\n    at Assertion.ctx.(anonymous function) [as equal] (/Users/lbenson/scm/lapetus/test-helpers/node_modules/lab/node_modules/chai/lib/chai/utils/addMethod.js:40:25)\n    at /Users/lbenson/scm/lapetus/test-helpers/test/customer.js:167:61\n    at /Users/lbenson/scm/lapetus/test-helpers/lib/customer/index.js:350:100\n    at /Users/lbenson/scm/lapetus/test-helpers/node_modules/user/node_modules/fetch/lib/index.js:135:20\n    at /Users/lbenson/scm/lapetus/test-helpers/node_modules/nipple/lib/index.js:418:20\n    at finish (/Users/lbenson/scm/lapetus/test-helpers/node_modules/nipple/lib/index.js:224:20)\n    at wrapped (/Users/lbenson/scm/lapetus/test-helpers/node_modules/hoek/lib/index.js:560:20)\n    at onReaderFinish (/Users/lbenson/scm/lapetus/test-helpers/node_modules/nipple/lib/index.js:277:16)\n    at g (events.js:180:16)\n    at emit (events.js:117:20)\n    at finishMaybe (_stream_writable.js:359:12)\n    at endWritable (_stream_writable.js:366:3)\n    at Writable.end (_stream_writable.js:344:5)\n    at IncomingMessage.onend (_stream_readable.js:501:10)\n    at IncomingMessage.g (events.js:180:16)\n    at IncomingMessage.emit (events.js:117:20)\n    at _stream_readable.js:938:16\n    at process._tickDomainCallback (node.js:463:13)",
          "actual": "e34a2778-eb45-46a1-b0bc-5435fd4fdeca"
        }
      },
      {
        "title": "Customer Credit Card GET /customer/{customerId}/credit-card/{creditCardId} gets a credit card preference for a customer",
        "duration": 1853,
        "error": {
          "message": "Cannot read property 'res' of undefined",
          "stack": "TypeError: Cannot read property 'res' of undefined\n    at /Users/lbenson/scm/lapetus/test-helpers/test/customer.js:189:55\n    at /Users/lbenson/scm/lapetus/test-helpers/node_modules/async/lib/async.js:544:30\n    at /Users/lbenson/scm/lapetus/test-helpers/lib/customer/creditCard.js:235:105\n    at /Users/lbenson/scm/lapetus/test-helpers/node_modules/hapi/lib/server.js:519:16\n    at /Users/lbenson/scm/lapetus/test-helpers/node_modules/hapi/node_modules/shot/lib/index.js:191:13\n    at process._tickDomainCallback (node.js:463:13)"
        }
      },
      {
        "title": "Customer Credit Card PUT /customer/{customerId}/credit-card/{creditCardId} updates a credit card entry for a customer",
        "duration": 3230,
        "error": {
          "message": "Cannot read property 'res' of undefined",
          "stack": "TypeError: Cannot read property 'res' of undefined\n    at /Users/lbenson/scm/lapetus/test-helpers/test/customer.js:237:58\n    at /Users/lbenson/scm/lapetus/test-helpers/node_modules/async/lib/async.js:544:30\n    at /Users/lbenson/scm/lapetus/test-helpers/lib/customer/creditCard.js:235:105\n    at /Users/lbenson/scm/lapetus/test-helpers/node_modules/hapi/lib/server.js:519:16\n    at /Users/lbenson/scm/lapetus/test-helpers/node_modules/hapi/node_modules/shot/lib/index.js:191:13\n    at process._tickDomainCallback (node.js:463:13)"
        }
      },
      {
        "title": "Customer Credit Card DELETE /customer/{customerId}/credit-card/{creditCardId} deletes a credit card entry for a customer",
        "duration": 331,
        "error": {
          "message": "Cannot read property 'res' of undefined",
          "stack": "TypeError: Cannot read property 'res' of undefined\n    at /Users/lbenson/scm/lapetus/test-helpers/test/customer.js:268:58\n    at /Users/lbenson/scm/lapetus/test-helpers/node_modules/async/lib/async.js:544:30\n    at /Users/lbenson/scm/lapetus/test-helpers/lib/customer/creditCard.js:235:105\n    at /Users/lbenson/scm/lapetus/test-helpers/node_modules/hapi/lib/server.js:519:16\n    at /Users/lbenson/scm/lapetus/test-helpers/node_modules/hapi/node_modules/shot/lib/index.js:191:13\n    at process._tickDomainCallback (node.js:463:13)"
        }
      }
    ],
    "passes": [
      {
        "title": "Authentication creates a new user",
        "duration": 2381
      },
      {
        "title": "Authentication authenticates a valid user",
        "duration": 2923
      },
      {
        "title": "Authentication returns success for an authenticated user",
        "duration": 3463
      },
      {
        "title": "Authentication Scheme returns success for an authenticated user",
        "duration": 1708
      },
      {
        "title": "Password PUT /auth/password succesfully changes a password",
        "duration": 1724
      },
      {
        "title": "Password POST /auth/password/reset succesfully obtains token",
        "duration": 1163
      },
      {
        "title": "Password PUT /auth/password/reset succesfully resets password",
        "duration": 2246
      },
      {
        "title": "Cart creates new cart",
        "duration": 2684
      },
      {
        "title": "Customer PUT /customer/{customerId} successfully updates a customer",
        "duration": 4271
      },
      {
        "title": "Customer POST /customer/{customerId}/associate-discount returns true for valid associate discount",
        "duration": 2307
      },
      {
        "title": "Customer #retrieveCustomer returns customer information",
        "duration": 2202
      },
      {
        "title": "Customer Credit Card #createPayment Adds credit card via exposed function",
        "duration": 3396
      },
      {
        "title": "Customer Gift Card GET /customer/{customerId}/gift-card/{giftCardId} gets a gift card preference for a customer",
        "duration": 5638
      },
      {
        "title": "Customer Gift Card DELETE /customer/{customerId}/gift-card/{giftCardId} deletes a gift card entry for a customer",
        "duration": 7237
      },
      {
        "title": "Group Read Service gets eligible care plans for an item by USItemId",
        "duration": 2895
      },
      {
        "title": "Group Read Service gets eligible care plans for an item by product Id",
        "duration": 2896
      },
      {
        "title": "Payments generates a cleartext piHash for a credit card",
        "duration": 948
      },
      {
        "title": "Payments returns with an error when the encrypted request is bad",
        "duration": 970
      },
      {
        "title": "Payments returns with an error when the cleartext request is bad",
        "duration": 1134
      },
      {
        "title": "Payments generates an encrypted piHash for a credit card",
        "duration": 1150
      },
      {
        "title": "Payments successfully adds money to a gift card",
        "duration": 2566
      },
      {
        "title": "Payments gets a balance for a gift card",
        "duration": 3337
      },
      {
        "title": "Payments rejects an invalid pin while attempting to add money to gift card",
        "duration": 4248
      },
      {
        "title": "Prepare Server mock is enabled",
        "duration": 81
      },
      {
        "title": "Prepare Server mock is set according to environment variable",
        "duration": 133
      }
    ]
  }
}